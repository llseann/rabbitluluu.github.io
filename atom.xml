<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sean</title>
  
  <subtitle>Keep looking.Don&#39;t settle</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="rabbitluluu.github.io/"/>
  <updated>2019-04-20T09:02:01.368Z</updated>
  <id>rabbitluluu.github.io/</id>
  
  <author>
    <name>刘生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内存数据库--Redis</title>
    <link href="rabbitluluu.github.io/2019/04/20/%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93-Redis/"/>
    <id>rabbitluluu.github.io/2019/04/20/内存数据库-Redis/</id>
    <published>2019-04-20T08:56:02.000Z</published>
    <updated>2019-04-20T09:02:01.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><ol><li>Redis前身：Memcached</li><li>区别：<ul><li>支持持久化：RDB快照、AOF日志</li><li>支持丰富的数据类型</li></ul></li></ol><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><ol><li><p>解压&amp;安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">833  tar -zxvf redis-3.0.5.tar.gz </div><div class="line">839  cd redis-3.0.5/</div><div class="line">841  make</div><div class="line">842  make PREFIX=/opt/modules/redis install</div></pre></td></tr></table></figure></li><li><p>安装包内文件解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">redis-benchmark       Redis提供的压力测试工具。模拟产生客户端的压力</div><div class="line">redis-check-aof检查aof日志文件</div><div class="line">redis-check-dump检查rdb文件</div><div class="line">redis-cliRedis客户端脚本</div><div class="line">redis-sentinel哨兵</div><div class="line">redis-serverRedis服务器脚本</div></pre></td></tr></table></figure></li><li><p>配置文件修改<code>redis.conf</code></p><p>安装后的包里面没有该文件，需要自行从源码包里面拷贝一份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//是否以后台的方式运行</div><div class="line">42 daemonize yes   </div><div class="line">//端口号</div><div class="line">50 port 6379</div></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/redis-server ./redis.conf</div></pre></td></tr></table></figure></li></ol><h2 id="3、操作Redis"><a href="#3、操作Redis" class="headerlink" title="3、操作Redis"></a>3、操作Redis</h2><h3 id="3-1、命令行"><a href="#3-1、命令行" class="headerlink" title="3.1、命令行"></a>3.1、命令行</h3><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set key1 value1</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get key1</div><div class="line">&quot;value1&quot;</div><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">1) &quot;key1&quot;</div><div class="line"></div><div class="line">对数据的操作：</div><div class="line">127.0.0.1:6379&gt; set money 100</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; incr money</div><div class="line">(integer) 101</div><div class="line">127.0.0.1:6379&gt; get money</div><div class="line">&quot;101&quot;</div><div class="line">127.0.0.1:6379&gt; incrby money 1000</div><div class="line">(integer) 1101</div></pre></td></tr></table></figure><h3 id="3-2、IDE"><a href="#3-2、IDE" class="headerlink" title="3.2、IDE"></a>3.2、IDE</h3><h2 id="4、事务"><a href="#4、事务" class="headerlink" title="4、事务"></a>4、事务</h2><p><strong>不是真正的事务，是一种模拟</strong></p><h3 id="4-1、概念"><a href="#4-1、概念" class="headerlink" title="4.1、概念"></a>4.1、概念</h3><ol><li><p>什么是事务</p><p>事务由一组DML语句组成，插入更新删除操作</p></li><li><p>特点</p><p>要么都成功，要么都失败</p></li><li><p>Oracle事务本质</p><p>将事务的DML操作写入日志。日志写入成功，则事务执行成功。</p></li></ol><h3 id="4-2、Redis事务本质"><a href="#4-2、Redis事务本质" class="headerlink" title="4.2、Redis事务本质"></a>4.2、Redis事务本质</h3><p>将一组操作放入队列中，一次执行（批处理）</p><h3 id="4-3、Oracle和Redis事务区别"><a href="#4-3、Oracle和Redis事务区别" class="headerlink" title="4.3、Oracle和Redis事务区别"></a>4.3、Oracle和Redis事务区别</h3><table><thead><tr><th></th><th>Oracle</th><th>Redis</th></tr></thead><tbody><tr><td>开启事务</td><td>自动开启</td><td><code>multi</code>命令</td></tr><tr><td>执行语句</td><td>DML</td><td>Redis命令</td></tr><tr><td>提交事务</td><td>显式提交：commit   隐式提交:DDL语句（create table）</td><td>命令：exec 执行放在multi里面的操作</td></tr><tr><td>回滚事务</td><td>显式回滚：rollback   隐式回滚：系统掉电，客户端退出</td><td>命令：discard命令  把队列中的操作废弃掉</td></tr></tbody></table><h3 id="4-4、案例"><a href="#4-4、案例" class="headerlink" title="4.4、案例"></a>4.4、案例</h3><ol><li><p>银行转账：</p><p>事件：Tom有1000，Mike有1000，Tom给Mike转账100</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set tom 1000</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; set mike 1000</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; multi</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; decrby tom 100</div><div class="line">QUEUED</div><div class="line">127.0.0.1:6379&gt; incrby mike 100</div><div class="line">QUEUED</div><div class="line">127.0.0.1:6379&gt; exec</div><div class="line">1) (integer) 900</div><div class="line">2) (integer) 1100</div></pre></td></tr></table></figure></li><li><p>买票：</p><p>事件：tom有1000元，此时只剩下一张票，在他买票的时候，别人在其他窗口买下了最后一张票</p><p>终端1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set tom 1000</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; set ticket 1</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; multi</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; decrby tom 500</div><div class="line">QUEUED</div><div class="line">127.0.0.1:6379&gt; decr ticket</div><div class="line">QUEUED</div><div class="line">//在此处执行终端2操作</div><div class="line">127.0.0.1:6379&gt; exec</div><div class="line">1) (integer) 500</div><div class="line">2) (integer) -1</div></pre></td></tr></table></figure><p>终端2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; get ticket</div><div class="line">&quot;1&quot;</div><div class="line">127.0.0.1:6379&gt; decr ticket</div><div class="line">(integer) 0</div></pre></td></tr></table></figure><p>分析：明显观察到有不合逻辑的情况，票的数量变成了-1，这在现实中是不合逻辑的，后面使用锁机制进行修改</p></li><li><p>买票改进–使用锁机制</p><p>终端1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set tom 1000</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; set ticket 1</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; watch ticket</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; multi</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; decrby tom 500</div><div class="line">QUEUED</div><div class="line">127.0.0.1:6379&gt; decr ticket</div><div class="line">QUEUED</div><div class="line">//此处执行终端2</div><div class="line">127.0.0.1:6379&gt; exec</div><div class="line">(nil)</div></pre></td></tr></table></figure><p>终端2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; decr ticket</div><div class="line">(integer) 0</div></pre></td></tr></table></figure><p>分析：nil代表操作没有执行或者执行失败，因为此次使用了watch关键字</p><p>​    <code>watch ticket</code>—–&gt; 相当于给ticket加了锁。认为在下面执行事务的时候，值不会变。</p></li></ol><h2 id="5、消息机制"><a href="#5、消息机制" class="headerlink" title="5、消息机制"></a>5、消息机制</h2><ol><li><p>消息类型</p><ul><li>Queue消息：队列，点对点</li><li>Topic消息：主题，群发，发布消息，订阅消息</li></ul></li><li><p>Redis消息机制</p><p>只支持Topc消息</p><p>命令：</p><p>发布消息：PUBLISH</p><p>订阅消息：SUBSCRIBE、PSUBSCRIBE(可以使用通配符来订阅消息)</p></li><li><p>常用的消息系统</p><p>Redis：只支持Topic</p><p>Kafka：只支持Topic，但是还需要Zookeeper的支持</p><p>JMS：Java Message Service，java消息服务标准，质量两种类型</p></li></ol><p>演示<code>SUBSCRIBE</code>：启动三台终端，连接到同一个实例端口，提前启动2和3</p><p>终端1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; PUBLISH gakki &quot;gakki is a beautiful girl&quot;</div><div class="line">(integer) 2</div><div class="line">127.0.0.1:6379&gt;</div></pre></td></tr></table></figure><p>终端2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; SUBSCRIBE gakki</div><div class="line">Reading messages... (press Ctrl-C to quit)</div><div class="line">1) &quot;subscribe&quot;</div><div class="line">2) &quot;gakki&quot;</div><div class="line">3) (integer) 1</div><div class="line">1) &quot;message&quot;</div><div class="line">2) &quot;gakki&quot;</div><div class="line">3) &quot;gakki is a beautiful girl&quot;</div></pre></td></tr></table></figure><p>终端3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; SUBSCRIBE gakki</div><div class="line">Reading messages... (press Ctrl-C to quit)</div><div class="line">1) &quot;subscribe&quot;</div><div class="line">2) &quot;gakki&quot;</div><div class="line">3) (integer) 1</div><div class="line">1) &quot;message&quot;</div><div class="line">2) &quot;gakki&quot;</div><div class="line">3) &quot;gakki is a beautiful girl&quot;</div></pre></td></tr></table></figure><p>演示<code>PSUBSCRIBE</code>：使用通配符*来获取一类Topic的消息</p><p>终端1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; PUBLISH gakki1 &quot;gakki is a beautiful girl&quot;</div><div class="line">(integer) 1</div></pre></td></tr></table></figure><p>终端2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; PUBLISH gakki2 &quot;gakki is a beautiful girl&quot;</div><div class="line">(integer) 1</div></pre></td></tr></table></figure><p>终端3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; PSUBSCRIBE gakki*</div><div class="line">Reading messages... (press Ctrl-C to quit)</div><div class="line">1) &quot;psubscribe&quot;</div><div class="line">2) &quot;gakki*&quot;</div><div class="line">3) (integer) 1</div><div class="line">1) &quot;pmessage&quot;</div><div class="line">2) &quot;gakki*&quot;</div><div class="line">3) &quot;gakki1&quot;</div><div class="line">4) &quot;gakki is a beautiful girl&quot;</div><div class="line">1) &quot;pmessage&quot;</div><div class="line">2) &quot;gakki*&quot;</div><div class="line">3) &quot;gakki2&quot;</div><div class="line">4) &quot;gakki is a beautiful girl&quot;</div></pre></td></tr></table></figure><h2 id="6、持久化"><a href="#6、持久化" class="headerlink" title="6、持久化"></a>6、持久化</h2><p>本质：备份和恢复</p><h3 id="6-1、RDB快照：默认"><a href="#6-1、RDB快照：默认" class="headerlink" title="6.1、RDB快照：默认"></a>6.1、RDB快照：默认</h3><ol><li><p>看成一种快照，备份。每隔段时间，将内存汇总的数据保存到硬盘上，产生RDB文件。</p></li><li><p>RDB生成策略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">147 save 900 1          900秒内，有1个key发生变化</div><div class="line">148 save 300 10        300内，如果有10个key发生变化，执行RDB</div><div class="line">149 save 60 10000    60秒内，如果有10000个key发生变化，执行RDB</div></pre></td></tr></table></figure><p>save  时间  发生变化的key的个数</p></li><li><p>其他参数</p><p>164 stop-writes-on-bgsave-error yes  当后台写进程出错时，禁止写入新的数据    </p><pre><code>170 rdbcompression yes               是否压缩。如果看重性能，设置成no，压缩会节省空间，但会影响备份和恢复性能182 dbfilename dump.rdb              RDB文件名称192 dir ./                             RDB文件地址</code></pre></li><li><p>优缺点</p><p>优点：速度快 恢复的速度也快<br>缺点：在两次RDB之间，可能会造成数据的丢失。</p></li></ol><h3 id="6-2、AOF机制"><a href="#6-2、AOF机制" class="headerlink" title="6.2、AOF机制"></a>6.2、AOF机制</h3><p>客户端在操作Redis时，把操作记录到文件中，如果发生崩溃，读取日志，把操作完全执行一遍。</p><ol><li><p>启用</p><p>默认是禁用的，修改<code>509 appendonly no</code>  参数修改成yes，改完重启redis，在根目录下出现后缀.aof文件</p></li><li><p>AOF记录策略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">538 # appendfsync always       每个操作都记录日志：优点安全 缺点：慢</div><div class="line">539 appendfsync everysec每秒记一次日志</div><div class="line">540 # appendfsync no由操作系统来决定记录日志的方式---用不到</div></pre></td></tr></table></figure></li><li><p>日志重写：overwrite</p><p>说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">set money 1</div><div class="line">incr money</div><div class="line">...100次</div><div class="line">重写后相当于</div><div class="line">set money 100</div></pre></td></tr></table></figure><p>分析：<code>appendonly.aof</code>文件大小会先上升</p><p>终端1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@node01 bin]# ./redis-benchmark -n 100000</div></pre></td></tr></table></figure><p>终端2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@node01 redis]# ll</div><div class="line">total 119004</div><div class="line">-rw-r--r--. 1 root root 68682810 Apr 20 14:52 appendonly.aof</div><div class="line">drwxr-xr-x. 2 root root      135 Apr 19 21:01 bin</div><div class="line">-rw-r--r--. 1 root root   400082 Apr 20 14:52 dump.rdb</div><div class="line">-rw-r--r--. 1 root root    41562 Apr 20 13:59 redis.conf</div><div class="line">-rw-r--r--. 1 root root  2464362 Apr 20 14:52 temp-rewriteaof-bg-2037.aof</div><div class="line">[root@node01 redis]# ll</div><div class="line">total 6900</div><div class="line">-rw-r--r--. 1 root root 4108001 Apr 20 14:52 appendonly.aof</div><div class="line">drwxr-xr-x. 2 root root     135 Apr 19 21:01 bin</div><div class="line">-rw-r--r--. 1 root root  400082 Apr 20 14:52 dump.rdb</div><div class="line">-rw-r--r--. 1 root root   41562 Apr 20 13:59 redis.conf</div></pre></td></tr></table></figure></li><li><p>参数设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">561 no-appendfsync-on-rewrite no   执行重写的时候，不写入新的日志</div><div class="line">581 auto-aof-rewrite-min-size 64mb  执行重写的文件大小。到64M触发重写。</div></pre></td></tr></table></figure></li></ol><h3 id="6-3、优先级别"><a href="#6-3、优先级别" class="headerlink" title="6.3、优先级别"></a>6.3、优先级别</h3><p>当两种策略同时开启时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">504 # If the AOF is enabled on startup Redis will load the AOF, that is the file</div><div class="line">505 # with the better durability guarantees.</div></pre></td></tr></table></figure><p><strong>优先使用！！！AOF</strong></p><h2 id="8、Redis主从复制"><a href="#8、Redis主从复制" class="headerlink" title="8、Redis主从复制"></a>8、Redis主从复制</h2><p>作用：</p><ul><li>主从复制：主从备份，防止主节点宕机</li><li>任务分离：分摊主节点压力，读写分离</li></ul><p>区别于Memcached，它是主主复制，Redis是主从复制</p><p>Redis集群两种部署方式<br>                星型模型：<br>                优点：效率高，两个slave地位一样，可以直接从主节点取出信息<br>                缺点：HA比较麻烦</p><p>​                线性模型：<br>​                优点：HA简单<br>​                缺点：效率不如星型模型</p><p>实现：</p><ol><li><p>拷贝3份配置文件</p><p>cp redis.conf redis6379.conf<br>cp redis.conf redis6380.conf<br>cp redis.conf redis6381.conf</p></li><li><p>修改配置文件</p><p>6379作为主节点，其余俩作为从节点</p><p>主节点修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">147 #save 900 1</div><div class="line">148 #save 300 10</div><div class="line">149 #save 60 10000</div><div class="line">......</div><div class="line">509 appendonly no</div></pre></td></tr></table></figure><p>从节点6380修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">50 port 6380</div><div class="line">...</div><div class="line">182 dbfilename dump6380.rdb</div><div class="line">...</div><div class="line">211 slaveof node01 6379</div><div class="line">...</div><div class="line">513 appendfilename &quot;appendonly6380.aof&quot;</div></pre></td></tr></table></figure><p>从节点6381修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">50 port 6381</div><div class="line">...</div><div class="line">182 dbfilename dump6381.rdb</div><div class="line">...</div><div class="line">211 slaveof node01 6379</div><div class="line">...</div><div class="line">513 appendfilename &quot;appendonly6381.aof&quot;</div></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@node01 bin]# ./redis-server ../redis6379.conf </div><div class="line">[root@node01 bin]# ./redis-server ../redis6380.conf </div><div class="line">[root@node01 bin]# ./redis-server ../redis6381.conf</div></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@node01 bin]# ps -ef | grep redis</div><div class="line">root       2117      1  0 16:24 ?        00:00:00 ./redis-server *:6379</div><div class="line">root       2123      1  0 16:24 ?        00:00:00 ./redis-server *:6381</div><div class="line">root       2143      1  0 16:28 ?        00:00:00 ./redis-server *:6380</div><div class="line">root       2149   1704  0 16:28 pts/0    00:00:00 grep --color=auto redis</div><div class="line">[root@node01 bin]# ./redis-cli -p 6379</div><div class="line">127.0.0.1:6379&gt; set gakki 996</div><div class="line">OK</div><div class="line">[root@node01 bin]# ./redis-cli -p 6380</div><div class="line">127.0.0.1:6380&gt; get gakki</div><div class="line">"996"</div><div class="line">[root@node01 bin]# ./redis-cli -p 6381</div><div class="line">127.0.0.1:6381&gt; get gakki</div><div class="line">"996"</div></pre></td></tr></table></figure><font color="red">默认情况下，从节点只读。</font><font color="red">注意：一次性启动从节点不要太多,可以分批次启动</font></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;h2 id=&quot;1、简介&quot;&gt;&lt;a href=&quot;#1、简介&quot; class=&quot;headerlink&quot; title=&quot;1、简介&quot;
      
    
    </summary>
    
    
      <category term="Redis" scheme="rabbitluluu.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>内存数据库--MemCached</title>
    <link href="rabbitluluu.github.io/2019/04/20/%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93-MemCached/"/>
    <id>rabbitluluu.github.io/2019/04/20/内存数据库-MemCached/</id>
    <published>2019-04-20T08:55:53.000Z</published>
    <updated>2019-04-20T09:01:29.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存数据库"><a href="#内存数据库" class="headerlink" title="内存数据库"></a>内存数据库</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>常见的内存数据库：</p><p>MemCached：看成Redis前身，严格来说，MemCached不能叫数据库，只能叫缓存<br>            不支持持久化。如果内存停电，数据丢失。<br>Redis：内存数据库，支持持久化，支持HA</p><p>Oracle TimesTen</p><p>保持session一致性，MemCached + keepalive实现</p><h2 id="2、Memcached"><a href="#2、Memcached" class="headerlink" title="2、Memcached"></a>2、Memcached</h2><h3 id="2-1、基本原理和体系架构"><a href="#2-1、基本原理和体系架构" class="headerlink" title="2.1、基本原理和体系架构"></a>2.1、基本原理和体系架构</h3><ol><li>在内存中，维护一张巨大的Hash表</li><li>通过路由算法来决定数据存储的位置。—&gt; 客户端路由</li></ol><h3 id="2-2、安装和配置"><a href="#2-2、安装和配置" class="headerlink" title="2.2、安装和配置"></a>2.2、安装和配置</h3><ol><li><p>安装gcc编译器<code>yum install gcc</code></p></li><li><p>安装<code>libevent</code>库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1030  tar -zxvf libevent-2.0.21-stable.tar.gz </div><div class="line">1031  ll</div><div class="line">1032  cd libevent-2.0.21-stable</div><div class="line">1033  ll</div><div class="line">1034  ./configure --prefix=/opt/modules/libevent</div><div class="line">1035  make</div><div class="line">1036  make install</div></pre></td></tr></table></figure></li><li><p>安装memcached</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1044  tar -zxvf memcached-1.4.25.tar.gz </div><div class="line">1045  ll</div><div class="line">1046  cd memcached-1.4.25</div><div class="line">1047  ll</div><div class="line">1048  ./configure --prefix=/opt/modules/memcached --withlibevent=/opt/modules/libevent</div><div class="line">1049  make</div><div class="line">1050  make install</div></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@node01 bin]# ./memcached -u root -d -m 128 -p 11211</div><div class="line">[root@node01 bin]# ./memcached -u root -d -m 128 -p 11212</div><div class="line">[root@node01 bin]# ./memcached -u root -d -m 128 -p 11213</div><div class="line">[root@node01 bin]# ps -ef | grep memcached</div><div class="line">root       8876      1  0 15:30 ?        00:00:00 ./memcached -u root -d -m 128 -p 11211</div><div class="line">root       8883      1  0 15:30 ?        00:00:00 ./memcached -u root -d -m 128 -p 11212</div><div class="line">root       8890      1  0 15:31 ?        00:00:00 ./memcached -u root -d -m 128 -p 11213</div><div class="line">root       8897   1669  0 15:31 pts/0    00:00:00 grep --color=auto memcached</div></pre></td></tr></table></figure></li></ol><h3 id="2-3、操作Memcached"><a href="#2-3、操作Memcached" class="headerlink" title="2.3、操作Memcached"></a>2.3、操作Memcached</h3><h4 id="2-3-1、命令行操作"><a href="#2-3-1、命令行操作" class="headerlink" title="2.3.1、命令行操作"></a>2.3.1、命令行操作</h4><p><code>[root@node01 bin]# telnet localhost 11211</code></p><ol><li><p>保存/获取数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">set gakki 0 0 4</div><div class="line">love</div><div class="line">STORED</div><div class="line">get gakki</div><div class="line">VALUE gakki 0 4</div><div class="line">love</div><div class="line">END</div></pre></td></tr></table></figure><p>其中<code>set gakki 0 0 4</code>:</p><p><code>gakki</code>：为key的名字</p><p>第一个0：表示标志位</p><p>第二个0：数据过期时间，0表示永不过期</p><p>数字4：数据长度</p></li></ol><h4 id="2-3-2、IDE操作"><a href="#2-3-2、IDE操作" class="headerlink" title="2.3.2、IDE操作"></a>2.3.2、IDE操作</h4><ol><li>代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> net.spy.memcached.MemcachedClient;</div><div class="line"><span class="keyword">import</span> net.spy.memcached.internal.OperationFuture;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Future;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span>: Sean</div><div class="line"> * <span class="doctag">@date</span>: 2019/4/19/20:10</div><div class="line"> * <span class="doctag">@version</span>: 1.0</div><div class="line"> * Java操作memcached</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//Demo01.setter();</span></div><div class="line"></div><div class="line">        <span class="comment">//Demo01.getter();</span></div><div class="line"></div><div class="line">        <span class="comment">//Demo01.setGirl();</span></div><div class="line"></div><div class="line">        Demo01.testSets();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用来创建key，并存储数据</div><div class="line">     *</div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//连接到集群</span></div><div class="line">        <span class="comment">//创建MemcachedClient实例，指定Memcached服务器ip地址和端口</span></div><div class="line">        MemcachedClient client = <span class="keyword">new</span> MemcachedClient(</div><div class="line">                <span class="keyword">new</span> InetSocketAddress(<span class="string">"192.168.10.201"</span>, <span class="number">11211</span>));</div><div class="line"></div><div class="line">        <span class="comment">//进行set操作</span></div><div class="line">        Future&lt;Boolean&gt; f = client.set(<span class="string">"gakki"</span>, <span class="number">0</span>, <span class="string">"gakki is a beautiful girl"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (f.get().booleanValue()) &#123;</div><div class="line">            client.shutdown();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回指定键的值</div><div class="line">     *</div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//连接到集群</span></div><div class="line">        <span class="comment">//创建MemcachedClient实例，指定Memcached服务器ip地址和端口</span></div><div class="line">        MemcachedClient client = <span class="keyword">new</span> MemcachedClient(</div><div class="line">                <span class="keyword">new</span> InetSocketAddress(<span class="string">"192.168.10.201"</span>, <span class="number">11211</span>));</div><div class="line"></div><div class="line">        <span class="comment">//按照key取值，不存在的时候返回空</span></div><div class="line">        Object o = client.get(<span class="string">"gakki"</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"键：gakki "</span> + <span class="string">"值为："</span> + o);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 存储对象</div><div class="line">     *</div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setGirl</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//连接到集群</span></div><div class="line">        <span class="comment">//创建MemcachedClient实例，指定Memcached服务器ip地址和端口</span></div><div class="line">        MemcachedClient client = <span class="keyword">new</span> MemcachedClient(</div><div class="line">                <span class="keyword">new</span> InetSocketAddress(<span class="string">"192.168.10.201"</span>, <span class="number">11211</span>));</div><div class="line"></div><div class="line">        Future&lt;Boolean&gt; f = client.set(<span class="string">"Sean"</span>, <span class="number">0</span>, <span class="keyword">new</span> Girl());</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (f.get().booleanValue()) &#123;</div><div class="line">            client.shutdown();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="comment">/**</span></div><div class="line">     * Memcached路由算法</div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSets</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//测试客户端路由算法</span></div><div class="line">        <span class="comment">//构造每台Memcached服务器加入list</span></div><div class="line">        List&lt;InetSocketAddress&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="comment">//添加服务器信息</span></div><div class="line">        list.add(<span class="keyword">new</span> InetSocketAddress(<span class="string">"node01"</span>, <span class="number">11211</span>));</div><div class="line">        list.add(<span class="keyword">new</span> InetSocketAddress(<span class="string">"node01"</span>, <span class="number">11212</span>));</div><div class="line">        list.add(<span class="keyword">new</span> InetSocketAddress(<span class="string">"node01"</span>, <span class="number">11213</span>));</div><div class="line"></div><div class="line">        <span class="comment">//建立Memcached client实例</span></div><div class="line">        MemcachedClient client = <span class="keyword">new</span> MemcachedClient(list);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</div><div class="line">            System.out.println(<span class="string">"插入数据："</span>+i);</div><div class="line">            client.set(<span class="string">"key"</span>+i,<span class="number">0</span>,<span class="string">"value:"</span>+i);</div><div class="line">            Thread.sleep(<span class="number">500</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        client.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li><p>路由算法</p><p>1、求余数hash算法</p><p>用key做hash运算得到一个整数，根据余数路由。</p><p>例如：服务器端有三台MemCached服务器</p><p>根据key，做hash运算</p><p>7%3=1，那么就路由到第2台服务器。</p><p>6%3=0，那么路由到第1台服务器</p><p>5%3=2，那么路由到第3台服务器</p></li></ol><p>   优点：数据分布均衡在多台服务器中，适合大多数据需求。</p><p>   缺点：如果需要扩容或者有宕机的情况，会造成数据的丢失。</p><p>   2、一致性hash算法</p><p>   l  基本原理：</p><p>   <img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/1.png" alt=""></p><p>   l  一致性hash算法下扩容</p><p>   <img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/2.png" alt=""></p><p>   l  一致性hash算法下DOWN机</p><p>   <img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内存数据库&quot;&gt;&lt;a href=&quot;#内存数据库&quot; class=&quot;headerlink&quot; title=&quot;内存数据库&quot;&gt;&lt;/a&gt;内存数据库&lt;/h1&gt;&lt;h2 id=&quot;1、概述&quot;&gt;&lt;a href=&quot;#1、概述&quot; class=&quot;headerlink&quot; title=&quot;1、概述&quot;
      
    
    </summary>
    
    
      <category term="MemCached" scheme="rabbitluluu.github.io/tags/MemCached/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础--时区&amp;时间同步</title>
    <link href="rabbitluluu.github.io/2019/04/20/Linux%E5%9F%BA%E7%A1%80-%E6%97%B6%E5%8C%BA-%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/"/>
    <id>rabbitluluu.github.io/2019/04/20/Linux基础-时区-时间同步/</id>
    <published>2019-04-20T08:55:43.000Z</published>
    <updated>2019-04-20T09:01:03.378Z</updated>
    
    <content type="html"><![CDATA[<p>问题：时区不同步，导致任务调度出错</p><p>时间同步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@node01 Asia]# date -s '14:42:00'</div><div class="line">Fri Apr 19 14:42:00 CST 2019</div><div class="line">[root@node01 Asia]# hwclock -w</div><div class="line">[root@node01 Asia]# date</div><div class="line">Fri Apr 19 14:42:12 CST 2019</div></pre></td></tr></table></figure><p>时区同步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@node01 Asia]# cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime </div><div class="line">cp: overwrite ‘/etc/localtime’? y</div><div class="line">[root@node01 Asia]# date</div><div class="line">Fri Apr 19 14:35:56 CST 2019</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题：时区不同步，导致任务调度出错&lt;/p&gt;
&lt;p&gt;时间同步：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class
      
    
    </summary>
    
    
      <category term="Linux" scheme="rabbitluluu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Spark进阶--调优</title>
    <link href="rabbitluluu.github.io/2019/04/20/Spark%E8%BF%9B%E9%98%B6-%E8%B0%83%E4%BC%98/"/>
    <id>rabbitluluu.github.io/2019/04/20/Spark进阶-调优/</id>
    <published>2019-04-20T08:55:08.000Z</published>
    <updated>2019-04-20T09:00:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spark调优"><a href="#Spark调优" class="headerlink" title="Spark调优"></a>Spark调优</h1><h2 id="1、性能优化的参数"><a href="#1、性能优化的参数" class="headerlink" title="1、性能优化的参数"></a>1、性能优化的参数</h2><p>性能优化的场景：</p><ol><li>spark submit的时候，程序报OOM错误的时候</li><li>程序运行速度很慢的时候</li></ol><p>方法；调整spark参数</p><p>​    conf.set…</p><h2 id="2、Spark调优"><a href="#2、Spark调优" class="headerlink" title="2、Spark调优"></a>2、Spark调优</h2><p>问题：只要会用就可以，为什么还有内核源码和调优？</p><p>​    Spark的计算本质是<strong>分布式计算</strong></p><p>​    所以，spark程序的性能可能因为集群中的任何因素出现瓶颈：CPU、网络带宽、内存</p><p>​    前两者由运维来维护，故主要注重点在于<strong>内存</strong></p><p>​    现实环境中，数据量远远大于内存容量</p><p>​    如果内存比较紧张，不足以放下所有数据（10亿量级–500G），需要对内存的使用进行性能优化</p><p>​    比如：使用某些方法减少内存的消耗</p><p>​    Spark性能优化，主要针对<strong>内存</strong>的使用调优</p><p>Spark性能优化的技术：</p><ol><li><em>使用高性能序列化类库</em></li><li><em>优化数据结构</em></li><li>对于多次使用的RDD进行持久化、checkpoint操作</li><li>持久化级别：MEMORY_ONLY   MEMORY_ONLY_SER 序列化</li><li><em>Java虚拟机垃圾回收调优</em></li><li><em>Shuffle的调优，1.x的版本中，90%的性能问题都是由shuffle导致的</em></li></ol><p>其他性能优化：</p><ol><li>提高并行度</li><li>广播共享数据</li></ol><h3 id="2-1、前提：诊断Spark内存使用"><a href="#2-1、前提：诊断Spark内存使用" class="headerlink" title="2.1、前提：诊断Spark内存使用"></a>2.1、前提：诊断Spark内存使用</h3><p>首先要看到内存使用情况，才能进行针对性的优化</p><ol><li><p>内存的花费的场所：</p><ul><li><p>每个Java对象，都有一个对象头，占用16字节，包含一些对象的原信息，比如指向他的类的指针</p><p>如果对象本身很小，比如int，但是他的对象头比对象自己还大</p></li><li><p>Java的String对象，会比他的内存的原始数据，多出40个字节</p><p>String内部使用的char数组来保存内部的字符串序列，并且还要保存诸如数组长度之类的信息。</p><p>char使用的UTF-16编码，每个字符占2个字节，比如：包含10个字符的String，2*10+40=60字节</p></li><li><p>Java中的集合类型，比如HashMap和LinkedList，内部使用链表数据结构</p><p>链表中的每个数据，使用ENTRY对象包装</p><p>Entry对象，不光有对象头，还有指向下一个Entry的指针，占用8字节</p></li><li><p>元素类型为原始数据类型（int），内部通常会使用原始数据类型的包装类型（Integer）来存储元素</p></li></ul></li><li><p>如何判断Spark程序消耗内存情况？   –预估</p><ul><li><ol><li>设置RDD的并行度</li></ol><p>两种方法创建RDD，<code>parallelize()</code>和<code>textFile()</code>在这两个方法中，传入第二个参数，设置RDD的partition数量</p><p>在SparkConfig中设置一个参数：<code>spark.default.parallelism</code></p><p>可以统一设置这个application中所有RDD的partition数量</p></li><li><ol><li>将RDD缓存cache()</li></ol></li><li><ol><li>观察日志:driver日志(work/任务号/0/stderr)</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">19</span>/<span class="number">04</span>/<span class="number">13</span> <span class="number">22</span>:<span class="number">01</span>:<span class="number">05</span> <span class="type">INFO</span> <span class="type">MemoryStore</span>: <span class="type">Block</span> rdd_3_1 stored as values in memory (estimated size <span class="number">26.0</span> <span class="type">MB</span>, free <span class="number">339.9</span> <span class="type">MB</span>)</div><div class="line"><span class="number">19</span>/<span class="number">04</span>/<span class="number">13</span> <span class="number">22</span>:<span class="number">01</span>:<span class="number">06</span> <span class="type">INFO</span> <span class="type">MemoryStore</span>: <span class="type">Block</span> rdd_3_0 stored as values in memory (estimated size <span class="number">26.7</span> <span class="type">MB</span>, free <span class="number">313.2</span> <span class="type">MB</span>)</div></pre></td></tr></table></figure><p>将两个内存相加即为RDD所占用的内存大小</p></li></ul></li></ol><h3 id="2-2、优化一：使用高性能序列化类库"><a href="#2-2、优化一：使用高性能序列化类库" class="headerlink" title="2.2、优化一：使用高性能序列化类库"></a>2.2、优化一：使用高性能序列化类库</h3><ol><li><p>数据序列化概述</p><p><strong>序列化</strong>：就是将对象或者数据结构，转换为特定的格式，使其可以再网络中传输，或者存储在内存或文件中</p><p><strong>反序列化</strong>：是相反的操作，将对象从序列化数据中还原出来。</p><p>​    序列化后的数据格式，可以是二进制，xml、json等任何格式，对象、数据序列化的重点在于数据的<strong>交换与传输</strong>。在任何分布式系统中，序列化都是一个很重要的角色，如果使用的序列化技术，操作很慢，或者序列化后的数据量还是很大，会让分布式系统应用程序性能下降很多，所以Spark性能优化的第一步，就是进行<strong>序列化的性能优化</strong></p><p>​    Spark自身默认会在一些地方对数据进行序列化，比如Shuffle，另外，当使用了外部数据（自定义类型）也要序列化，Spark本身对序列化的便捷性和性能之间进行了取舍，默认情况下，Spark更倾向于序列化的<strong>便捷性</strong>，使用了Java自身提供的序列化机制，虽然方便实用，但是Java序列化机制性能不高，序列化速度慢，序列化后数据较大，比较占用内存空间</p></li><li><p>kryo工具</p><p>Spark支持使用kryo类库来进行序列化</p><p>速度快，占用空间更小，比Java序列化数据占用空间小10倍</p><p>如何使用kryo序列化机制：</p><ul><li>设置Spark conf</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bin/spark-submit will also read configuration options from conf/spark-defaults.conf, </div><div class="line">in which each line consists of a key and a value separated by whitespace. <span class="type">For</span> example:</div><div class="line"></div><div class="line">spark.master            spark:<span class="comment">//5.6.7.8:7077</span></div><div class="line">spark.executor.memory   <span class="number">4</span>g</div><div class="line">spark.eventLog.enabled  <span class="literal">true</span></div><div class="line">spark.serializer        org.apache.spark.serializer.<span class="type">KryoSerializer</span></div></pre></td></tr></table></figure><ul><li>使用kryo，要求需要序列化的类，要提前注册</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conf.registerKryoClasses(<span class="type">Array</span>(classOf[<span class="type">Count</span>],......))</div></pre></td></tr></table></figure></li><li><p>kryo类库的优化</p><ul><li><p>优化缓存大小</p><p>如果注册的自定义类型，本身特别大(100个字段)，会导致要序列化的对象太大</p><p>此时需要对kyro本身进行优化。因为kryo内部的缓存，可能不能存放这么大的class对象。<br>设置<code>spark.kryoserializer.buffer.max</code>参数，将其调大。</p></li><li><p>预先注册自定义类型</p><p>虽然不注册自定义类型，kryo也可以正常工作，但会保存一份他的全限定类名，耗费内存。<br>推荐预先注册要序列化的自定义类型。</p></li></ul></li></ol><h2 id="3、优化数据结构"><a href="#3、优化数据结构" class="headerlink" title="3、优化数据结构"></a>3、优化数据结构</h2><h3 id="3-1、概述"><a href="#3-1、概述" class="headerlink" title="3.1、概述"></a>3.1、概述</h3><p>​    要减少内存的消耗，除了要使用高效的序列化类库外，还要优化数据结构，避免Java语法特性中所导致的额外内存开销。</p><p>核心：优化算子函数内部使用到的局部数据或算子函数外部的数据</p><p>目的：减少对内存的消耗和占用</p><h3 id="3-2、做法"><a href="#3-2、做法" class="headerlink" title="3.2、做法"></a>3.2、做法</h3><ol><li><p>优先使用数组和字符串，而不是集合类，即：优先使用Array，而不是ArrayList、LinkedList、HashMap</p><p>使用int[]回避List<integer>节省内存</integer></p></li><li><p>将对象转换成字符串，企业中，将HashMap、List这种数据，统一使用String拼接成特殊格式的字符串</p><p>如：Map<integer,person> persons = new HashMap<integer,person></integer,person></integer,person></p><p>优化为：</p><p>String persons = “1:Andy,BeiJing|2:Gakki,Japan”</p></li><li><p>避免使用多层嵌套对象结构</p><p>如：public class Teacher{private ……; private List<student> students = new ArrayList()}</student></p><p>优化为：</p><p>{“teacherId”: 1, “student”:{“stuId”:1…},{}}</p></li><li><p>对于能够避免的场景，尽量使用int代替String</p><p>String比List效率高，但是int类型占用更少内存</p><p>如：数据库主键，推荐使用自增id，而不是uuid</p></li></ol><h2 id="4、JVM调优"><a href="#4、JVM调优" class="headerlink" title="4、JVM调优"></a>4、JVM调优</h2><h3 id="4-1、概述"><a href="#4-1、概述" class="headerlink" title="4.1、概述"></a>4.1、概述</h3><p>​    如果在持久化RDD的时候，持久化了大量的数据，那么Java虚拟机的垃圾回收可能成为一个瓶颈</p><p>Java虚拟机会定期进行进行垃圾回收，此时会追踪所有Java对象，并且在垃圾回收时，找到那些已经不再使用的对象，清理就对象，给新对象腾出空间。</p><p>​    垃圾回收的性能开销，与内存中的对象成正比，在做虚拟机调优之前，先做上面的调优工作，这样才有意义</p><h3 id="4-2、Spark-GC原理"><a href="#4-2、Spark-GC原理" class="headerlink" title="4.2、Spark GC原理"></a>4.2、Spark GC原理</h3><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/Spark-GC%E5%8E%9F%E7%90%86.png" alt=""></p><h3 id="4-3、监测垃圾回收"><a href="#4-3、监测垃圾回收" class="headerlink" title="4.3、监测垃圾回收"></a>4.3、监测垃圾回收</h3><p>做法：进行监测，比如多久进行一次垃圾回收以及耗费的时间等等。</p><p>启动spark-submit时，添加如下配置：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--conf <span class="string">"spark.executor.extraJavaOptions=-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimesStamps"</span></div></pre></td></tr></table></figure><p>注意：这个是输出到<strong>worker</strong>日志中，而不是driver日志。<br>安装目录的/logs文件夹下               worker日志<br>安装目录的/work文件夹下              driver日志</p><h3 id="4-4、优化Executor内存比例"><a href="#4-4、优化Executor内存比例" class="headerlink" title="4.4、优化Executor内存比例"></a>4.4、优化Executor内存比例</h3><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/%E4%BC%98%E5%8C%96Spark%E5%86%85%E5%AD%98%E6%AF%94%E4%BE%8B.png" alt=""></p><p>目的：减少GC次数</p><p>对于GC调优来说，最重要的就是调节RDD的缓存占用的内存空间与算子执行时创建对象所占用的内存空间的比例</p><p>对于默认情况下，Spark使用每个Excutor  60%的内存空间来缓存RDD，在task运行期间所创建的对象，只有40%的内存可供使用</p><p>使用：<code>conf.set(&quot;spark.storage.memoryFraction&quot;,0.5)</code></p><h2 id="5、rdd-cache-checkpoint"><a href="#5、rdd-cache-checkpoint" class="headerlink" title="5、rdd.cache   checkpoint"></a>5、rdd.cache   checkpoint</h2><h2 id="6、持久化级别："><a href="#6、持久化级别：" class="headerlink" title="6、持久化级别："></a>6、持久化级别：</h2><p><code>MEMORY_ONLY  ---&gt;  MEMORY_ONLY_SER 序列化</code></p><h2 id="7、shuffle原理"><a href="#7、shuffle原理" class="headerlink" title="7、shuffle原理"></a>7、shuffle原理</h2><p><strong>优化前：</strong></p><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/Shuffle%E4%BC%98%E5%8C%96%E5%89%8D.png" alt=""></p><p>问题：倘若100个MapTask，100个ReduceTask，会产生100*100=10000个文件，造成IO频繁，影响性能</p><p><strong>优化后：</strong></p><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/Shuffle%E4%BC%98%E5%8C%96%E5%90%8E.png" alt=""></p><p>Spark新版本中，引入了consolidation的机制，提出了ShuffleGroup概念</p><p>​    一个ShuffleMapTask执行完后，希尔本地文件不会变，但是下一个ShuffleMapTask运行的时候可以直接将数据写入之前的本地文件，相当于多个ShuffleMapTask输出进行了合并，大大减少了文件数量</p><p>​    前两个ShuffleMapTask称为一组ShuffleGroup，每个文件中都存储了多了ShuffleMapTask的数据，每个ShuffleMapTask的数据叫做segment，通过外部索引，来标记每个ShuffleMapTask的数据以及偏移量，对不同的ShuffleMapTask的数据进行区分</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spark调优&quot;&gt;&lt;a href=&quot;#Spark调优&quot; class=&quot;headerlink&quot; title=&quot;Spark调优&quot;&gt;&lt;/a&gt;Spark调优&lt;/h1&gt;&lt;h2 id=&quot;1、性能优化的参数&quot;&gt;&lt;a href=&quot;#1、性能优化的参数&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="Spark" scheme="rabbitluluu.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark进阶--Spark Streaming</title>
    <link href="rabbitluluu.github.io/2019/04/20/Spark%E8%BF%9B%E9%98%B6-Spark-Streaming/"/>
    <id>rabbitluluu.github.io/2019/04/20/Spark进阶-Spark-Streaming/</id>
    <published>2019-04-20T08:54:53.000Z</published>
    <updated>2019-04-20T09:00:14.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spark-Streaming"><a href="#Spark-Streaming" class="headerlink" title="Spark Streaming"></a>Spark Streaming</h1><p>背景：常用的实时计算引擎（流式计算）</p><ol><li>Apache Storm：真正的流式计算</li><li>Spark Streaming：严格来说，不是真正的流式计算，把连续的流式数据，当成不连续的RDD，本质还是一个离散计算</li><li>Apache Flink：真正的流式计算，与Spark Streaming相反，把离散的数据，当成流式数据来处理</li></ol><h2 id="1、Spark-Streaming概述"><a href="#1、Spark-Streaming概述" class="headerlink" title="1、Spark Streaming概述"></a>1、Spark Streaming概述</h2><h3 id="1-1、什么是Spark-Streaming"><a href="#1-1、什么是Spark-Streaming" class="headerlink" title="1.1、什么是Spark Streaming"></a>1.1、什么是Spark Streaming</h3><p>易于构建灵活的、高容错的流式系统</p><p>特点：</p><ol><li>易用，已经集成到Spark中</li><li>容错性：底层RDD，RDD中本身具有容错机制</li><li>支持多种语言：Java、Scala、Python</li></ol><h3 id="1-2、官方Demo"><a href="#1-2、官方Demo" class="headerlink" title="1.2、官方Demo"></a>1.2、官方Demo</h3><p>   往Spark Streaming中发送字符串，Spark 接收到以后，进行计数<br>   使用消息服务器 netcat Linux自带没有则安装<code>yum install netcat</code></p><p>   在一台服务器上开两个终端：</p><p>   终端一：</p><p>   <code>nc -l 1234</code></p><p>   终端二：</p><p>   <code>bin/run-example streaming.NetworkWordCount localhost 1234</code></p><p>   在终端一输入字符串，可以在终端二上观察到结果</p><h3 id="1-3、开发自己的NetWorkWordCount程序"><a href="#1-3、开发自己的NetWorkWordCount程序" class="headerlink" title="1.3、开发自己的NetWorkWordCount程序"></a>1.3、开发自己的NetWorkWordCount程序</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.spark.streaming.<span class="type">StreamingContext</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.streaming.<span class="type">Seconds</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.storage.<span class="type">StorageLevel</span></div><div class="line"><span class="keyword">import</span> org.apache.log4j._</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 开发自己的流式计算程序</div><div class="line">  *</div><div class="line">  * 1、创建一个StreamingContext对象---》核心：创建一个DStream</div><div class="line">  * 2、使用DStream吧连续的数据变成不连续的RDD</div><div class="line">  * 3、使用DStream连续的数据流编程不连续的RDD</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">myNetWordWordCount</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//因为sparkStreaming处于一直运行的状态，需要加上如下参数组织日志的输出</span></div><div class="line">    <span class="type">Logger</span>.getLogger(&amp;quot;org.apache.spark&amp;quot;).setLevel(<span class="type">Level</span>.<span class="type">ERROR</span>)</div><div class="line">    <span class="type">Logger</span>.getLogger(&amp;quot;org.eclipse.jetty.server&amp;quot;).setLevel(<span class="type">Level</span>.<span class="type">OFF</span>)</div><div class="line"></div><div class="line">    <span class="comment">//创建一个Streaming Context对象</span></div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(&amp;quot;<span class="type">MyNetworkWordCount</span>&amp;quot;).setMaster(&amp;quot;local[<span class="number">2</span>]&amp;quot;)</div><div class="line"></div><div class="line">    <span class="comment">//Seconds(3)代表间隔是3，每隔3秒采样一次</span></div><div class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">3</span>))</div><div class="line"></div><div class="line">    <span class="comment">//创建DStream从netcat服务器上接受数据</span></div><div class="line">    <span class="keyword">val</span> lines = ssc.socketTextStream(&amp;quot;node01&amp;quot;, <span class="number">1234</span>, <span class="type">StorageLevel</span>.<span class="type">MEMORY_ONLY</span>)</div><div class="line"></div><div class="line">    <span class="comment">//lines包含了netcat服务器发送来的数据</span></div><div class="line">    <span class="keyword">val</span> words = lines.flatMap(_.split(&amp;quot; &amp;quot;))</div><div class="line"></div><div class="line">    <span class="comment">//记数</span></div><div class="line">    <span class="keyword">val</span> wordCount = words.map((_, <span class="number">1</span>)).reduceByKey(_ + _)</div><div class="line">    <span class="comment">//val wordPair = words.transform(x =&gt; x.map(x =&gt; (x,1)))</span></div><div class="line"></div><div class="line">    <span class="comment">//打印结果</span></div><div class="line">    wordCount.print()</div><div class="line">    <span class="comment">//wordPair.print()</span></div><div class="line"></div><div class="line">    <span class="comment">//启动StreamingContext</span></div><div class="line">    ssc.start()</div><div class="line"></div><div class="line">    <span class="comment">//等待计算结束</span></div><div class="line">    ssc.awaitTermination()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意事项：</p><ol><li><p>倘若出现如下错误</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">19</span>/<span class="number">04</span>/<span class="number">13</span> <span class="number">13</span>:<span class="number">09</span>:<span class="number">23</span> <span class="type">ERROR</span> <span class="type">ReceiverTracker</span>: <span class="type">Deregistered</span> receiver <span class="keyword">for</span> stream <span class="number">0</span>: <span class="type">Restarting</span> receiver <span class="keyword">with</span> delay</div></pre></td></tr></table></figure><p>是因为发送消息的端口未打开，接收不到数据，打开即可</p></li><li><p>日志太多会影响结果的显示，需要添加如下参数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Logger</span>.getLogger(&amp;quot;org.apache.spark&amp;quot;).setLevel(<span class="type">Level</span>.<span class="type">ERROR</span>)</div><div class="line"><span class="type">Logger</span>.getLogger(&amp;quot;org.eclipse.jetty.server&amp;quot;).setLevel(<span class="type">Level</span>.<span class="type">OFF</span>)</div></pre></td></tr></table></figure></li><li><p>虚拟机的核心数必须要大于等于2，一个核心接收数据，另一个核心负责发送数据</p></li></ol><h2 id="2、高级特性"><a href="#2、高级特性" class="headerlink" title="2、高级特性"></a>2、高级特性</h2><h3 id="2-1、什么是DStream？"><a href="#2-1、什么是DStream？" class="headerlink" title="2.1、什么是DStream？"></a>2.1、什么是DStream？</h3><p>把连续的数据变成不连续的RDD</p><p>因为DStream的特性导致了Spark Streaming不是真正的流式计算</p><h3 id="2-2、高级算子"><a href="#2-2、高级算子" class="headerlink" title="2.2、高级算子"></a>2.2、高级算子</h3><h4 id="2-2-1、updateStateByKey"><a href="#2-2-1、updateStateByKey" class="headerlink" title="2.2.1、updateStateByKey"></a>2.2.1、updateStateByKey</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0412</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.log4j._</div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.storage.<span class="type">StorageLevel</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyTotalNetWorkWordCount</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.apache.spark"</span>).setLevel(<span class="type">Level</span>.<span class="type">ERROR</span>)</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.eclipse.jetty.server"</span>).setLevel(<span class="type">Level</span>.<span class="type">OFF</span>)</div><div class="line"></div><div class="line">    <span class="comment">//创建一个Streaming Context对象</span></div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"MyNetworkWordCount"</span>).setMaster(<span class="string">"local[2]"</span>)</div><div class="line"></div><div class="line">    <span class="comment">//Seconds(3)代表间隔是3，每隔3秒采样一次</span></div><div class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">3</span>))</div><div class="line"></div><div class="line">    <span class="comment">//设置检查点目录保存之前的状态信息,用来实现数据记录</span></div><div class="line">    ssc.checkpoint(<span class="string">"hdfs://node01:9000/tmp_files/chpt"</span>)</div><div class="line"></div><div class="line">    <span class="comment">//创建DStream</span></div><div class="line">    <span class="keyword">val</span> lines = ssc.socketTextStream(<span class="string">"node01"</span>, <span class="number">1234</span>, <span class="type">StorageLevel</span>.<span class="type">MEMORY_ONLY</span>)</div><div class="line"></div><div class="line">    <span class="keyword">val</span> words = lines.flatMap(_.split(<span class="string">" "</span>))</div><div class="line"></div><div class="line">    <span class="keyword">val</span> wordPair = words.map((_, <span class="number">1</span>))</div><div class="line"></div><div class="line">    <span class="comment">//定义一个值函数，进行累加计算</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">      * 接受两个参数</div><div class="line">      * 1、当前的值为多少</div><div class="line">      * 2、之前的值是多少</div><div class="line">      */</div><div class="line">    <span class="keyword">val</span> addfunc = (currentValues: <span class="type">Seq</span>[<span class="type">Int</span>], previousValues: <span class="type">Option</span>[<span class="type">Int</span>]) =&gt; &#123;</div><div class="line"></div><div class="line">      <span class="comment">//进行累加计算</span></div><div class="line">      <span class="comment">//1、把当前的序列进行累加</span></div><div class="line">      <span class="keyword">val</span> currentTotal = currentValues.sum</div><div class="line"></div><div class="line">      <span class="comment">//2、在之前的值上再累加</span></div><div class="line">      <span class="type">Some</span>(currentTotal + previousValues.getOrElse(<span class="number">0</span>))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//进行累加运算</span></div><div class="line">    <span class="keyword">val</span> total = wordPair.updateStateByKey(addfunc)</div><div class="line"></div><div class="line">    total.print()</div><div class="line"></div><div class="line">    ssc.start()</div><div class="line"></div><div class="line">    ssc.awaitTermination()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">-------------------------------------------</div><div class="line"><span class="type">Time</span>: <span class="number">1555134882000</span> ms</div><div class="line">-------------------------------------------</div><div class="line">(hello,<span class="number">2</span>)</div><div class="line">(just,<span class="number">1</span>)</div><div class="line">(world,<span class="number">1</span>)</div><div class="line">(it,<span class="number">1</span>)</div><div class="line">(hadoop,<span class="number">1</span>)</div><div class="line">(do,<span class="number">1</span>)</div><div class="line"></div><div class="line">-------------------------------------------</div><div class="line"><span class="type">Time</span>: <span class="number">1555134885000</span> ms</div><div class="line">-------------------------------------------</div><div class="line">(hello,<span class="number">2</span>)</div><div class="line">(just,<span class="number">1</span>)</div><div class="line">(world,<span class="number">1</span>)</div><div class="line">(it,<span class="number">1</span>)</div><div class="line">(hadoop,<span class="number">1</span>)</div><div class="line">(do,<span class="number">1</span>)</div></pre></td></tr></table></figure><h4 id="2-2-2、transform"><a href="#2-2-2、transform" class="headerlink" title="2.2.2、transform"></a>2.2.2、transform</h4><p>通过RDD-to-RDD函数作用于源DStream中的各个RDD，可以是任意的RDD操作，从而返回一个新的RDD</p><p>概述中的注释取消即可进行演示</p><h3 id="2-3、特性"><a href="#2-3、特性" class="headerlink" title="2.3、特性"></a>2.3、特性</h3><h4 id="2-3-1、窗口特性"><a href="#2-3-1、窗口特性" class="headerlink" title="2.3.1、窗口特性"></a>2.3.1、窗口特性</h4><p>窗口：对落在窗口内的数据进行处理，也是一个DStream</p><p>现实场景：某公司按天进行数值统计，以一天为窗口进行处理</p><p>举例：每10s把过去的30s数据采集出来</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0412</div><div class="line"><span class="keyword">import</span> org.apache.log4j._</div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.storage.<span class="type">StorageLevel</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">  *窗口操作</div><div class="line">  *需求：每隔10S统计过去的30S的数据</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyNetWorkWordCountByWindow</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.apache.spark"</span>).setLevel(<span class="type">Level</span>.<span class="type">ERROR</span>)</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.eclipse.jetty.server"</span>).setLevel(<span class="type">Level</span>.<span class="type">OFF</span>)</div><div class="line"></div><div class="line">    <span class="comment">//创建一个Streaming Context对象</span></div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"MyNetworkWordCount"</span>).setMaster(<span class="string">"local[2]"</span>)</div><div class="line"></div><div class="line">    <span class="comment">//Seconds(3)代表间隔是3，每隔3秒采样一次</span></div><div class="line">    <span class="comment">//val ssc = new StreamingContext(conf, Seconds(3))</span></div><div class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">1</span>))</div><div class="line"></div><div class="line">    <span class="comment">//创建DStream从netcat服务器上接受数据</span></div><div class="line">    <span class="keyword">val</span> lines = ssc.socketTextStream(<span class="string">"node01"</span>, <span class="number">1234</span>, <span class="type">StorageLevel</span>.<span class="type">MEMORY_ONLY</span>)</div><div class="line"></div><div class="line">    <span class="comment">//lines包含了netcat服务器发送来的数据</span></div><div class="line">    <span class="comment">//分词 给每个单词记一次数</span></div><div class="line">    <span class="keyword">val</span> words = lines.flatMap(_.split(<span class="string">" "</span>)).map((_,<span class="number">1</span>))</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">      * reduceByKeyAndWindow三个参数</div><div class="line">      * 1、需要进行的操作</div><div class="line">      * 2、窗口的大小30s</div><div class="line">      * 3、窗口滑动的距离</div><div class="line">      */</div><div class="line">    <span class="keyword">val</span> result = words.reduceByKeyAndWindow((x:<span class="type">Int</span>,y:<span class="type">Int</span>) =&gt; (x+y), <span class="type">Seconds</span>(<span class="number">30</span>), <span class="type">Seconds</span>(<span class="number">10</span>))</div><div class="line"></div><div class="line">    result.print()</div><div class="line"></div><div class="line">    ssc.start()</div><div class="line"></div><div class="line">    ssc.awaitTermination()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>常见问题：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">Exception</span> in thread <span class="string">"main"</span> java.lang.<span class="type">Exception</span>: <span class="type">The</span> slide duration of windowed <span class="type">DStream</span> (<span class="number">10000</span> ms) must be a multiple of the slide duration of parent <span class="type">DStream</span> (<span class="number">3000</span> ms)</div></pre></td></tr></table></figure><p>以上代码注释的部分中设置了采样时长为3s，窗口滑动的时间为10s</p><p>两种解决办法：</p><ol><li>将采样时长设置为1</li><li>将窗口滑动时长设置为采样时长的整数倍</li></ol><h4 id="2-3-2、集成Spark-SQL：使用SQL语句来处理流式数据"><a href="#2-3-2、集成Spark-SQL：使用SQL语句来处理流式数据" class="headerlink" title="2.3.2、集成Spark SQL：使用SQL语句来处理流式数据"></a>2.3.2、集成Spark SQL：使用SQL语句来处理流式数据</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0412</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.log4j._</div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.storage.<span class="type">StorageLevel</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 集成Spark SQL 在Spark Streaming中使用SQL语句</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyNetWorkWordCountWithSQL</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.apache.spark"</span>).setLevel(<span class="type">Level</span>.<span class="type">ERROR</span>)</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.eclipse.jetty.server"</span>).setLevel(<span class="type">Level</span>.<span class="type">OFF</span>)</div><div class="line"></div><div class="line">    <span class="comment">//创建一个Streaming Context对象</span></div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"MyNetworkWordCount"</span>).setMaster(<span class="string">"local[2]"</span>)</div><div class="line"></div><div class="line">    <span class="comment">//Seconds(3)代表间隔是3，每隔3秒采样一次</span></div><div class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">3</span>))</div><div class="line"></div><div class="line">    <span class="comment">//创建Dstreaming 从netcat上接受数据</span></div><div class="line">    <span class="keyword">val</span> lines = ssc.socketTextStream(<span class="string">"node01"</span>, <span class="number">1234</span>, <span class="type">StorageLevel</span>.<span class="type">MEMORY_ONLY</span>)</div><div class="line"></div><div class="line">    <span class="comment">//进行单词记数</span></div><div class="line">    <span class="keyword">val</span> words = lines.flatMap(_.split(<span class="string">" "</span>))</div><div class="line"></div><div class="line">    <span class="comment">//集成Spark SQL</span></div><div class="line">    words.foreachRDD( rdd =&gt; &#123;</div><div class="line">      <span class="comment">//创建Spark Session对象</span></div><div class="line">      <span class="comment">//通过ssc.sparkContext.getConf获取Session的conf</span></div><div class="line">      <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().config(ssc.sparkContext.getConf).getOrCreate()</div><div class="line"></div><div class="line">      <span class="comment">//将RDD转换为DataFrame 隐式转换</span></div><div class="line">      <span class="keyword">import</span> spark.implicits._</div><div class="line">      <span class="keyword">val</span> df1 = rdd.toDF(<span class="string">"word"</span>)</div><div class="line"></div><div class="line">      <span class="comment">//创建视图</span></div><div class="line">      df1.createOrReplaceTempView(<span class="string">"words"</span>)</div><div class="line"></div><div class="line">      <span class="comment">//执行SQL</span></div><div class="line">      spark.sql(<span class="string">"select *,count(*) as sum from words group by word"</span>).show()</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    ssc.start()</div><div class="line"></div><div class="line">    ssc.awaitTermination()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-3-3、缓存和持久化：和RDD一样"><a href="#2-3-3、缓存和持久化：和RDD一样" class="headerlink" title="2.3.3、缓存和持久化：和RDD一样"></a>2.3.3、缓存和持久化：和RDD一样</h4><h4 id="2-3-4、支持检查点：和RDD一样"><a href="#2-3-4、支持检查点：和RDD一样" class="headerlink" title="2.3.4、支持检查点：和RDD一样"></a>2.3.4、支持检查点：和RDD一样</h4><h2 id="3、数据源"><a href="#3、数据源" class="headerlink" title="3、数据源"></a>3、数据源</h2><p>Spark Streaming是一个流式计算引擎，就需要从外部数据源来接收数据</p><h3 id="3-1、基本的数据源"><a href="#3-1、基本的数据源" class="headerlink" title="3.1、基本的数据源"></a>3.1、基本的数据源</h3><p><strong>文件流</strong>：监控文件系统的变化，如果文件有增加，读取文件中的内容</p><p>需求：监控文件夹，如果有变化，那么将变化采集下来并进行输出</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0412</div><div class="line"><span class="keyword">import</span> org.apache.log4j._</div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.storage.<span class="type">StorageLevel</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * 测试文件流</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">FileStreaming</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.apache.spark"</span>).setLevel(<span class="type">Level</span>.<span class="type">ERROR</span>)</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.eclipse.jetty.server"</span>).setLevel(<span class="type">Level</span>.<span class="type">OFF</span>)</div><div class="line"></div><div class="line">    <span class="comment">//创建一个Streaming Context对象</span></div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"MyNetworkWordCount"</span>).setMaster(<span class="string">"local[2]"</span>)</div><div class="line"></div><div class="line">    <span class="comment">//Seconds(3)代表间隔是3，每隔3秒采样一次</span></div><div class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">3</span>))</div><div class="line"></div><div class="line">    <span class="comment">//直接监控某个目录，如果有新文件出现，直接打印出来</span></div><div class="line">    <span class="keyword">val</span> lines = ssc.textFileStream(<span class="string">"H:\\temp\\files_stream"</span>)</div><div class="line"></div><div class="line">    lines.print()</div><div class="line"></div><div class="line">    ssc.start()</div><div class="line"></div><div class="line">    ssc.awaitTermination()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>说明：</p><p><strong>RDD队列流</strong>：可以从队列中获取数据(基本不用)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0412</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.log4j._</div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.storage.<span class="type">StorageLevel</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">Queue</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * RDD队列流</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">RDDQueueStream</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.apache.spark"</span>).setLevel(<span class="type">Level</span>.<span class="type">ERROR</span>)</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.eclipse.jetty.server"</span>).setLevel(<span class="type">Level</span>.<span class="type">OFF</span>)</div><div class="line"></div><div class="line">    <span class="comment">//创建一个Streaming Context对象</span></div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"MyNetworkWordCount"</span>).setMaster(<span class="string">"local[2]"</span>)</div><div class="line"></div><div class="line">    <span class="comment">//Seconds(3)代表间隔是3，每隔3秒采样一次</span></div><div class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">1</span>))</div><div class="line"></div><div class="line">    <span class="comment">//需要创建一个队列RDD[Int]</span></div><div class="line">    <span class="keyword">val</span> rddQueue = <span class="keyword">new</span> <span class="type">Queue</span>[<span class="type">RDD</span>[<span class="type">Int</span>]]()</div><div class="line"></div><div class="line">    <span class="comment">//往队列里面添加数据 --&gt; 创建数据源</span></div><div class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to <span class="number">3</span>)&#123;</div><div class="line">      rddQueue += ssc.sparkContext.makeRDD(<span class="number">1</span> to <span class="number">10</span>)</div><div class="line"></div><div class="line">      <span class="type">Thread</span>.sleep(<span class="number">1000</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//从队列中接受数据 创建DStream</span></div><div class="line">    <span class="keyword">val</span> inputStream = ssc.queueStream(rddQueue)</div><div class="line"></div><div class="line">    <span class="comment">//处理数据</span></div><div class="line">    <span class="keyword">val</span> result = inputStream.map(x =&gt; (x,x*<span class="number">2</span>))</div><div class="line"></div><div class="line">    result.print()</div><div class="line"></div><div class="line">    ssc.start()</div><div class="line"></div><div class="line">    ssc.awaitTermination()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>套接字流</strong>：socketTextStream</p><h3 id="3-2、高级数据源"><a href="#3-2、高级数据源" class="headerlink" title="3.2、高级数据源"></a>3.2、高级数据源</h3><h4 id="3-2-1、Flume"><a href="#3-2-1、Flume" class="headerlink" title="3.2.1、Flume"></a>3.2.1、Flume</h4><p>Spark SQL 对接flume有多种方式</p><p><strong>push方式</strong>：flume将数据推送给Spark Streaming</p><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BUG(后续)</div></pre></td></tr></table></figure><p>flume配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BUG(后续)</div></pre></td></tr></table></figure><p><strong>custom sink模式</strong>：相对于push有更好的健壮性和容错性，推荐使用这种方式</p><p>代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0413</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.log4j.&#123;<span class="type">Level</span>, <span class="type">Logger</span>&#125;</div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.storage.<span class="type">StorageLevel</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.streaming.flume.<span class="type">FlumeUtils</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 测试pull方式  使用spark sink</div><div class="line">  *</div><div class="line">  */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">FlumeLogPull</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.apache.spark"</span>).setLevel(<span class="type">Level</span>.<span class="type">ERROR</span>)</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.eclipse.jetty.server"</span>).setLevel(<span class="type">Level</span>.<span class="type">OFF</span>)</div><div class="line"></div><div class="line">    <span class="comment">//创建一个Streaming Context对象</span></div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"MyNetworkWordCount"</span>).setMaster(<span class="string">"local[2]"</span>)</div><div class="line"></div><div class="line">    <span class="comment">//Seconds(3)代表间隔是3，每隔3秒采样一次</span></div><div class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">3</span>))</div><div class="line"></div><div class="line">    <span class="comment">//创建Flumevent的DStream，采用pull的方式,相当于主动去取</span></div><div class="line">    <span class="keyword">val</span> flumeEvent = <span class="type">FlumeUtils</span>.createPollingStream(ssc, <span class="string">"node01"</span>,<span class="number">1234</span>, <span class="type">StorageLevel</span>.<span class="type">MEMORY_ONLY</span>)</div><div class="line"></div><div class="line">    <span class="comment">//将flumeEvent的事件转换成字符串</span></div><div class="line">    <span class="keyword">val</span> lineDStream = flumeEvent.map(e =&gt; &#123;</div><div class="line"></div><div class="line">      <span class="keyword">new</span> <span class="type">String</span>(e.event.getBody.array())</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">//输出结果</span></div><div class="line">    lineDStream.print()</div><div class="line"></div><div class="line">    ssc.start()</div><div class="line"></div><div class="line">    ssc.awaitTermination()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>flume配置：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#bin/flume-ng agent -n a1 -f myagent/option5 -c conf -<span class="type">Dflume</span>.root.logger=<span class="type">INFO</span>,console</div><div class="line">a1.channels = c1</div><div class="line">a1.sinks = k1</div><div class="line">a1.sources = r1</div><div class="line"></div><div class="line">a1.sources.r1.<span class="keyword">type</span> = spooldir</div><div class="line">a1.sources.r1.spoolDir = /root/tmp_files/logs</div><div class="line"></div><div class="line">a1.channels.c1.<span class="keyword">type</span> = memory</div><div class="line">a1.channels.c1.capacity = <span class="number">100000</span></div><div class="line">a1.channels.c1.transactionCapacity = <span class="number">100000</span></div><div class="line"></div><div class="line">a1.sinks.k1.<span class="keyword">type</span> = org.apache.spark.streaming.flume.sink.<span class="type">SparkSink</span></div><div class="line">a1.sinks.k1.channel = c1</div><div class="line">a1.sinks.k1.hostname = node01</div><div class="line">a1.sinks.k1.port = <span class="number">1234</span></div><div class="line"></div><div class="line">#组装source、channel、sink</div><div class="line">a1.sources.r1.channels = c1</div><div class="line">a1.sinks.k1.channel = c1</div></pre></td></tr></table></figure><h4 id="3-2-2、kafka-后续补充"><a href="#3-2-2、kafka-后续补充" class="headerlink" title="3.2.2、kafka(后续补充)"></a>3.2.2、kafka(后续补充)</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spark-Streaming&quot;&gt;&lt;a href=&quot;#Spark-Streaming&quot; class=&quot;headerlink&quot; title=&quot;Spark Streaming&quot;&gt;&lt;/a&gt;Spark Streaming&lt;/h1&gt;&lt;p&gt;背景：常用的实时计算引擎（流式计算）
      
    
    </summary>
    
    
      <category term="Spark" scheme="rabbitluluu.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark进阶--SparkSQL</title>
    <link href="rabbitluluu.github.io/2019/04/08/Spark%E8%BF%9B%E9%98%B6-SparkSQL/"/>
    <id>rabbitluluu.github.io/2019/04/08/Spark进阶-SparkSQL/</id>
    <published>2019-04-08T06:13:28.000Z</published>
    <updated>2019-04-15T01:24:21.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、Spark-SQL基础"><a href="#1、Spark-SQL基础" class="headerlink" title="1、Spark SQL基础"></a>1、Spark SQL基础</h1><h2 id="1、Spark-SQL基础-1"><a href="#1、Spark-SQL基础-1" class="headerlink" title="1、Spark SQL基础"></a>1、Spark SQL基础</h2><p>Spark SQL是Spark的一个模块，来处理<strong>结构化</strong>的数据，不能处理非结构化数据</p><p>特点：</p><ol><li><p>容易集成</p><p>不需要单独安装，伴随Spark安装就已经安装好</p></li><li><p>统一的数据访问方式</p><p>结构化数据的类型：JDBC、JSON、HIVE、parquer文件都可以作为Spark SQL的数据源</p></li><li><p>完全兼容hive</p><p>把Hive的数据，读取到Spark SQL中运行</p></li><li><p>支持标准的数据连接</p><p>JDBC</p></li></ol><h2 id="2、概念表（DataFrame-DataSet）"><a href="#2、概念表（DataFrame-DataSet）" class="headerlink" title="2、概念表（DataFrame DataSet）"></a>2、概念表（<code>DataFrame</code> <code>DataSet</code>）</h2><p>Mysql中的表：表结构、数据</p><p>DataFrame：Schema、RDD（数据）</p><p>DataSet：在Spark1.6之后，对DataFrame做了一个封装</p><h2 id="3、创建DataFrame"><a href="#3、创建DataFrame" class="headerlink" title="3、创建DataFrame"></a>3、创建DataFrame</h2><h3 id="3-1、方法一：使用Spark-Shell"><a href="#3-1、方法一：使用Spark-Shell" class="headerlink" title="3.1、方法一：使用Spark Shell"></a>3.1、方法一：使用Spark Shell</h3><ol><li><p>定义Schema：使用<code>case class</code>样本类来定义Schema</p><p>case class特点：可以支持模式匹配，使用case class建立表结构</p><p><strong>注意：对应数据来编写代码，以免串行</strong></p><p><code>7521,       WARD,      SALESMAN,7698,     1981/2/22,     1250,     500,      30</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span>(<span class="params">empno:<span class="type">Int</span>,ename:<span class="type">String</span>,job:<span class="type">String</span>,mgr:<span class="type">Int</span>,hiredate:<span class="type">String</span>,sal:<span class="type">Int</span>,comm:<span class="type">Int</span>,deptno:<span class="type">Int</span></span>)</span></div></pre></td></tr></table></figure></li><li><p>读取文件</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> lines = sc.textFile(<span class="string">"hdfs://node01:9000/tmp_files/emp.csv"</span>).map(_.split(<span class="string">","</span>))</div></pre></td></tr></table></figure></li><li><p>把每行数据，映射到Emp上</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> allEmp = lines.map(x =&gt; <span class="type">Emp</span>(x(<span class="number">0</span>).toInt,x(<span class="number">1</span>),x(<span class="number">2</span>),x(<span class="number">3</span>).toInt,x(<span class="number">4</span>),x(<span class="number">5</span>).toInt,x(<span class="number">6</span>).toInt,x(<span class="number">7</span>).toInt))</div><div class="line">allEmp: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Emp</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">3</span>] at map at &lt;console&gt;:<span class="number">28</span></div></pre></td></tr></table></figure></li><li><p>生成DataFrame</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> df1 = allEmp.toDF</div><div class="line">df1: org.apache.spark.sql.<span class="type">DataFrame</span> = [empno: int, ename: string ... <span class="number">6</span> more fields]</div><div class="line"></div><div class="line">scala&gt; df1.show</div><div class="line">+-----+------+---------+----+----------+----+----+------+</div><div class="line">|empno| ename|      job| mgr|  hiredate| sal|comm|deptno|</div><div class="line">+-----+------+---------+----+----------+----+----+------+</div><div class="line">| <span class="number">7369</span>| <span class="type">SMITH</span>|    <span class="type">CLERK</span>|<span class="number">7902</span>|<span class="number">1980</span>/<span class="number">12</span>/<span class="number">17</span>| <span class="number">800</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7499</span>| <span class="type">ALLEN</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">20</span>|<span class="number">1600</span>| <span class="number">300</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7521</span>|  <span class="type">WARD</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">22</span>|<span class="number">1250</span>| <span class="number">500</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7566</span>| <span class="type">JONES</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">4</span>/<span class="number">2</span>|<span class="number">2975</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7654</span>|<span class="type">MARTIN</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">9</span>/<span class="number">28</span>|<span class="number">1250</span>|<span class="number">1400</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7698</span>| <span class="type">BLAKE</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">5</span>/<span class="number">1</span>|<span class="number">2850</span>|   <span class="number">0</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7782</span>| <span class="type">CLARK</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">6</span>/<span class="number">9</span>|<span class="number">2450</span>|   <span class="number">0</span>|    <span class="number">10</span>|</div><div class="line">| <span class="number">7788</span>| <span class="type">SCOTT</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>| <span class="number">1987</span>/<span class="number">4</span>/<span class="number">19</span>|<span class="number">3000</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7839</span>|  <span class="type">KING</span>|<span class="type">PRESIDENT</span>|<span class="number">7839</span>|<span class="number">1981</span>/<span class="number">11</span>/<span class="number">17</span>|<span class="number">5000</span>|   <span class="number">0</span>|    <span class="number">10</span>|</div><div class="line">| <span class="number">7844</span>|<span class="type">TURNER</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|  <span class="number">1981</span>/<span class="number">9</span>/<span class="number">8</span>|<span class="number">1500</span>|   <span class="number">0</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7876</span>| <span class="type">ADAMS</span>|    <span class="type">CLERK</span>|<span class="number">7788</span>| <span class="number">1987</span>/<span class="number">5</span>/<span class="number">23</span>|<span class="number">1100</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7900</span>| <span class="type">JAMES</span>|    <span class="type">CLERK</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>| <span class="number">950</span>|   <span class="number">0</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7902</span>|  <span class="type">FORD</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|<span class="number">3000</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7934</span>|<span class="type">MILLER</span>|    <span class="type">CLERK</span>|<span class="number">7782</span>| <span class="number">1982</span>/<span class="number">1</span>/<span class="number">23</span>|<span class="number">1300</span>|   <span class="number">0</span>|    <span class="number">10</span>|</div><div class="line">+-----+------+---------+----+----------+----+----+------+</div></pre></td></tr></table></figure></li></ol><h3 id="3-2、方法二：使用Spark-Session"><a href="#3-2、方法二：使用Spark-Session" class="headerlink" title="3.2、方法二：使用Spark Session"></a>3.2、方法二：使用Spark Session</h3><p>概念：Spark session available as ‘spark’.<br>        2.0以后引入的统一访问方式。可以访问所有的Spark组件。</p><p>​        <code>def createDataFrame(rowRDD: RDD[Row], schema: StructType): DataFrame</code></p><p>用法：        </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//官方案例</span></div><div class="line"><span class="keyword">val</span> schema =</div><div class="line">  <span class="type">StructType</span>(</div><div class="line">    <span class="type">StructField</span>(<span class="string">"name"</span>, <span class="type">StringType</span>, <span class="literal">false</span>) ::</div><div class="line">    <span class="type">StructField</span>(<span class="string">"age"</span>, <span class="type">IntegerType</span>, <span class="literal">true</span>) :: <span class="type">Nil</span>)</div></pre></td></tr></table></figure><ol><li>定义Schema</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//empno:Int,ename:String,job:String,mgr:Int,hiredate:String,sal:Int,comm:Int,deptno:Int</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.sql.types._</div><div class="line"></div><div class="line"><span class="comment">//val mySchema = StructType(</span></div><div class="line"><span class="comment">//List(</span></div><div class="line"><span class="comment">//StructField("empno",DataTypes.IntegerType),</span></div><div class="line"><span class="comment">//StructField("ename",DataTypes.StringType),</span></div><div class="line"><span class="comment">//StructField("job",DataTypes.StringType),</span></div><div class="line"><span class="comment">//StructField("mgr",DataTypes.IntegerType),</span></div><div class="line"><span class="comment">//StructField("hiredate",DataTypes.StringType),</span></div><div class="line"><span class="comment">//StructField("sal",DataTypes.IntegerType),</span></div><div class="line"><span class="comment">//StructField("comm",DataTypes.IntegerType),</span></div><div class="line"><span class="comment">//StructField("deptno",DataTypes.IntegerType)</span></div><div class="line"><span class="comment">//))</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> mySchema = <span class="type">StructType</span>(<span class="type">List</span>(<span class="type">StructField</span>(<span class="string">"empno"</span>,<span class="type">DataTypes</span>.<span class="type">IntegerType</span>),<span class="type">StructField</span>(<span class="string">"ename"</span>,<span class="type">DataTypes</span>.<span class="type">StringType</span>),<span class="type">StructField</span>(<span class="string">"job"</span>,<span class="type">DataTypes</span>.<span class="type">StringType</span>),<span class="type">StructField</span>(<span class="string">"mgr"</span>,<span class="type">DataTypes</span>.<span class="type">IntegerType</span>),<span class="type">StructField</span>(<span class="string">"hiredate"</span>,<span class="type">DataTypes</span>.<span class="type">StringType</span>),<span class="type">StructField</span>(<span class="string">"sal"</span>,<span class="type">DataTypes</span>.<span class="type">IntegerType</span>),<span class="type">StructField</span>(<span class="string">"comm"</span>,<span class="type">DataTypes</span>.<span class="type">IntegerType</span>),<span class="type">StructField</span>(<span class="string">"deptno"</span>,<span class="type">DataTypes</span>.<span class="type">IntegerType</span>)))</div></pre></td></tr></table></figure><ol><li>读取数据</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> lines = sc.textFile(<span class="string">"/usr/local/tmp_files/emp.csv"</span>).map(_.split(<span class="string">","</span>))</div></pre></td></tr></table></figure><ol><li>数据映射到Row上</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">Row</span></div><div class="line">   </div><div class="line"><span class="keyword">val</span> allEmp = lines.map(x =&gt; <span class="type">Row</span>(x(<span class="number">0</span>).toInt,x(<span class="number">1</span>),x(<span class="number">2</span>),x(<span class="number">3</span>).toInt,x(<span class="number">4</span>),x(<span class="number">5</span>).toInt,x(<span class="number">6</span>).toInt,x(<span class="number">7</span>).toInt))</div></pre></td></tr></table></figure><ol><li>创建</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> df2 = spark.createDataFrame(allEmp,mySchema)</div><div class="line"></div><div class="line">df2.show</div></pre></td></tr></table></figure><h3 id="3-3、方法三：直接读取一个带格式的文件"><a href="#3-3、方法三：直接读取一个带格式的文件" class="headerlink" title="3.3、方法三：直接读取一个带格式的文件"></a>3.3、方法三：直接读取一个带格式的文件</h3><p>直接读取一个带格式(json，parquet)的文件。</p><p><strong>read.json方法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> df3 = spark.read.json(<span class="string">"hdfs://node01:9000/tmp_files/emp.json"</span>)</div><div class="line">df3: org.apache.spark.sql.<span class="type">DataFrame</span> = [comm: string, deptno: bigint ... <span class="number">6</span> more fields]</div><div class="line"></div><div class="line">scala&gt; df3.show</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div><div class="line">|comm|deptno|empno| ename|  hiredate|      job| mgr| sal|</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7369</span>| <span class="type">SMITH</span>|<span class="number">1980</span>/<span class="number">12</span>/<span class="number">17</span>|    <span class="type">CLERK</span>|<span class="number">7902</span>| <span class="number">800</span>|</div><div class="line">| <span class="number">300</span>|    <span class="number">30</span>| <span class="number">7499</span>| <span class="type">ALLEN</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">20</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1600</span>|</div><div class="line">| <span class="number">500</span>|    <span class="number">30</span>| <span class="number">7521</span>|  <span class="type">WARD</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">22</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1250</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7566</span>| <span class="type">JONES</span>|  <span class="number">1981</span>/<span class="number">4</span>/<span class="number">2</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2975</span>|</div><div class="line">|<span class="number">1400</span>|    <span class="number">30</span>| <span class="number">7654</span>|<span class="type">MARTIN</span>| <span class="number">1981</span>/<span class="number">9</span>/<span class="number">28</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1250</span>|</div><div class="line">|    |    <span class="number">30</span>| <span class="number">7698</span>| <span class="type">BLAKE</span>|  <span class="number">1981</span>/<span class="number">5</span>/<span class="number">1</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2850</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7782</span>| <span class="type">CLARK</span>|  <span class="number">1981</span>/<span class="number">6</span>/<span class="number">9</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2450</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7788</span>| <span class="type">SCOTT</span>| <span class="number">1987</span>/<span class="number">4</span>/<span class="number">19</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>|<span class="number">3000</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7839</span>|  <span class="type">KING</span>|<span class="number">1981</span>/<span class="number">11</span>/<span class="number">17</span>|<span class="type">PRESIDENT</span>|    |<span class="number">5000</span>|</div><div class="line">|   <span class="number">0</span>|    <span class="number">30</span>| <span class="number">7844</span>|<span class="type">TURNER</span>|  <span class="number">1981</span>/<span class="number">9</span>/<span class="number">8</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1500</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7876</span>| <span class="type">ADAMS</span>| <span class="number">1987</span>/<span class="number">5</span>/<span class="number">23</span>|    <span class="type">CLERK</span>|<span class="number">7788</span>|<span class="number">1100</span>|</div><div class="line">|    |    <span class="number">30</span>| <span class="number">7900</span>| <span class="type">JAMES</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|    <span class="type">CLERK</span>|<span class="number">7698</span>| <span class="number">950</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7902</span>|  <span class="type">FORD</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>|<span class="number">3000</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7934</span>|<span class="type">MILLER</span>| <span class="number">1982</span>/<span class="number">1</span>/<span class="number">23</span>|    <span class="type">CLERK</span>|<span class="number">7782</span>|<span class="number">1300</span>|</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div></pre></td></tr></table></figure><p><strong>read.format方法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> df4 = spark.read.format(<span class="string">"json"</span>).load(<span class="string">"hdfs://node01:9000/tmp_files/emp.json"</span>)</div><div class="line">df4: org.apache.spark.sql.<span class="type">DataFrame</span> = [comm: string, deptno: bigint ... <span class="number">6</span> more fields]</div><div class="line"></div><div class="line">scala&gt; df4.show</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div><div class="line">|comm|deptno|empno| ename|  hiredate|      job| mgr| sal|</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7369</span>| <span class="type">SMITH</span>|<span class="number">1980</span>/<span class="number">12</span>/<span class="number">17</span>|    <span class="type">CLERK</span>|<span class="number">7902</span>| <span class="number">800</span>|</div><div class="line">| <span class="number">300</span>|    <span class="number">30</span>| <span class="number">7499</span>| <span class="type">ALLEN</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">20</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1600</span>|</div><div class="line">| <span class="number">500</span>|    <span class="number">30</span>| <span class="number">7521</span>|  <span class="type">WARD</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">22</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1250</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7566</span>| <span class="type">JONES</span>|  <span class="number">1981</span>/<span class="number">4</span>/<span class="number">2</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2975</span>|</div><div class="line">|<span class="number">1400</span>|    <span class="number">30</span>| <span class="number">7654</span>|<span class="type">MARTIN</span>| <span class="number">1981</span>/<span class="number">9</span>/<span class="number">28</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1250</span>|</div><div class="line">|    |    <span class="number">30</span>| <span class="number">7698</span>| <span class="type">BLAKE</span>|  <span class="number">1981</span>/<span class="number">5</span>/<span class="number">1</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2850</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7782</span>| <span class="type">CLARK</span>|  <span class="number">1981</span>/<span class="number">6</span>/<span class="number">9</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2450</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7788</span>| <span class="type">SCOTT</span>| <span class="number">1987</span>/<span class="number">4</span>/<span class="number">19</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>|<span class="number">3000</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7839</span>|  <span class="type">KING</span>|<span class="number">1981</span>/<span class="number">11</span>/<span class="number">17</span>|<span class="type">PRESIDENT</span>|    |<span class="number">5000</span>|</div><div class="line">|   <span class="number">0</span>|    <span class="number">30</span>| <span class="number">7844</span>|<span class="type">TURNER</span>|  <span class="number">1981</span>/<span class="number">9</span>/<span class="number">8</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1500</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7876</span>| <span class="type">ADAMS</span>| <span class="number">1987</span>/<span class="number">5</span>/<span class="number">23</span>|    <span class="type">CLERK</span>|<span class="number">7788</span>|<span class="number">1100</span>|</div><div class="line">|    |    <span class="number">30</span>| <span class="number">7900</span>| <span class="type">JAMES</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|    <span class="type">CLERK</span>|<span class="number">7698</span>| <span class="number">950</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7902</span>|  <span class="type">FORD</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>|<span class="number">3000</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7934</span>|<span class="type">MILLER</span>| <span class="number">1982</span>/<span class="number">1</span>/<span class="number">23</span>|    <span class="type">CLERK</span>|<span class="number">7782</span>|<span class="number">1300</span>|</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div></pre></td></tr></table></figure><h2 id="4、操作DataFrame"><a href="#4、操作DataFrame" class="headerlink" title="4、操作DataFrame"></a>4、操作DataFrame</h2><h3 id="4-1、DSL语句"><a href="#4-1、DSL语句" class="headerlink" title="4.1、DSL语句"></a>4.1、DSL语句</h3><ol><li><p>查询员工的名字，薪水</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">scala&gt; df1.select(<span class="string">"ename"</span>,<span class="string">"sal"</span>).show</div><div class="line">+------+----+</div><div class="line">| ename| sal|</div><div class="line">+------+----+</div><div class="line">| <span class="type">SMITH</span>| <span class="number">800</span>|</div><div class="line">| <span class="type">ALLEN</span>|<span class="number">1600</span>|</div><div class="line">|  <span class="type">WARD</span>|<span class="number">1250</span>|</div><div class="line">| <span class="type">JONES</span>|<span class="number">2975</span>|</div><div class="line">|<span class="type">MARTIN</span>|<span class="number">1250</span>|</div><div class="line">| <span class="type">BLAKE</span>|<span class="number">2850</span>|</div><div class="line">| <span class="type">CLARK</span>|<span class="number">2450</span>|</div><div class="line">| <span class="type">SCOTT</span>|<span class="number">3000</span>|</div><div class="line">|  <span class="type">KING</span>|<span class="number">5000</span>|</div><div class="line">|<span class="type">TURNER</span>|<span class="number">1500</span>|</div><div class="line">| <span class="type">ADAMS</span>|<span class="number">1100</span>|</div><div class="line">| <span class="type">JAMES</span>| <span class="number">950</span>|</div><div class="line">|  <span class="type">FORD</span>|<span class="number">3000</span>|</div><div class="line">|<span class="type">MILLER</span>|<span class="number">1300</span>|</div><div class="line">+------+----+</div></pre></td></tr></table></figure></li></ol><ol><li><p>查询名字，原始工资和每人涨工资500后的信息</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">scala&gt; df1.select($<span class="string">"ename"</span>,$<span class="string">"sal"</span>,$<span class="string">"sal"</span>+<span class="number">500</span>).show</div><div class="line">+------+----+-----------+</div><div class="line">| ename| sal|(sal + <span class="number">500</span>)|</div><div class="line">+------+----+-----------+</div><div class="line">| <span class="type">SMITH</span>| <span class="number">800</span>|       <span class="number">1300</span>|</div><div class="line">| <span class="type">ALLEN</span>|<span class="number">1600</span>|       <span class="number">2100</span>|</div><div class="line">|  <span class="type">WARD</span>|<span class="number">1250</span>|       <span class="number">1750</span>|</div><div class="line">| <span class="type">JONES</span>|<span class="number">2975</span>|       <span class="number">3475</span>|</div><div class="line">|<span class="type">MARTIN</span>|<span class="number">1250</span>|       <span class="number">1750</span>|</div><div class="line">| <span class="type">BLAKE</span>|<span class="number">2850</span>|       <span class="number">3350</span>|</div><div class="line">| <span class="type">CLARK</span>|<span class="number">2450</span>|       <span class="number">2950</span>|</div><div class="line">| <span class="type">SCOTT</span>|<span class="number">3000</span>|       <span class="number">3500</span>|</div><div class="line">|  <span class="type">KING</span>|<span class="number">5000</span>|       <span class="number">5500</span>|</div><div class="line">|<span class="type">TURNER</span>|<span class="number">1500</span>|       <span class="number">2000</span>|</div><div class="line">| <span class="type">ADAMS</span>|<span class="number">1100</span>|       <span class="number">1600</span>|</div><div class="line">| <span class="type">JAMES</span>| <span class="number">950</span>|       <span class="number">1450</span>|</div><div class="line">|  <span class="type">FORD</span>|<span class="number">3000</span>|       <span class="number">3500</span>|</div><div class="line">|<span class="type">MILLER</span>|<span class="number">1300</span>|       <span class="number">1800</span>|</div><div class="line">+------+----+-----------+</div></pre></td></tr></table></figure><p><strong>注意：假如存在需要修改值的字段，每个字段前都需要加<code>$</code></strong></p></li><li><p>查询薪水大于2000的员工信息</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; df1.filter($<span class="string">"sal"</span> &gt; <span class="number">2000</span>).show</div><div class="line">+-----+-----+---------+----+----------+----+----+------+</div><div class="line">|empno|ename|      job| mgr|  hiredate| sal|comm|deptno|</div><div class="line">+-----+-----+---------+----+----------+----+----+------+</div><div class="line">| <span class="number">7566</span>|<span class="type">JONES</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">4</span>/<span class="number">2</span>|<span class="number">2975</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7698</span>|<span class="type">BLAKE</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">5</span>/<span class="number">1</span>|<span class="number">2850</span>|   <span class="number">0</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7782</span>|<span class="type">CLARK</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">6</span>/<span class="number">9</span>|<span class="number">2450</span>|   <span class="number">0</span>|    <span class="number">10</span>|</div><div class="line">| <span class="number">7788</span>|<span class="type">SCOTT</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>| <span class="number">1987</span>/<span class="number">4</span>/<span class="number">19</span>|<span class="number">3000</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7839</span>| <span class="type">KING</span>|<span class="type">PRESIDENT</span>|<span class="number">7839</span>|<span class="number">1981</span>/<span class="number">11</span>/<span class="number">17</span>|<span class="number">5000</span>|   <span class="number">0</span>|    <span class="number">10</span>|</div><div class="line">| <span class="number">7902</span>| <span class="type">FORD</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|<span class="number">3000</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">+-----+-----+---------+----+----------+----+----+------+</div></pre></td></tr></table></figure></li></ol><ol><li><p>求每个部门的员工人数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; df1.groupBy($<span class="string">"deptno"</span>).count.show</div><div class="line">+------+-----+                                                                  </div><div class="line">|deptno|count|</div><div class="line">+------+-----+</div><div class="line">|    <span class="number">20</span>|    <span class="number">5</span>|</div><div class="line">|    <span class="number">10</span>|    <span class="number">3</span>|</div><div class="line">|    <span class="number">30</span>|    <span class="number">6</span>|</div><div class="line">+------+-----+</div></pre></td></tr></table></figure><p>等价于sql中的<code>select deptno,count(1) from emp group by deptno</code></p></li></ol><h3 id="4-2、SQL语句"><a href="#4-2、SQL语句" class="headerlink" title="4.2、SQL语句"></a>4.2、SQL语句</h3><font color="red"><strong>注意：不能直接执行，需要先生成视图，再执行sql！</strong></font><p>创建视图：<code>scala&gt; df1.createOrReplaceTempView(&quot;emp&quot;)</code></p><ol><li><p>查询所有员工信息</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">scala&gt; spark.sql(<span class="string">"select * from emp"</span>).show</div><div class="line">+-----+------+---------+----+----------+----+----+------+</div><div class="line">|empno| ename|      job| mgr|  hiredate| sal|comm|deptno|</div><div class="line">+-----+------+---------+----+----------+----+----+------+</div><div class="line">| <span class="number">7369</span>| <span class="type">SMITH</span>|    <span class="type">CLERK</span>|<span class="number">7902</span>|<span class="number">1980</span>/<span class="number">12</span>/<span class="number">17</span>| <span class="number">800</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7499</span>| <span class="type">ALLEN</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">20</span>|<span class="number">1600</span>| <span class="number">300</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7521</span>|  <span class="type">WARD</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">22</span>|<span class="number">1250</span>| <span class="number">500</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7566</span>| <span class="type">JONES</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">4</span>/<span class="number">2</span>|<span class="number">2975</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7654</span>|<span class="type">MARTIN</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">9</span>/<span class="number">28</span>|<span class="number">1250</span>|<span class="number">1400</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7698</span>| <span class="type">BLAKE</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">5</span>/<span class="number">1</span>|<span class="number">2850</span>|   <span class="number">0</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7782</span>| <span class="type">CLARK</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">6</span>/<span class="number">9</span>|<span class="number">2450</span>|   <span class="number">0</span>|    <span class="number">10</span>|</div><div class="line">| <span class="number">7788</span>| <span class="type">SCOTT</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>| <span class="number">1987</span>/<span class="number">4</span>/<span class="number">19</span>|<span class="number">3000</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7839</span>|  <span class="type">KING</span>|<span class="type">PRESIDENT</span>|<span class="number">7839</span>|<span class="number">1981</span>/<span class="number">11</span>/<span class="number">17</span>|<span class="number">5000</span>|   <span class="number">0</span>|    <span class="number">10</span>|</div><div class="line">| <span class="number">7844</span>|<span class="type">TURNER</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|  <span class="number">1981</span>/<span class="number">9</span>/<span class="number">8</span>|<span class="number">1500</span>|   <span class="number">0</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7876</span>| <span class="type">ADAMS</span>|    <span class="type">CLERK</span>|<span class="number">7788</span>| <span class="number">1987</span>/<span class="number">5</span>/<span class="number">23</span>|<span class="number">1100</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7900</span>| <span class="type">JAMES</span>|    <span class="type">CLERK</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>| <span class="number">950</span>|   <span class="number">0</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7902</span>|  <span class="type">FORD</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|<span class="number">3000</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7934</span>|<span class="type">MILLER</span>|    <span class="type">CLERK</span>|<span class="number">7782</span>| <span class="number">1982</span>/<span class="number">1</span>/<span class="number">23</span>|<span class="number">1300</span>|   <span class="number">0</span>|    <span class="number">10</span>|</div><div class="line">+-----+------+---------+----+----------+----+----+------+</div></pre></td></tr></table></figure></li><li><p>查询薪水大于2000的员工信息</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; spark.sql(<span class="string">"select * from emp where sal &gt; 2000"</span>).show</div><div class="line">+-----+-----+---------+----+----------+----+----+------+</div><div class="line">|empno|ename|      job| mgr|  hiredate| sal|comm|deptno|</div><div class="line">+-----+-----+---------+----+----------+----+----+------+</div><div class="line">| <span class="number">7566</span>|<span class="type">JONES</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">4</span>/<span class="number">2</span>|<span class="number">2975</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7698</span>|<span class="type">BLAKE</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">5</span>/<span class="number">1</span>|<span class="number">2850</span>|   <span class="number">0</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7782</span>|<span class="type">CLARK</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">6</span>/<span class="number">9</span>|<span class="number">2450</span>|   <span class="number">0</span>|    <span class="number">10</span>|</div><div class="line">| <span class="number">7788</span>|<span class="type">SCOTT</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>| <span class="number">1987</span>/<span class="number">4</span>/<span class="number">19</span>|<span class="number">3000</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7839</span>| <span class="type">KING</span>|<span class="type">PRESIDENT</span>|<span class="number">7839</span>|<span class="number">1981</span>/<span class="number">11</span>/<span class="number">17</span>|<span class="number">5000</span>|   <span class="number">0</span>|    <span class="number">10</span>|</div><div class="line">| <span class="number">7902</span>| <span class="type">FORD</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|<span class="number">3000</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">+-----+-----+---------+----+----------+----+----+------+</div></pre></td></tr></table></figure></li><li><p>求每个部门的员工人数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; spark.sql(<span class="string">"select deptno, count(1) sum from emp group by deptno"</span>).show</div><div class="line">+------+---+                                                                    </div><div class="line">|deptno|sum|</div><div class="line">+------+---+</div><div class="line">|    <span class="number">20</span>|  <span class="number">5</span>|</div><div class="line">|    <span class="number">10</span>|  <span class="number">3</span>|</div><div class="line">|    <span class="number">30</span>|  <span class="number">6</span>|</div><div class="line">+------+---+</div></pre></td></tr></table></figure></li><li><p>求所有的部门号(相当于去重操作)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; spark.sql(<span class="string">"select deptno from emp group by deptno"</span>).show</div><div class="line">+------+                                                                        </div><div class="line">|deptno|</div><div class="line">+------+</div><div class="line">|    <span class="number">20</span>|</div><div class="line">|    <span class="number">10</span>|</div><div class="line">|    <span class="number">30</span>|</div><div class="line">+------+</div></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; spark.sql(<span class="string">"select distinct deptno from emp"</span>).show</div><div class="line">+------+                                                                        </div><div class="line">|deptno|</div><div class="line">+------+</div><div class="line">|    <span class="number">20</span>|</div><div class="line">|    <span class="number">10</span>|</div><div class="line">|    <span class="number">30</span>|</div><div class="line">+------+</div></pre></td></tr></table></figure></li></ol><h3 id="4-3、多表查询"><a href="#4-3、多表查询" class="headerlink" title="4.3、多表查询"></a>4.3、多表查询</h3><p>定义表Dept</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span>(<span class="params">deptno:<span class="type">Int</span>, dname:<span class="type">String</span>, loc:<span class="type">String</span></span>)</span></div><div class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">Dept</span></span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> lines = sc.textFile(<span class="string">"hdfs://node01:9000/tmp_files/dept.csv"</span>).map(_.split(<span class="string">","</span>))</div><div class="line">lines: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Array</span>[<span class="type">String</span>]] = <span class="type">MapPartitionsRDD</span>[<span class="number">147</span>] at map at &lt;console&gt;:<span class="number">28</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> allDept = lines.map(x =&gt; <span class="type">Dept</span>(x(<span class="number">0</span>).toInt,x(<span class="number">1</span>),x(<span class="number">2</span>)))</div><div class="line">allDept: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Dept</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">148</span>] at map at &lt;console&gt;:<span class="number">32</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> df2 = allDept.toDF</div><div class="line">df2: org.apache.spark.sql.<span class="type">DataFrame</span> = [deptno: int, dname: string ... <span class="number">1</span> more field]</div><div class="line"></div><div class="line">scala&gt; df2.show</div><div class="line">+------+----------+--------+</div><div class="line">|deptno|     dname|     loc|</div><div class="line">+------+----------+--------+</div><div class="line">|    <span class="number">10</span>|<span class="type">ACCOUNTING</span>|<span class="type">NEW</span> <span class="type">YORK</span>|</div><div class="line">|    <span class="number">20</span>|  <span class="type">RESEARCH</span>|  <span class="type">DALLAS</span>|</div><div class="line">|    <span class="number">30</span>|     <span class="type">SALES</span>| <span class="type">CHICAGO</span>|</div><div class="line">|    <span class="number">40</span>|<span class="type">OPERATIONS</span>|  <span class="type">BOSTON</span>|</div><div class="line">+------+----------+--------+</div></pre></td></tr></table></figure><p>创建视图：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scala&gt; df2.createOrReplaceTempView(<span class="string">"dept"</span>)</div></pre></td></tr></table></figure><p>查询：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">scala&gt; spark.sql(<span class="string">"select dname, ename from emp e,dept d where e.deptno = d.deptno"</span>).show</div><div class="line">+----------+------+                                                             </div><div class="line">|     dname| ename|</div><div class="line">+----------+------+</div><div class="line">|  <span class="type">RESEARCH</span>| <span class="type">SMITH</span>|</div><div class="line">|  <span class="type">RESEARCH</span>| <span class="type">JONES</span>|</div><div class="line">|  <span class="type">RESEARCH</span>| <span class="type">SCOTT</span>|</div><div class="line">|  <span class="type">RESEARCH</span>| <span class="type">ADAMS</span>|</div><div class="line">|  <span class="type">RESEARCH</span>|  <span class="type">FORD</span>|</div><div class="line">|<span class="type">ACCOUNTING</span>| <span class="type">CLARK</span>|</div><div class="line">|<span class="type">ACCOUNTING</span>|  <span class="type">KING</span>|</div><div class="line">|<span class="type">ACCOUNTING</span>|<span class="type">MILLER</span>|</div><div class="line">|     <span class="type">SALES</span>| <span class="type">ALLEN</span>|</div><div class="line">|     <span class="type">SALES</span>|  <span class="type">WARD</span>|</div><div class="line">|     <span class="type">SALES</span>|<span class="type">MARTIN</span>|</div><div class="line">|     <span class="type">SALES</span>| <span class="type">BLAKE</span>|</div><div class="line">|     <span class="type">SALES</span>|<span class="type">TURNER</span>|</div><div class="line">|     <span class="type">SALES</span>| <span class="type">JAMES</span>|</div><div class="line">+----------+------+</div></pre></td></tr></table></figure><h2 id="5、DataSet"><a href="#5、DataSet" class="headerlink" title="5、DataSet"></a>5、DataSet</h2><p>和DataFrame类似，是一套新的接口，高级的DataFrame</p><h3 id="5-1、创建DataSet"><a href="#5-1、创建DataSet" class="headerlink" title="5.1、创建DataSet"></a>5.1、创建DataSet</h3><blockquote><p><strong>使用case class,结合Seq来创建DataSet</strong></p></blockquote><ol><li><p>定义case class</p><p><code>case class myData(a:Int, b:String)</code></p></li><li><p>生成序列，创建DataSet</p><p><code>val ds = Seq(myData(1,&quot;Sean&quot;),myData(2,&quot;Gakki&quot;)).toDs</code></p><p><code>ds.show</code></p></li></ol><blockquote><p><strong>读取Json文件,创建DataSet</strong></p></blockquote><ol><li><p>定义case class</p><p><code>case class Person(name:String, age:Int)</code></p></li><li><p>通过json数据来生成DataFrame</p><p><code>val df = spark.read.json(&quot;hdfs://node01:9000/tmp_files/people.json&quot;)</code></p></li><li><p>将Dataframe转化为DataSet</p><p><code>val ds = df.as[Person]</code></p><p>运行报错，显示如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">org.apache.spark.sql.<span class="type">AnalysisException</span>: <span class="type">Cannot</span> up cast `age` from bigint to int as it may truncate</div><div class="line"><span class="type">The</span> <span class="class"><span class="keyword">type</span> <span class="title">path</span> <span class="title">of</span> <span class="title">the</span> <span class="title">target</span> <span class="title">object</span> <span class="title">is</span></span>:</div><div class="line">- field (<span class="class"><span class="keyword">class</span></span>: <span class="string">"scala.Int"</span>, name: <span class="string">"age"</span>)</div><div class="line">- root <span class="class"><span class="keyword">class</span></span>: <span class="string">"Person"</span></div><div class="line"><span class="type">You</span> can either add an explicit cast to the input data or choose a higher precision <span class="class"><span class="keyword">type</span> <span class="title">of</span> <span class="title">the</span> <span class="title">field</span> <span class="title">in</span> <span class="title">the</span> <span class="title">target</span> <span class="title">object</span></span>;</div></pre></td></tr></table></figure></li><li><p>进行如下修改：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">BigInt</span></span>)</span></div><div class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> df = spark.read.format(<span class="string">"json"</span>).load(<span class="string">"/root/tmp_files/people.json"</span>)</div><div class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint, name: string]</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> ds = df.as[<span class="type">Person</span>]</div><div class="line">ds: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [age: bigint, name: string]</div><div class="line"></div><div class="line">scala&gt; ds.show</div><div class="line">+----+-------+</div><div class="line">| age|   name|</div><div class="line">+----+-------+</div><div class="line">|<span class="literal">null</span>|<span class="type">Michael</span>|</div><div class="line">|  <span class="number">30</span>|   <span class="type">Andy</span>|</div><div class="line">|  <span class="number">19</span>| <span class="type">Justin</span>|</div><div class="line">+----+-------+</div><div class="line"></div><div class="line">scala&gt; ds.collect</div><div class="line">res4: <span class="type">Array</span>[<span class="type">Person</span>] = <span class="type">Array</span>(<span class="type">Person</span>(<span class="type">Michael</span>,<span class="literal">null</span>), <span class="type">Person</span>(<span class="type">Andy</span>,<span class="number">30</span>), <span class="type">Person</span>(<span class="type">Justin</span>,<span class="number">19</span>))</div></pre></td></tr></table></figure></li></ol><blockquote><p><strong>使用其他数据</strong></p></blockquote><p>RDD操作和DataFrame操作和结合–&gt;DataSet</p><p>读取数据，创建DataSet</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> lineDs = spark.read.text(<span class="string">"/root/tmp_files/test_WordCount.txt"</span>).as[<span class="type">String</span>]</div><div class="line">lineDs: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">String</span>] = [value: string]</div><div class="line"></div><div class="line"><span class="comment">//筛选长度大于三的进行存储</span></div><div class="line">scala&gt; <span class="keyword">val</span> words = lineDs.flatMap(_.split(<span class="string">" "</span>)).filter(_.length &gt; <span class="number">3</span>)</div><div class="line">words: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">String</span>] = [value: string]</div><div class="line"></div><div class="line">scala&gt; words.show</div><div class="line">+-------+</div><div class="line">|  value|</div><div class="line">+-------+</div><div class="line">|   love|</div><div class="line">|<span class="type">Beijing</span>|</div><div class="line">|   love|</div><div class="line">|  <span class="type">China</span>|</div><div class="line">|<span class="type">Beijing</span>|</div><div class="line">|capital|</div><div class="line">|  <span class="type">China</span>|</div><div class="line">+-------+</div><div class="line"></div><div class="line">scala&gt; words.collect</div><div class="line">res6: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(love, <span class="type">Beijing</span>, love, <span class="type">China</span>, <span class="type">Beijing</span>, capital, <span class="type">China</span>)</div><div class="line"></div><div class="line"><span class="comment">//Wordcount操作</span></div><div class="line">scala&gt; <span class="keyword">val</span> wc = lineDs.flatMap(_.split(<span class="string">" "</span>)).map((_,<span class="number">1</span>)).groupByKey(_._1).count</div><div class="line">wc: org.apache.spark.sql.<span class="type">Dataset</span>[(<span class="type">String</span>, <span class="type">Long</span>)] = [value: string, count(<span class="number">1</span>): bigint]</div><div class="line"></div><div class="line">scala&gt; wc.show</div><div class="line">+-------+--------+                                                              </div><div class="line">|  value|count(<span class="number">1</span>)|</div><div class="line">+-------+--------+</div><div class="line">|<span class="type">Beijing</span>|       <span class="number">2</span>|</div><div class="line">|   love|       <span class="number">2</span>|</div><div class="line">|  <span class="type">China</span>|       <span class="number">2</span>|</div><div class="line">|     is|       <span class="number">1</span>|</div><div class="line">|capital|       <span class="number">1</span>|</div><div class="line">|    the|       <span class="number">1</span>|</div><div class="line">|     of|       <span class="number">1</span>|</div><div class="line">|      <span class="type">I</span>|       <span class="number">2</span>|</div><div class="line">+-------+--------+</div><div class="line"></div><div class="line"><span class="comment">//按照value值进行字典排序</span></div><div class="line">scala&gt; wc.orderBy($<span class="string">"value"</span>).show</div><div class="line">+-------+--------+                                                              </div><div class="line">|  value|count(<span class="number">1</span>)|</div><div class="line">+-------+--------+</div><div class="line">|<span class="type">Beijing</span>|       <span class="number">2</span>|</div><div class="line">|  <span class="type">China</span>|       <span class="number">2</span>|</div><div class="line">|      <span class="type">I</span>|       <span class="number">2</span>|</div><div class="line">|capital|       <span class="number">1</span>|</div><div class="line">|     is|       <span class="number">1</span>|</div><div class="line">|   love|       <span class="number">2</span>|</div><div class="line">|     of|       <span class="number">1</span>|</div><div class="line">|    the|       <span class="number">1</span>|</div><div class="line">+-------+--------+</div><div class="line"></div><div class="line"><span class="comment">//按第二列值进行排序</span></div><div class="line">scala&gt; wc.orderBy($<span class="string">"count(1)"</span>).show</div><div class="line">+-------+--------+                                                              </div><div class="line">|  value|count(<span class="number">1</span>)|</div><div class="line">+-------+--------+</div><div class="line">|capital|       <span class="number">1</span>|</div><div class="line">|    the|       <span class="number">1</span>|</div><div class="line">|     of|       <span class="number">1</span>|</div><div class="line">|     is|       <span class="number">1</span>|</div><div class="line">|<span class="type">Beijing</span>|       <span class="number">2</span>|</div><div class="line">|  <span class="type">China</span>|       <span class="number">2</span>|</div><div class="line">|   love|       <span class="number">2</span>|</div><div class="line">|      <span class="type">I</span>|       <span class="number">2</span>|</div><div class="line">+-------+--------+</div></pre></td></tr></table></figure><h3 id="5-2、DataSet操作案例"><a href="#5-2、DataSet操作案例" class="headerlink" title="5.2、DataSet操作案例"></a>5.2、DataSet操作案例</h3><p>使用emp.json生成一个DataSet</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> empDF = spark.read.json(<span class="string">"/root/tmp_files/emp.json"</span>)</div><div class="line">empDF: org.apache.spark.sql.<span class="type">DataFrame</span> = [comm: string, deptno: bigint ... <span class="number">6</span> more fields]</div><div class="line"></div><div class="line">scala&gt; empDF.show</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div><div class="line">|comm|deptno|empno| ename|  hiredate|      job| mgr| sal|</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7369</span>| <span class="type">SMITH</span>|<span class="number">1980</span>/<span class="number">12</span>/<span class="number">17</span>|    <span class="type">CLERK</span>|<span class="number">7902</span>| <span class="number">800</span>|</div><div class="line">| <span class="number">300</span>|    <span class="number">30</span>| <span class="number">7499</span>| <span class="type">ALLEN</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">20</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1600</span>|</div><div class="line">| <span class="number">500</span>|    <span class="number">30</span>| <span class="number">7521</span>|  <span class="type">WARD</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">22</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1250</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7566</span>| <span class="type">JONES</span>|  <span class="number">1981</span>/<span class="number">4</span>/<span class="number">2</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2975</span>|</div><div class="line">|<span class="number">1400</span>|    <span class="number">30</span>| <span class="number">7654</span>|<span class="type">MARTIN</span>| <span class="number">1981</span>/<span class="number">9</span>/<span class="number">28</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1250</span>|</div><div class="line">|    |    <span class="number">30</span>| <span class="number">7698</span>| <span class="type">BLAKE</span>|  <span class="number">1981</span>/<span class="number">5</span>/<span class="number">1</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2850</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7782</span>| <span class="type">CLARK</span>|  <span class="number">1981</span>/<span class="number">6</span>/<span class="number">9</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2450</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7788</span>| <span class="type">SCOTT</span>| <span class="number">1987</span>/<span class="number">4</span>/<span class="number">19</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>|<span class="number">3000</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7839</span>|  <span class="type">KING</span>|<span class="number">1981</span>/<span class="number">11</span>/<span class="number">17</span>|<span class="type">PRESIDENT</span>|    |<span class="number">5000</span>|</div><div class="line">|   <span class="number">0</span>|    <span class="number">30</span>| <span class="number">7844</span>|<span class="type">TURNER</span>|  <span class="number">1981</span>/<span class="number">9</span>/<span class="number">8</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1500</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7876</span>| <span class="type">ADAMS</span>| <span class="number">1987</span>/<span class="number">5</span>/<span class="number">23</span>|    <span class="type">CLERK</span>|<span class="number">7788</span>|<span class="number">1100</span>|</div><div class="line">|    |    <span class="number">30</span>| <span class="number">7900</span>| <span class="type">JAMES</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|    <span class="type">CLERK</span>|<span class="number">7698</span>| <span class="number">950</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7902</span>|  <span class="type">FORD</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>|<span class="number">3000</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7934</span>|<span class="type">MILLER</span>| <span class="number">1982</span>/<span class="number">1</span>/<span class="number">23</span>|    <span class="type">CLERK</span>|<span class="number">7782</span>|<span class="number">1300</span>|</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div><div class="line"></div><div class="line">scala&gt; empDF.where($<span class="string">"sal"</span> &gt;= <span class="number">3000</span>).show</div><div class="line">+----+------+-----+-----+----------+---------+----+----+</div><div class="line">|comm|deptno|empno|ename|  hiredate|      job| mgr| sal|</div><div class="line">+----+------+-----+-----+----------+---------+----+----+</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7788</span>|<span class="type">SCOTT</span>| <span class="number">1987</span>/<span class="number">4</span>/<span class="number">19</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>|<span class="number">3000</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7839</span>| <span class="type">KING</span>|<span class="number">1981</span>/<span class="number">11</span>/<span class="number">17</span>|<span class="type">PRESIDENT</span>|    |<span class="number">5000</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7902</span>| <span class="type">FORD</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>|<span class="number">3000</span>|</div><div class="line">+----+------+-----+-----+----------+---------+----+----+</div><div class="line"></div><div class="line"><span class="comment">//case class Emp(empno:BigInt, ename:String, job:String, mgr:BigInt, hiredate:String, sal:BigInt, comm:BigInt, deptno:BigInt)</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span>(<span class="params">empno:<span class="type">BigInt</span>, ename:<span class="type">String</span>, job:<span class="type">String</span>, mgr:<span class="type">String</span>, hiredate:<span class="type">String</span>, sal:<span class="type">BigInt</span>, comm:<span class="type">String</span>, deptno:<span class="type">BigInt</span></span>)</span></div><div class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span></div><div class="line"></div><div class="line">scala&gt; empDF.as[<span class="type">Emp</span>].show</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div><div class="line">|comm|deptno|empno| ename|  hiredate|      job| mgr| sal|</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7369</span>| <span class="type">SMITH</span>|<span class="number">1980</span>/<span class="number">12</span>/<span class="number">17</span>|    <span class="type">CLERK</span>|<span class="number">7902</span>| <span class="number">800</span>|</div><div class="line">| <span class="number">300</span>|    <span class="number">30</span>| <span class="number">7499</span>| <span class="type">ALLEN</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">20</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1600</span>|</div><div class="line">| <span class="number">500</span>|    <span class="number">30</span>| <span class="number">7521</span>|  <span class="type">WARD</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">22</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1250</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7566</span>| <span class="type">JONES</span>|  <span class="number">1981</span>/<span class="number">4</span>/<span class="number">2</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2975</span>|</div><div class="line">|<span class="number">1400</span>|    <span class="number">30</span>| <span class="number">7654</span>|<span class="type">MARTIN</span>| <span class="number">1981</span>/<span class="number">9</span>/<span class="number">28</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1250</span>|</div><div class="line">|    |    <span class="number">30</span>| <span class="number">7698</span>| <span class="type">BLAKE</span>|  <span class="number">1981</span>/<span class="number">5</span>/<span class="number">1</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2850</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7782</span>| <span class="type">CLARK</span>|  <span class="number">1981</span>/<span class="number">6</span>/<span class="number">9</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2450</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7788</span>| <span class="type">SCOTT</span>| <span class="number">1987</span>/<span class="number">4</span>/<span class="number">19</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>|<span class="number">3000</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7839</span>|  <span class="type">KING</span>|<span class="number">1981</span>/<span class="number">11</span>/<span class="number">17</span>|<span class="type">PRESIDENT</span>|    |<span class="number">5000</span>|</div><div class="line">|   <span class="number">0</span>|    <span class="number">30</span>| <span class="number">7844</span>|<span class="type">TURNER</span>|  <span class="number">1981</span>/<span class="number">9</span>/<span class="number">8</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1500</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7876</span>| <span class="type">ADAMS</span>| <span class="number">1987</span>/<span class="number">5</span>/<span class="number">23</span>|    <span class="type">CLERK</span>|<span class="number">7788</span>|<span class="number">1100</span>|</div><div class="line">|    |    <span class="number">30</span>| <span class="number">7900</span>| <span class="type">JAMES</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|    <span class="type">CLERK</span>|<span class="number">7698</span>| <span class="number">950</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7902</span>|  <span class="type">FORD</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>|<span class="number">3000</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7934</span>|<span class="type">MILLER</span>| <span class="number">1982</span>/<span class="number">1</span>/<span class="number">23</span>|    <span class="type">CLERK</span>|<span class="number">7782</span>|<span class="number">1300</span>|</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> <span class="type">Ds</span> = empDF.as[<span class="type">Emp</span>]</div><div class="line"><span class="type">Ds</span>: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Emp</span>] = [comm: string, deptno: bigint ... <span class="number">6</span> more fields]</div><div class="line"></div><div class="line"><span class="comment">//查询工资大于三千</span></div><div class="line">scala&gt; <span class="type">Ds</span>.filter(_.sal &gt; <span class="number">3000</span>).show</div><div class="line">+----+------+-----+-----+----------+---------+---+----+</div><div class="line">|comm|deptno|empno|ename|  hiredate|      job|mgr| sal|</div><div class="line">+----+------+-----+-----+----------+---------+---+----+</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7839</span>| <span class="type">KING</span>|<span class="number">1981</span>/<span class="number">11</span>/<span class="number">17</span>|<span class="type">PRESIDENT</span>|   |<span class="number">5000</span>|</div><div class="line">+----+------+-----+-----+----------+---------+---+----+</div><div class="line"></div><div class="line"><span class="comment">//查询部门号为10的员工</span></div><div class="line">scala&gt; <span class="type">Ds</span>.filter(_.deptno == <span class="number">10</span>).show</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div><div class="line">|comm|deptno|empno| ename|  hiredate|      job| mgr| sal|</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7782</span>| <span class="type">CLARK</span>|  <span class="number">1981</span>/<span class="number">6</span>/<span class="number">9</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2450</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7839</span>|  <span class="type">KING</span>|<span class="number">1981</span>/<span class="number">11</span>/<span class="number">17</span>|<span class="type">PRESIDENT</span>|    |<span class="number">5000</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7934</span>|<span class="type">MILLER</span>| <span class="number">1982</span>/<span class="number">1</span>/<span class="number">23</span>|    <span class="type">CLERK</span>|<span class="number">7782</span>|<span class="number">1300</span>|</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div></pre></td></tr></table></figure><font color="red">注意：如上表有缺省值，该列需要定义为String类型，即便其他值为整数类型也不能用BigInt！！</font><h3 id="5-3、多表查询"><a href="#5-3、多表查询" class="headerlink" title="5.3、多表查询"></a>5.3、多表查询</h3><ol><li>准备工作：创建表</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建deptDS</span></div><div class="line"><span class="keyword">val</span> dept = sc.textFile(<span class="string">"/root/tmp_files/dept.csv"</span>).map(_.split(<span class="string">","</span>))</div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span>(<span class="params">deptno:<span class="type">Int</span>, dname:<span class="type">String</span>, loc:<span class="type">String</span></span>)</span></div><div class="line"><span class="keyword">val</span> deptDS = dept.map(x =&gt; <span class="type">Dept</span>(x(<span class="number">0</span>).toInt, x(<span class="number">1</span>), x(<span class="number">2</span>))).toDS</div><div class="line"></div><div class="line"><span class="comment">//创建empDS</span></div><div class="line"><span class="keyword">val</span> emp = sc.textFile(<span class="string">"/root/tmp_files/emp.csv"</span>).map(_.split(<span class="string">","</span>))</div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span>(<span class="params">empno:<span class="type">Int</span>, ename:<span class="type">String</span>, job:<span class="type">String</span>, mgr:<span class="type">Int</span>, hiredate:<span class="type">String</span>, sal:<span class="type">Int</span>, comm:<span class="type">Int</span>, deptno:<span class="type">Int</span></span>)</span></div><div class="line"><span class="keyword">val</span> empDS = emp.map(x =&gt; <span class="type">Emp</span>(x(<span class="number">0</span>).toInt, x(<span class="number">1</span>), x(<span class="number">2</span>), x(<span class="number">3</span>).toInt, x(<span class="number">4</span>), x(<span class="number">5</span>).toInt, x(<span class="number">6</span>).toInt, x(<span class="number">7</span>).toInt)).toDS</div></pre></td></tr></table></figure><ol><li><p>连接<code>join</code>和<code>joinWith</code></p><p><code>join</code>：<code>empDS.join(deptDS, &quot;deptno&quot;)</code></p><p><code>joinWith</code>：<code>empDS.joinWith(deptDS, empDS(&quot;deptno&quot;) === deptDS(&quot;deptno&quot;))</code></p></li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">scala&gt; empDS.join(deptDS, <span class="string">"deptno"</span>).show</div><div class="line">+------+-----+------+---------+----+----------+----+----+----------+--------+   </div><div class="line">|deptno|empno| ename|      job| mgr|  hiredate| sal|comm|     dname|     loc|</div><div class="line">+------+-----+------+---------+----+----------+----+----+----------+--------+</div><div class="line">|    <span class="number">20</span>| <span class="number">7369</span>| <span class="type">SMITH</span>|    <span class="type">CLERK</span>|<span class="number">7902</span>|<span class="number">1980</span>/<span class="number">12</span>/<span class="number">17</span>| <span class="number">800</span>|   <span class="number">0</span>|  <span class="type">RESEARCH</span>|  <span class="type">DALLAS</span>|</div><div class="line">|    <span class="number">20</span>| <span class="number">7566</span>| <span class="type">JONES</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">4</span>/<span class="number">2</span>|<span class="number">2975</span>|   <span class="number">0</span>|  <span class="type">RESEARCH</span>|  <span class="type">DALLAS</span>|</div><div class="line">|    <span class="number">20</span>| <span class="number">7788</span>| <span class="type">SCOTT</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>| <span class="number">1987</span>/<span class="number">4</span>/<span class="number">19</span>|<span class="number">3000</span>|   <span class="number">0</span>|  <span class="type">RESEARCH</span>|  <span class="type">DALLAS</span>|</div><div class="line">|    <span class="number">20</span>| <span class="number">7876</span>| <span class="type">ADAMS</span>|    <span class="type">CLERK</span>|<span class="number">7788</span>| <span class="number">1987</span>/<span class="number">5</span>/<span class="number">23</span>|<span class="number">1100</span>|   <span class="number">0</span>|  <span class="type">RESEARCH</span>|  <span class="type">DALLAS</span>|</div><div class="line">|    <span class="number">20</span>| <span class="number">7902</span>|  <span class="type">FORD</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|<span class="number">3000</span>|   <span class="number">0</span>|  <span class="type">RESEARCH</span>|  <span class="type">DALLAS</span>|</div><div class="line">|    <span class="number">10</span>| <span class="number">7782</span>| <span class="type">CLARK</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">6</span>/<span class="number">9</span>|<span class="number">2450</span>|   <span class="number">0</span>|<span class="type">ACCOUNTING</span>|<span class="type">NEW</span> <span class="type">YORK</span>|</div><div class="line">|    <span class="number">10</span>| <span class="number">7839</span>|  <span class="type">KING</span>|<span class="type">PRESIDENT</span>|<span class="number">7839</span>|<span class="number">1981</span>/<span class="number">11</span>/<span class="number">17</span>|<span class="number">5000</span>|   <span class="number">0</span>|<span class="type">ACCOUNTING</span>|<span class="type">NEW</span> <span class="type">YORK</span>|</div><div class="line">|    <span class="number">10</span>| <span class="number">7934</span>|<span class="type">MILLER</span>|    <span class="type">CLERK</span>|<span class="number">7782</span>| <span class="number">1982</span>/<span class="number">1</span>/<span class="number">23</span>|<span class="number">1300</span>|   <span class="number">0</span>|<span class="type">ACCOUNTING</span>|<span class="type">NEW</span> <span class="type">YORK</span>|</div><div class="line">|    <span class="number">30</span>| <span class="number">7499</span>| <span class="type">ALLEN</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">20</span>|<span class="number">1600</span>| <span class="number">300</span>|     <span class="type">SALES</span>| <span class="type">CHICAGO</span>|</div><div class="line">|    <span class="number">30</span>| <span class="number">7521</span>|  <span class="type">WARD</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">22</span>|<span class="number">1250</span>| <span class="number">500</span>|     <span class="type">SALES</span>| <span class="type">CHICAGO</span>|</div><div class="line">|    <span class="number">30</span>| <span class="number">7654</span>|<span class="type">MARTIN</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">9</span>/<span class="number">28</span>|<span class="number">1250</span>|<span class="number">1400</span>|     <span class="type">SALES</span>| <span class="type">CHICAGO</span>|</div><div class="line">|    <span class="number">30</span>| <span class="number">7698</span>| <span class="type">BLAKE</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">5</span>/<span class="number">1</span>|<span class="number">2850</span>|   <span class="number">0</span>|     <span class="type">SALES</span>| <span class="type">CHICAGO</span>|</div><div class="line">|    <span class="number">30</span>| <span class="number">7844</span>|<span class="type">TURNER</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|  <span class="number">1981</span>/<span class="number">9</span>/<span class="number">8</span>|<span class="number">1500</span>|   <span class="number">0</span>|     <span class="type">SALES</span>| <span class="type">CHICAGO</span>|</div><div class="line">|    <span class="number">30</span>| <span class="number">7900</span>| <span class="type">JAMES</span>|    <span class="type">CLERK</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>| <span class="number">950</span>|   <span class="number">0</span>|     <span class="type">SALES</span>| <span class="type">CHICAGO</span>|</div><div class="line">+------+-----+------+---------+----+----------+----+----+----------+--------+</div><div class="line"></div><div class="line"></div><div class="line">scala&gt; empDS.joinWith(deptDS, empDS(<span class="string">"deptno"</span>) === deptDS(<span class="string">"deptno"</span>)).show</div><div class="line">+--------------------+--------------------+                                     </div><div class="line">|                  _1|                  _2|</div><div class="line">+--------------------+--------------------+</div><div class="line">|[<span class="number">7369</span>,<span class="type">SMITH</span>,<span class="type">CLERK</span>...|[<span class="number">20</span>,<span class="type">RESEARCH</span>,<span class="type">DALLAS</span>]|</div><div class="line">|[<span class="number">7566</span>,<span class="type">JONES</span>,<span class="type">MANAG</span>...|[<span class="number">20</span>,<span class="type">RESEARCH</span>,<span class="type">DALLAS</span>]|</div><div class="line">|[<span class="number">7788</span>,<span class="type">SCOTT</span>,<span class="type">ANALY</span>...|[<span class="number">20</span>,<span class="type">RESEARCH</span>,<span class="type">DALLAS</span>]|</div><div class="line">|[<span class="number">7876</span>,<span class="type">ADAMS</span>,<span class="type">CLERK</span>...|[<span class="number">20</span>,<span class="type">RESEARCH</span>,<span class="type">DALLAS</span>]|</div><div class="line">|[<span class="number">7902</span>,<span class="type">FORD</span>,<span class="type">ANALYS</span>...|[<span class="number">20</span>,<span class="type">RESEARCH</span>,<span class="type">DALLAS</span>]|</div><div class="line">|[<span class="number">7782</span>,<span class="type">CLARK</span>,<span class="type">MANAG</span>...|[<span class="number">10</span>,<span class="type">ACCOUNTING</span>,<span class="type">NE</span>...|</div><div class="line">|[<span class="number">7839</span>,<span class="type">KING</span>,<span class="type">PRESID</span>...|[<span class="number">10</span>,<span class="type">ACCOUNTING</span>,<span class="type">NE</span>...|</div><div class="line">|[<span class="number">7934</span>,<span class="type">MILLER</span>,<span class="type">CLER</span>...|[<span class="number">10</span>,<span class="type">ACCOUNTING</span>,<span class="type">NE</span>...|</div><div class="line">|[<span class="number">7499</span>,<span class="type">ALLEN</span>,<span class="type">SALES</span>...|  [<span class="number">30</span>,<span class="type">SALES</span>,<span class="type">CHICAGO</span>]|</div><div class="line">|[<span class="number">7521</span>,<span class="type">WARD</span>,<span class="type">SALESM</span>...|  [<span class="number">30</span>,<span class="type">SALES</span>,<span class="type">CHICAGO</span>]|</div><div class="line">|[<span class="number">7654</span>,<span class="type">MARTIN</span>,<span class="type">SALE</span>...|  [<span class="number">30</span>,<span class="type">SALES</span>,<span class="type">CHICAGO</span>]|</div><div class="line">|[<span class="number">7698</span>,<span class="type">BLAKE</span>,<span class="type">MANAG</span>...|  [<span class="number">30</span>,<span class="type">SALES</span>,<span class="type">CHICAGO</span>]|</div><div class="line">|[<span class="number">7844</span>,<span class="type">TURNER</span>,<span class="type">SALE</span>...|  [<span class="number">30</span>,<span class="type">SALES</span>,<span class="type">CHICAGO</span>]|</div><div class="line">|[<span class="number">7900</span>,<span class="type">JAMES</span>,<span class="type">CLERK</span>...|  [<span class="number">30</span>,<span class="type">SALES</span>,<span class="type">CHICAGO</span>]|</div><div class="line">+--------------------+--------------------+</div></pre></td></tr></table></figure><p>   连接后Schema不同。可以调用<code>.printSchema</code>查询</p><ol><li>需求：查询部门等于10的员工所有信息</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; deptDS.join(empDS, <span class="string">"deptno"</span>).where(<span class="string">"deptno == 10"</span>).show</div><div class="line">+------+----------+--------+-----+------+---------+----+----------+----+----+   </div><div class="line">|deptno|     dname|     loc|empno| ename|      job| mgr|  hiredate| sal|comm|</div><div class="line">+------+----------+--------+-----+------+---------+----+----------+----+----+</div><div class="line">|    <span class="number">10</span>|<span class="type">ACCOUNTING</span>|<span class="type">NEW</span> <span class="type">YORK</span>| <span class="number">7782</span>| <span class="type">CLARK</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">6</span>/<span class="number">9</span>|<span class="number">2450</span>|   <span class="number">0</span>|</div><div class="line">|    <span class="number">10</span>|<span class="type">ACCOUNTING</span>|<span class="type">NEW</span> <span class="type">YORK</span>| <span class="number">7839</span>|  <span class="type">KING</span>|<span class="type">PRESIDENT</span>|<span class="number">7839</span>|<span class="number">1981</span>/<span class="number">11</span>/<span class="number">17</span>|<span class="number">5000</span>|   <span class="number">0</span>|</div><div class="line">|    <span class="number">10</span>|<span class="type">ACCOUNTING</span>|<span class="type">NEW</span> <span class="type">YORK</span>| <span class="number">7934</span>|<span class="type">MILLER</span>|    <span class="type">CLERK</span>|<span class="number">7782</span>| <span class="number">1982</span>/<span class="number">1</span>/<span class="number">23</span>|<span class="number">1300</span>|   <span class="number">0</span>|</div><div class="line">+------+----------+--------+-----+------+---------+----+----------+----+----+</div></pre></td></tr></table></figure><h4 id="使用数据源"><a href="#使用数据源" class="headerlink" title="使用数据源"></a>使用数据源</h4><ol><li><p>使用load函数，save函数</p><p>load是加载文件，save是存储文件</p></li></ol><h2 id="6、视图"><a href="#6、视图" class="headerlink" title="6、视图"></a>6、视图</h2><p>视图是一个虚表，不存储数据。</p><p>两种类型：</p><ol><li><p>本地视图：只在当前Session中有效</p><p><code>createOrReplaceTempView ：</code>创建本地视图，没有就创建，有则替换</p><p><code>createTempView：</code>创建本地视图，没有则创建，有则报错</p></li><li><p>全局视图：在不同的Session中都有用，把全局视图创建在命名空间中：<strong>global_temp</strong>中。类似于一个库。</p><p><code>createGlobalTempView：</code>创建全局视图</p></li></ol><p>实验：</p><p>在一个新的Session中访问不到已经创建好的emp视图</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">scala&gt; spark.newSession.sql(<span class="string">"select * from emp"</span>).show</div><div class="line">org.apache.spark.sql.<span class="type">AnalysisException</span>: <span class="type">Table</span> or view not found: emp; line <span class="number">1</span> pos <span class="number">14</span></div><div class="line">  at org.apache.spark.sql.catalyst.analysis.<span class="keyword">package</span>$<span class="type">AnalysisErrorAt</span>.failAnalysis(<span class="keyword">package</span>.scala:<span class="number">42</span>)</div><div class="line">  at org.apache.spark.sql.catalyst.analysis.<span class="type">Analyzer</span>$<span class="type">ResolveRelations</span>$.org$apache$spark$sql$catalyst$analysis$<span class="type">Analyzer</span>$<span class="type">ResolveRelations</span>$$lookupTableFromCatalog(<span class="type">Analyzer</span>.scala:<span class="number">459</span>)</div><div class="line">  at org.apache.spark.sql.catalyst.analysis.<span class="type">Analyzer</span>$<span class="type">ResolveRelations</span>$$anonfun$apply$<span class="number">8.</span>applyOrElse(<span class="type">Analyzer</span>.scala:<span class="number">478</span>)</div><div class="line">  at org.apache.spark.sql.catalyst.analysis.<span class="type">Analyzer</span>$<span class="type">ResolveRelations</span>$$anonfun$apply$<span class="number">8.</span>applyOrElse(<span class="type">Analyzer</span>.scala:<span class="number">463</span>)</div><div class="line">  at org.apache.spark.sql.catalyst.plans.logical.<span class="type">LogicalPlan</span>$$anonfun$resolveOperators$<span class="number">1.</span>apply(<span class="type">LogicalPlan</span>.scala:<span class="number">61</span>)</div><div class="line">  at org.apache.spark.sql.catalyst.plans.logical.<span class="type">LogicalPlan</span>$$anonfun$resolveOperators$<span class="number">1.</span>apply(<span class="type">LogicalPlan</span>.scala:<span class="number">61</span>)</div><div class="line">  at org.apache.spark.sql.catalyst.trees.<span class="type">CurrentOrigin</span>$.withOrigin(<span class="type">TreeNode</span>.scala:<span class="number">70</span>)</div><div class="line">.....</div></pre></td></tr></table></figure><p>当把emp创建为全局视图后再次测试</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">scala&gt; spark.newSession.sql(<span class="string">"select * from global_temp.emp"</span>).show</div><div class="line">+-----+------+---------+----+----------+----+----+------+</div><div class="line">|empno| ename|      job| mgr|  hiredate| sal|comm|deptno|</div><div class="line">+-----+------+---------+----+----------+----+----+------+</div><div class="line">| <span class="number">7369</span>| <span class="type">SMITH</span>|    <span class="type">CLERK</span>|<span class="number">7902</span>|<span class="number">1980</span>/<span class="number">12</span>/<span class="number">17</span>| <span class="number">800</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7499</span>| <span class="type">ALLEN</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">20</span>|<span class="number">1600</span>| <span class="number">300</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7521</span>|  <span class="type">WARD</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">22</span>|<span class="number">1250</span>| <span class="number">500</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7566</span>| <span class="type">JONES</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">4</span>/<span class="number">2</span>|<span class="number">2975</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7654</span>|<span class="type">MARTIN</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">9</span>/<span class="number">28</span>|<span class="number">1250</span>|<span class="number">1400</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7698</span>| <span class="type">BLAKE</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">5</span>/<span class="number">1</span>|<span class="number">2850</span>|   <span class="number">0</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7782</span>| <span class="type">CLARK</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|  <span class="number">1981</span>/<span class="number">6</span>/<span class="number">9</span>|<span class="number">2450</span>|   <span class="number">0</span>|    <span class="number">10</span>|</div><div class="line">| <span class="number">7788</span>| <span class="type">SCOTT</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>| <span class="number">1987</span>/<span class="number">4</span>/<span class="number">19</span>|<span class="number">3000</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7839</span>|  <span class="type">KING</span>|<span class="type">PRESIDENT</span>|<span class="number">7839</span>|<span class="number">1981</span>/<span class="number">11</span>/<span class="number">17</span>|<span class="number">5000</span>|   <span class="number">0</span>|    <span class="number">10</span>|</div><div class="line">| <span class="number">7844</span>|<span class="type">TURNER</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|  <span class="number">1981</span>/<span class="number">9</span>/<span class="number">8</span>|<span class="number">1500</span>|   <span class="number">0</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7876</span>| <span class="type">ADAMS</span>|    <span class="type">CLERK</span>|<span class="number">7788</span>| <span class="number">1987</span>/<span class="number">5</span>/<span class="number">23</span>|<span class="number">1100</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7900</span>| <span class="type">JAMES</span>|    <span class="type">CLERK</span>|<span class="number">7698</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>| <span class="number">950</span>|   <span class="number">0</span>|    <span class="number">30</span>|</div><div class="line">| <span class="number">7902</span>|  <span class="type">FORD</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|<span class="number">3000</span>|   <span class="number">0</span>|    <span class="number">20</span>|</div><div class="line">| <span class="number">7934</span>|<span class="type">MILLER</span>|    <span class="type">CLERK</span>|<span class="number">7782</span>| <span class="number">1982</span>/<span class="number">1</span>/<span class="number">23</span>|<span class="number">1300</span>|   <span class="number">0</span>|    <span class="number">10</span>|</div><div class="line">+-----+------+---------+----+----------+----+----+------+</div></pre></td></tr></table></figure><p><strong>因为全局视图存放在global_temp中，需要加上它再进行sql语句</strong></p><h1 id="2、使用数据源"><a href="#2、使用数据源" class="headerlink" title="2、使用数据源"></a>2、使用数据源</h1><p>解释：在Spark Sql中可以使用各种各样的数据源来操作，只能操作结构化数据！</p><h2 id="2-1、使用load，save函数"><a href="#2-1、使用load，save函数" class="headerlink" title="2.1、使用load，save函数"></a>2.1、使用load，save函数</h2><p>解释：load是加载数据，save是存储数据</p><font color="red">注意：使用上述两函数时，默认是 parquet格式</font><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> userDF = spark.read.load(<span class="string">"/root/tmp_files/users.parquet"</span>)</div><div class="line"></div><div class="line">scala&gt; userDF.show</div><div class="line"><span class="number">19</span>/<span class="number">04</span>/<span class="number">09</span> <span class="number">12</span>:<span class="number">11</span>:<span class="number">10</span> <span class="type">WARN</span> <span class="type">ParquetRecordReader</span>: <span class="type">Can</span> not initialize counter due to context is not a instance of <span class="type">TaskInputOutputContext</span>, but is org.apache.hadoop.mapreduce.task.<span class="type">TaskAttemptContextImpl</span></div><div class="line">+------+--------------+----------------+</div><div class="line">|  name|favorite_color|favorite_numbers|</div><div class="line">+------+--------------+----------------+</div><div class="line">|<span class="type">Alyssa</span>|          <span class="literal">null</span>|  [<span class="number">3</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">20</span>]|</div><div class="line">|   <span class="type">Ben</span>|           red|              []|</div><div class="line">+------+--------------+----------------+</div><div class="line"></div><div class="line">scala&gt; userDF.printSchema</div><div class="line">root</div><div class="line"> |-- name: string (nullable = <span class="literal">true</span>)</div><div class="line"> |-- favorite_color: string (nullable = <span class="literal">true</span>)</div><div class="line"> |-- favorite_numbers: array (nullable = <span class="literal">true</span>)</div><div class="line"> |    |-- element: integer (containsNull = <span class="literal">true</span>)</div><div class="line"></div><div class="line"><span class="comment">//loadjson文件时，必须先进行format</span></div><div class="line"><span class="comment">//错误示范val userDF = spark.read.load("/root/tmp_files/people.json")</span></div><div class="line"><span class="comment">//等价于val peopleDF = spark.read.json("/root/tmp_files/people.json")</span></div><div class="line">scala&gt; <span class="keyword">val</span> peopleDF = spark.read.format(<span class="string">"json"</span>).load(<span class="string">"/root/tmp_files/people.json"</span>)</div><div class="line">peopleDF: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint, name: string]</div><div class="line"></div><div class="line">scala&gt; peopleDF.show</div><div class="line">+----+-------+</div><div class="line">| age|   name|</div><div class="line">+----+-------+</div><div class="line">|<span class="literal">null</span>|<span class="type">Michael</span>|</div><div class="line">|  <span class="number">30</span>|   <span class="type">Andy</span>|</div><div class="line">|  <span class="number">19</span>| <span class="type">Justin</span>|</div><div class="line">+----+-------+</div><div class="line"></div><div class="line"><span class="comment">//保存结果</span></div><div class="line">scala&gt; userDF.select($<span class="string">"name"</span>, $<span class="string">"favorite_color"</span>).write.save(<span class="string">"/root/tmp_files/parquet"</span>)</div><div class="line"></div><div class="line"><span class="comment">//读取上面保存的结果，检验数据--不推荐</span></div><div class="line">scala&gt; spark.read.load(<span class="string">"/root/tmp_files/parquet/part-00000-f06b1532-8a45-4a8b-a61e-dc91848ec929.snappy.parquet"</span>).show</div><div class="line">+------+--------------+</div><div class="line">|  name|favorite_color|</div><div class="line">+------+--------------+</div><div class="line">|<span class="type">Alyssa</span>|          <span class="literal">null</span>|</div><div class="line">|   <span class="type">Ben</span>|           red|</div><div class="line">+------+--------------+</div><div class="line"></div><div class="line"><span class="comment">//与上面等价，不需要指定具体文件名，只需要指到目录</span></div><div class="line">scala&gt; spark.read.load(<span class="string">"/root/tmp_files/parquet"</span>).show</div><div class="line">+------+--------------+</div><div class="line">|  name|favorite_color|</div><div class="line">+------+--------------+</div><div class="line">|<span class="type">Alyssa</span>|          <span class="literal">null</span>|</div><div class="line">|   <span class="type">Ben</span>|           red|</div><div class="line">+------+--------------+</div></pre></td></tr></table></figure><p>关于sava函数：</p><ol><li>调用sava函数的时候，可以指定存储模式，如：追加(add)，覆盖(overwtier)</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">scala&gt; userDF.write.save(<span class="string">"/root/tmp_files/parquet"</span>)</div><div class="line">org.apache.spark.sql.<span class="type">AnalysisException</span>: path file:/root/tmp_files/parquet already exists.;</div><div class="line">  at org.apache.spark.sql.execution.datasources.<span class="type">InsertIntoHadoopFsRelationCommand</span>.run(<span class="type">InsertIntoHadoopFsRelationCommand</span>.scala:<span class="number">80</span>)</div><div class="line">...</div><div class="line"></div><div class="line">scala&gt; userDF.write.mode(<span class="string">"overwrite"</span>).save(<span class="string">"/root/tmp_files/parquet"</span>)</div><div class="line"><span class="comment">//发现该文件夹修改时间已经改变，说明覆盖成功</span></div></pre></td></tr></table></figure><ol><li>将结果保存成一张表</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; userDF.select($<span class="string">"name"</span>,$<span class="string">"favorite_numbers"</span>).write.saveAsTable(<span class="string">"table"</span>)</div><div class="line"><span class="number">19</span>/<span class="number">04</span>/<span class="number">09</span> <span class="number">12</span>:<span class="number">34</span>:<span class="number">01</span> <span class="type">WARN</span> <span class="type">ParquetRecordReader</span>: <span class="type">Can</span> not initialize counter due to context is not a instance of <span class="type">TaskInputOutputContext</span>, but is org.apache.hadoop.mapreduce.task.<span class="type">TaskAttemptContextImpl</span></div><div class="line"></div><div class="line">scala&gt; spark.sql(<span class="string">"select * from table"</span>).show</div><div class="line"><span class="number">19</span>/<span class="number">04</span>/<span class="number">09</span> <span class="number">12</span>:<span class="number">34</span>:<span class="number">22</span> <span class="type">WARN</span> <span class="type">ParquetRecordReader</span>: <span class="type">Can</span> not initialize counter due to context is not a instance of <span class="type">TaskInputOutputContext</span>, but is org.apache.hadoop.mapreduce.task.<span class="type">TaskAttemptContextImpl</span></div><div class="line">+------+----------------+</div><div class="line">|  name|favorite_numbers|</div><div class="line">+------+----------------+</div><div class="line">|<span class="type">Alyssa</span>|  [<span class="number">3</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">20</span>]|</div><div class="line">|   <span class="type">Ben</span>|              []|</div><div class="line">+------+----------------+</div></pre></td></tr></table></figure><h2 id="2-2、Parquet文件"><a href="#2-2、Parquet文件" class="headerlink" title="2.2、Parquet文件"></a>2.2、Parquet文件</h2><p>概念：列式存储文件没事Spark Sql默认的数据源，就是一个普通的文件</p><p>举例：</p><ol><li>转换为parquet文件：将数据读进来，转出去就是parquet文件</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> empDF = spark.read.json(<span class="string">"/root/tmp_files/emp.json"</span>)</div><div class="line">empDF: org.apache.spark.sql.<span class="type">DataFrame</span> = [comm: string, deptno: bigint ... <span class="number">6</span> more fields]</div><div class="line"></div><div class="line">scala&gt; empDF.write.mode(<span class="string">"overwrite"</span>).save(<span class="string">"/root/tmp_files/parquet"</span>)</div><div class="line"></div><div class="line">scala&gt; empDF.write.mode(<span class="string">"overwrite"</span>).parquet(<span class="string">"/root/tmp_files/parquet"</span>)</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> emp = spark.read.parquet(<span class="string">"/root/tmp_files/parquet"</span>)</div><div class="line">emp: org.apache.spark.sql.<span class="type">DataFrame</span> = [comm: string, deptno: bigint ... <span class="number">6</span> more fields]</div><div class="line"></div><div class="line">scala&gt; emp.createOrReplaceTempView(<span class="string">"emp"</span>)</div><div class="line"></div><div class="line">scala&gt; spark.sql(<span class="string">"select * from emp"</span>).show</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div><div class="line">|comm|deptno|empno| ename|  hiredate|      job| mgr| sal|</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7369</span>| <span class="type">SMITH</span>|<span class="number">1980</span>/<span class="number">12</span>/<span class="number">17</span>|    <span class="type">CLERK</span>|<span class="number">7902</span>| <span class="number">800</span>|</div><div class="line">| <span class="number">300</span>|    <span class="number">30</span>| <span class="number">7499</span>| <span class="type">ALLEN</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">20</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1600</span>|</div><div class="line">| <span class="number">500</span>|    <span class="number">30</span>| <span class="number">7521</span>|  <span class="type">WARD</span>| <span class="number">1981</span>/<span class="number">2</span>/<span class="number">22</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1250</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7566</span>| <span class="type">JONES</span>|  <span class="number">1981</span>/<span class="number">4</span>/<span class="number">2</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2975</span>|</div><div class="line">|<span class="number">1400</span>|    <span class="number">30</span>| <span class="number">7654</span>|<span class="type">MARTIN</span>| <span class="number">1981</span>/<span class="number">9</span>/<span class="number">28</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1250</span>|</div><div class="line">|    |    <span class="number">30</span>| <span class="number">7698</span>| <span class="type">BLAKE</span>|  <span class="number">1981</span>/<span class="number">5</span>/<span class="number">1</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2850</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7782</span>| <span class="type">CLARK</span>|  <span class="number">1981</span>/<span class="number">6</span>/<span class="number">9</span>|  <span class="type">MANAGER</span>|<span class="number">7839</span>|<span class="number">2450</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7788</span>| <span class="type">SCOTT</span>| <span class="number">1987</span>/<span class="number">4</span>/<span class="number">19</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>|<span class="number">3000</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7839</span>|  <span class="type">KING</span>|<span class="number">1981</span>/<span class="number">11</span>/<span class="number">17</span>|<span class="type">PRESIDENT</span>|    |<span class="number">5000</span>|</div><div class="line">|   <span class="number">0</span>|    <span class="number">30</span>| <span class="number">7844</span>|<span class="type">TURNER</span>|  <span class="number">1981</span>/<span class="number">9</span>/<span class="number">8</span>| <span class="type">SALESMAN</span>|<span class="number">7698</span>|<span class="number">1500</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7876</span>| <span class="type">ADAMS</span>| <span class="number">1987</span>/<span class="number">5</span>/<span class="number">23</span>|    <span class="type">CLERK</span>|<span class="number">7788</span>|<span class="number">1100</span>|</div><div class="line">|    |    <span class="number">30</span>| <span class="number">7900</span>| <span class="type">JAMES</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|    <span class="type">CLERK</span>|<span class="number">7698</span>| <span class="number">950</span>|</div><div class="line">|    |    <span class="number">20</span>| <span class="number">7902</span>|  <span class="type">FORD</span>| <span class="number">1981</span>/<span class="number">12</span>/<span class="number">3</span>|  <span class="type">ANALYST</span>|<span class="number">7566</span>|<span class="number">3000</span>|</div><div class="line">|    |    <span class="number">10</span>| <span class="number">7934</span>|<span class="type">MILLER</span>| <span class="number">1982</span>/<span class="number">1</span>/<span class="number">23</span>|    <span class="type">CLERK</span>|<span class="number">7782</span>|<span class="number">1300</span>|</div><div class="line">+----+------+-----+------+----------+---------+----+----+</div></pre></td></tr></table></figure><ol><li>支持Schema的合并</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//准备两个df，两种不同的schema</div><div class="line">val df1 = sc.makeRDD(1 to 5).map(i =&gt; (i, i*2)).toDF(&quot;single&quot;, &quot;double&quot;)</div><div class="line">df1.write.mode(&quot;overwrite&quot;).save(&quot;/root/tmp_files/test_table/key=1&quot;)</div><div class="line"></div><div class="line">val df2 = sc.makeRDD(6 to 10).map(i =&gt; (i, i*3)).toDF(&quot;single&quot;, &quot;triple&quot;)</div><div class="line">df2.write.mode(&quot;overwrite&quot;).save(&quot;/root/tmp_files/test_table/key=2&quot;)</div></pre></td></tr></table></figure><p>合并操作：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> df3 = spark.read.parquet(<span class="string">"/root/tmp_files/test_table"</span>)</div><div class="line">df3: org.apache.spark.sql.<span class="type">DataFrame</span> = [single: int, double: int ... <span class="number">1</span> more field]</div><div class="line"></div><div class="line">scala&gt; df3.show</div><div class="line">+------+------+---+</div><div class="line">|single|double|key|</div><div class="line">+------+------+---+</div><div class="line">|     <span class="number">8</span>|  <span class="literal">null</span>|  <span class="number">2</span>|</div><div class="line">|     <span class="number">9</span>|  <span class="literal">null</span>|  <span class="number">2</span>|</div><div class="line">|    <span class="number">10</span>|  <span class="literal">null</span>|  <span class="number">2</span>|</div><div class="line">|     <span class="number">3</span>|     <span class="number">6</span>|  <span class="number">1</span>|</div><div class="line">|     <span class="number">4</span>|     <span class="number">8</span>|  <span class="number">1</span>|</div><div class="line">|     <span class="number">5</span>|    <span class="number">10</span>|  <span class="number">1</span>|</div><div class="line">|     <span class="number">6</span>|  <span class="literal">null</span>|  <span class="number">2</span>|</div><div class="line">|     <span class="number">7</span>|  <span class="literal">null</span>|  <span class="number">2</span>|</div><div class="line">|     <span class="number">1</span>|     <span class="number">2</span>|  <span class="number">1</span>|</div><div class="line">|     <span class="number">2</span>|     <span class="number">4</span>|  <span class="number">1</span>|</div><div class="line">+------+------+---+</div><div class="line"></div><div class="line">scala&gt; df3.printSchema</div><div class="line">root</div><div class="line"> |-- single: integer (nullable = <span class="literal">true</span>)</div><div class="line"> |-- double: integer (nullable = <span class="literal">true</span>)</div><div class="line"> |-- key: integer (nullable = <span class="literal">true</span>)</div><div class="line"></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> df4 = spark.read.option(<span class="string">"mergeSchema"</span>, <span class="literal">true</span>).parquet(<span class="string">"/root/tmp_files/test_table"</span>)</div><div class="line">df4: org.apache.spark.sql.<span class="type">DataFrame</span> = [single: int, double: int ... <span class="number">2</span> more fields]</div><div class="line"></div><div class="line">scala&gt; df4.printSchema</div><div class="line">root</div><div class="line"> |-- single: integer (nullable = <span class="literal">true</span>)</div><div class="line"> |-- double: integer (nullable = <span class="literal">true</span>)</div><div class="line"> |-- triple: integer (nullable = <span class="literal">true</span>)</div><div class="line"> |-- key: integer (nullable = <span class="literal">true</span>)</div><div class="line"></div><div class="line">scala&gt; df4.show</div><div class="line">+------+------+------+---+</div><div class="line">|single|double|triple|key|</div><div class="line">+------+------+------+---+</div><div class="line">|     <span class="number">8</span>|  <span class="literal">null</span>|    <span class="number">24</span>|  <span class="number">2</span>|</div><div class="line">|     <span class="number">9</span>|  <span class="literal">null</span>|    <span class="number">27</span>|  <span class="number">2</span>|</div><div class="line">|    <span class="number">10</span>|  <span class="literal">null</span>|    <span class="number">30</span>|  <span class="number">2</span>|</div><div class="line">|     <span class="number">3</span>|     <span class="number">6</span>|  <span class="literal">null</span>|  <span class="number">1</span>|</div><div class="line">|     <span class="number">4</span>|     <span class="number">8</span>|  <span class="literal">null</span>|  <span class="number">1</span>|</div><div class="line">|     <span class="number">5</span>|    <span class="number">10</span>|  <span class="literal">null</span>|  <span class="number">1</span>|</div><div class="line">|     <span class="number">6</span>|  <span class="literal">null</span>|    <span class="number">18</span>|  <span class="number">2</span>|</div><div class="line">|     <span class="number">7</span>|  <span class="literal">null</span>|    <span class="number">21</span>|  <span class="number">2</span>|</div><div class="line">|     <span class="number">1</span>|     <span class="number">2</span>|  <span class="literal">null</span>|  <span class="number">1</span>|</div><div class="line">|     <span class="number">2</span>|     <span class="number">4</span>|  <span class="literal">null</span>|  <span class="number">1</span>|</div><div class="line">+------+------+------+---+</div></pre></td></tr></table></figure><p>解释：第二种方法进行合并的时候，两个文件夹名分别为<code>key=1</code>、<code>key=2</code>,<code>key</code>会作为最后一列的列名，1,2分别作为他的值，倘若文件名分别为<code>gakki=1</code>,<code>gakki=2</code>,那么对应的<code>gakki</code>为列名,倘若文件夹前半部分不一致，会报错</p><h2 id="3-3、Json文件"><a href="#3-3、Json文件" class="headerlink" title="3.3、Json文件"></a>3.3、Json文件</h2><p>读取json文件，生成DataFrame</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> peopleDF = spark.read.json(<span class="string">"/root/tmp_files/people.json"</span>)</div><div class="line">peopleDF: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint, name: string]</div><div class="line"></div><div class="line">scala&gt; peopleDF.show</div><div class="line">+----+-------+</div><div class="line">| age|   name|</div><div class="line">+----+-------+</div><div class="line">|<span class="literal">null</span>|<span class="type">Michael</span>|</div><div class="line">|  <span class="number">30</span>|   <span class="type">Andy</span>|</div><div class="line">|  <span class="number">19</span>| <span class="type">Justin</span>|</div><div class="line">+----+-------+</div><div class="line"></div><div class="line"></div><div class="line">scala&gt; peopleDF.createOrReplaceTempView(<span class="string">"people"</span>)</div><div class="line"></div><div class="line">scala&gt; spark.sql(<span class="string">"select * from people"</span>).show</div><div class="line">+----+-------+</div><div class="line">| age|   name|</div><div class="line">+----+-------+</div><div class="line">|<span class="literal">null</span>|<span class="type">Michael</span>|</div><div class="line">|  <span class="number">30</span>|   <span class="type">Andy</span>|</div><div class="line">|  <span class="number">19</span>| <span class="type">Justin</span>|</div><div class="line">+----+-------+</div></pre></td></tr></table></figure><p>补充：Spark SQL 支持统一的访问接口。对于不同的数据源，读取进来，生成DataFrame后，操作完全一样。</p><h2 id="3-4、使用JDBC"><a href="#3-4、使用JDBC" class="headerlink" title="3.4、使用JDBC"></a>3.4、使用JDBC</h2><ol><li>启动shell时得加载jar包</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">./spark-shell </div><div class="line">--master spark:<span class="comment">//node01:7077 </span></div><div class="line">--jars /root/tmp_files/mysql-connector-java<span class="number">-8.0</span><span class="number">.11</span>.jar </div><div class="line">--driver-<span class="class"><span class="keyword">class</span><span class="title">-path</span> <span class="title">/root/tmp_files/mysql-connector-java-8</span>.0.11.<span class="title">jar</span></span></div></pre></td></tr></table></figure><p>方式一：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> mysqlDF = spark.read.format(<span class="string">"jdbc"</span>)</div><div class="line">.option(<span class="string">"url"</span>,<span class="string">"jdbc:mysql://node01:3306/myTest?serverTimezone=UTC&amp;characterEncoding=utf-8"</span>)</div><div class="line">.option(<span class="string">"user"</span>,<span class="string">"root"</span>)</div><div class="line">.option(<span class="string">"password"</span>,<span class="string">"root"</span>)</div><div class="line">.option(<span class="string">"dbtable"</span>,<span class="string">"Course"</span>)</div><div class="line">.load</div></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; mysqlDF.show</div><div class="line">+----+------+----+</div><div class="line">|c_id|c_name|t_id|</div><div class="line">+----+------+----+</div><div class="line">|  <span class="number">01</span>|    语文|  <span class="number">02</span>|</div><div class="line">|  <span class="number">02</span>|    数学|  <span class="number">01</span>|</div><div class="line">|  <span class="number">03</span>|    英语|  <span class="number">03</span>|</div><div class="line">+----+------+----+</div></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">import</span> java.util._</div><div class="line"><span class="keyword">import</span> java.util._</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> mysqlPros = <span class="keyword">new</span> <span class="type">Properties</span>()</div><div class="line">mysqlPros: java.util.<span class="type">Properties</span> = &#123;&#125;</div><div class="line"></div><div class="line">scala&gt; mysqlPros.setProperty(<span class="string">"user"</span>,<span class="string">"root"</span>)</div><div class="line">res3: <span class="type">Object</span> = <span class="literal">null</span></div><div class="line"></div><div class="line">scala&gt; mysqlPros.setProperty(<span class="string">"password"</span>,<span class="string">"root"</span>)</div><div class="line">res4: <span class="type">Object</span> = <span class="literal">null</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> mysqlDF1 = spark.read.jdbc(<span class="string">"jdbc:mysql://node01:3306/myTest?serverTimezone=UTC&amp;characterEncoding=utf-8"</span>, <span class="string">"Score"</span>, mysqlPros)</div><div class="line">mysqlDF1: org.apache.spark.sql.<span class="type">DataFrame</span> = [s_id: string, c_id: string ... <span class="number">1</span> more field]</div><div class="line"></div><div class="line">scala&gt; mysqlDF1.show</div><div class="line">+----+----+-------+</div><div class="line">|s_id|c_id|s_score|</div><div class="line">+----+----+-------+</div><div class="line">|  <span class="number">01</span>|  <span class="number">01</span>|     <span class="number">80</span>|</div><div class="line">|  <span class="number">01</span>|  <span class="number">02</span>|     <span class="number">90</span>|</div><div class="line">|  <span class="number">01</span>|  <span class="number">03</span>|     <span class="number">99</span>|</div><div class="line">|  <span class="number">02</span>|  <span class="number">01</span>|     <span class="number">70</span>|</div><div class="line">|  <span class="number">02</span>|  <span class="number">02</span>|     <span class="number">60</span>|</div><div class="line">|  <span class="number">02</span>|  <span class="number">03</span>|     <span class="number">80</span>|</div><div class="line">|  <span class="number">03</span>|  <span class="number">01</span>|     <span class="number">80</span>|</div><div class="line">|  <span class="number">03</span>|  <span class="number">02</span>|     <span class="number">80</span>|</div><div class="line">|  <span class="number">03</span>|  <span class="number">03</span>|     <span class="number">80</span>|</div><div class="line">|  <span class="number">04</span>|  <span class="number">01</span>|     <span class="number">50</span>|</div><div class="line">|  <span class="number">04</span>|  <span class="number">02</span>|     <span class="number">30</span>|</div><div class="line">|  <span class="number">04</span>|  <span class="number">03</span>|     <span class="number">20</span>|</div><div class="line">|  <span class="number">05</span>|  <span class="number">01</span>|     <span class="number">76</span>|</div><div class="line">|  <span class="number">05</span>|  <span class="number">02</span>|     <span class="number">87</span>|</div><div class="line">|  <span class="number">06</span>|  <span class="number">01</span>|     <span class="number">31</span>|</div><div class="line">|  <span class="number">06</span>|  <span class="number">03</span>|     <span class="number">34</span>|</div><div class="line">|  <span class="number">07</span>|  <span class="number">02</span>|     <span class="number">89</span>|</div><div class="line">|  <span class="number">07</span>|  <span class="number">03</span>|     <span class="number">98</span>|</div><div class="line">+----+----+-------+</div></pre></td></tr></table></figure><h2 id="3-5、使用Hive"><a href="#3-5、使用Hive" class="headerlink" title="3.5、使用Hive"></a>3.5、使用Hive</h2><h1 id="4、IDEA中开发Sqpark-SQL程序"><a href="#4、IDEA中开发Sqpark-SQL程序" class="headerlink" title="4、IDEA中开发Sqpark SQL程序"></a>4、IDEA中开发Sqpark SQL程序</h1><h2 id="4-1、使用StructType创建DF"><a href="#4-1、使用StructType创建DF" class="headerlink" title="4.1、使用StructType创建DF"></a>4.1、使用StructType创建DF</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0410</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.log4j.&#123;<span class="type">Level</span>, <span class="type">Logger</span>&#125;</div><div class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</div><div class="line"><span class="keyword">import</span> org.apache.spark.sql.types.&#123;<span class="type">IntegerType</span>, <span class="type">StringType</span>, <span class="type">StructField</span>, <span class="type">StructType</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 创建DataFrame StructType方式</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo01</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.apache.spark"</span>).setLevel(<span class="type">Level</span>.<span class="type">ERROR</span>)</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.eclipse.jetty.server"</span>).setLevel(<span class="type">Level</span>.<span class="type">OFF</span>)</div><div class="line"></div><div class="line">    <span class="comment">//1、创建Spark Session对象</span></div><div class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().master(<span class="string">"local"</span>).appName(<span class="string">"Demo01"</span>).getOrCreate()</div><div class="line"></div><div class="line">    <span class="comment">//2、从指定的地址创建RDD对象</span></div><div class="line">    <span class="keyword">val</span> personRDD = spark.sparkContext.textFile(<span class="string">"H:\\temp\\tmp_files\\dept.txt"</span>).map(_.split(<span class="string">"\t"</span>))</div><div class="line"></div><div class="line">    <span class="comment">//通过StructType方式指定Schema</span></div><div class="line">    <span class="keyword">val</span> schema = <span class="type">StructType</span>(</div><div class="line">      <span class="type">List</span>(</div><div class="line">        <span class="type">StructField</span>(<span class="string">"id"</span>, <span class="type">IntegerType</span>),</div><div class="line">        <span class="type">StructField</span>(<span class="string">"status"</span>, <span class="type">StringType</span>),</div><div class="line">        <span class="type">StructField</span>(<span class="string">"city"</span>, <span class="type">StringType</span>)))</div><div class="line"></div><div class="line">    <span class="comment">//将RDD映射到rowRDD上</span></div><div class="line">    <span class="keyword">val</span> rowRDD = personRDD.map(p =&gt; <span class="type">Row</span>(p(<span class="number">0</span>).toInt, p(<span class="number">1</span>), p(<span class="number">2</span>)))</div><div class="line">    <span class="keyword">val</span> personDataFrame = spark.createDataFrame(rowRDD, schema)</div><div class="line"></div><div class="line">    <span class="comment">//注册视图</span></div><div class="line">    personDataFrame.createOrReplaceTempView(<span class="string">"t_person"</span>)</div><div class="line"></div><div class="line">    <span class="comment">//执行SQL语句</span></div><div class="line">    <span class="keyword">val</span> df = spark.sql(<span class="string">"select * from t_person"</span>)</div><div class="line"></div><div class="line">    df.show()</div><div class="line"></div><div class="line">    spark.stop()</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-2、使用case-class创建DF"><a href="#4-2、使用case-class创建DF" class="headerlink" title="4.2、使用case class创建DF"></a>4.2、使用case class创建DF</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0410</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.log4j.&#123;<span class="type">Level</span>, <span class="type">Logger</span>&#125;</div><div class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</div><div class="line"><span class="keyword">import</span> org.apache.spark.sql.types.&#123;<span class="type">IntegerType</span>, <span class="type">StringType</span>, <span class="type">StructField</span>, <span class="type">StructType</span>&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo02</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.apache.spark"</span>).setLevel(<span class="type">Level</span>.<span class="type">ERROR</span>)</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.eclipse.jetty.server"</span>).setLevel(<span class="type">Level</span>.<span class="type">OFF</span>)</div><div class="line"></div><div class="line">    <span class="comment">//1、创建Spark Session对象</span></div><div class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().master(<span class="string">"local"</span>).appName(<span class="string">"Demo01"</span>).getOrCreate()</div><div class="line"></div><div class="line">    <span class="comment">//2、从指定的地址创建RDD对象</span></div><div class="line">    <span class="keyword">val</span> lineRDD = spark.sparkContext.textFile(<span class="string">"H:\\temp\\tmp_files\\dept.txt"</span>).map(_.split(<span class="string">"\t"</span>))</div><div class="line"></div><div class="line">    <span class="comment">//4、把数据和case class做匹配</span></div><div class="line">    <span class="keyword">val</span> personRDD = lineRDD.map(x =&gt; <span class="type">Person</span>(x(<span class="number">0</span>).toInt, x(<span class="number">1</span>), x(<span class="number">2</span>)))</div><div class="line"></div><div class="line">    <span class="comment">//5、生成DataFrame</span></div><div class="line">    <span class="keyword">import</span> spark.sqlContext.implicits._</div><div class="line">    <span class="keyword">val</span> personDF = personRDD.toDF()</div><div class="line"></div><div class="line">    <span class="comment">//6、注册视图，执行SQL</span></div><div class="line">    personDF.createOrReplaceTempView(<span class="string">"t_person"</span>)</div><div class="line"></div><div class="line">    spark.sql(<span class="string">"select * from t_person order by id desc"</span>).show()</div><div class="line"></div><div class="line">    spark.stop()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//3、定义case class</span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">id:<span class="type">Int</span>, status:<span class="type">String</span>, ct:<span class="type">String</span></span>)</span></div></pre></td></tr></table></figure><h2 id="4-3、结果写入到MYSQL"><a href="#4-3、结果写入到MYSQL" class="headerlink" title="4.3、结果写入到MYSQL"></a>4.3、结果写入到MYSQL</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0410</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.<span class="type">Properties</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.log4j.&#123;<span class="type">Level</span>, <span class="type">Logger</span>&#125;</div><div class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</div><div class="line"><span class="keyword">import</span> org.apache.spark.sql.types.&#123;<span class="type">IntegerType</span>, <span class="type">StringType</span>, <span class="type">StructField</span>, <span class="type">StructType</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 结果写入到Mysql</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo03</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.apache.spark"</span>).setLevel(<span class="type">Level</span>.<span class="type">ERROR</span>)</div><div class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org.eclipse.jetty.server"</span>).setLevel(<span class="type">Level</span>.<span class="type">OFF</span>)</div><div class="line"></div><div class="line">    <span class="comment">//1、创建Spark Session对象</span></div><div class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().master(<span class="string">"local"</span>).appName(<span class="string">"Demo01"</span>).getOrCreate()</div><div class="line"></div><div class="line">    <span class="comment">//2、从指定的地址创建RDD对象</span></div><div class="line">    <span class="keyword">val</span> lineRDD = spark.sparkContext.textFile(<span class="string">"H:\\temp\\tmp_files\\dept.txt"</span>).map(_.split(<span class="string">"\t"</span>))</div><div class="line"></div><div class="line">    <span class="comment">//3、创建DF</span></div><div class="line">    <span class="keyword">val</span> schema = <span class="type">StructType</span>(</div><div class="line">      <span class="type">List</span>(</div><div class="line">        <span class="type">StructField</span>(<span class="string">"id"</span>, <span class="type">IntegerType</span>),</div><div class="line">        <span class="type">StructField</span>(<span class="string">"status"</span>, <span class="type">StringType</span>),</div><div class="line">        <span class="type">StructField</span>(<span class="string">"city"</span>, <span class="type">StringType</span>)))</div><div class="line"></div><div class="line">    <span class="comment">//将RDD映射到rowRDD上</span></div><div class="line">    <span class="keyword">val</span> rowRDD = lineRDD.map(p =&gt; <span class="type">Row</span>(p(<span class="number">0</span>).toInt, p(<span class="number">1</span>), p(<span class="number">2</span>)))</div><div class="line">    <span class="keyword">val</span> personDataFrame = spark.createDataFrame(rowRDD, schema)</div><div class="line"></div><div class="line">    <span class="comment">//4、将结果注册成表</span></div><div class="line">    personDataFrame.createOrReplaceTempView(<span class="string">"myPerson"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">val</span> result = spark.sql(<span class="string">"select * from myPerson"</span>)</div><div class="line">    result.show()</div><div class="line"></div><div class="line">    <span class="comment">//5、结果存入mysql</span></div><div class="line">    <span class="keyword">val</span> props = <span class="keyword">new</span> <span class="type">Properties</span>()</div><div class="line">    props.setProperty(<span class="string">"user"</span>,<span class="string">"root"</span>)</div><div class="line">    props.setProperty(<span class="string">"password"</span>,<span class="string">"root"</span>)</div><div class="line">    result.write.mode(<span class="string">"append"</span>).jdbc(<span class="string">"jdbc:mysql://localhost:3306/dbtable?serverTimezone=UTC&amp;characterEncoding=utf-8"</span>, <span class="string">"emp"</span>, props)</div><div class="line"></div><div class="line">    spark.stop()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意事项：</p><ol><li>提前将jdbc的jar包导入开发环境</li><li>StructType中的变量名和表中保持一致</li></ol><h2 id="4-4、从Hive读取数据写入Mysql"><a href="#4-4、从Hive读取数据写入Mysql" class="headerlink" title="4.4、从Hive读取数据写入Mysql"></a>4.4、从Hive读取数据写入Mysql</h2><h1 id="5、性能优化"><a href="#5、性能优化" class="headerlink" title="5、性能优化"></a>5、性能优化</h1><h2 id="5-1、把内存中缓存表的数据"><a href="#5-1、把内存中缓存表的数据" class="headerlink" title="5.1、把内存中缓存表的数据"></a>5.1、把内存中缓存表的数据</h2><p>直接读取内存打的值，来提高性能</p><p>RDD中如何缓存：rdd.cache  或者 rdd.persist</p><p>Spark SQL中，使用SparkSession.sqlContext.cacheTable</p><p>Spark中所有context对象</p><ul><li>sparkContext：Spark Core中</li><li>sql Context：SparkSQL</li><li>Streaming Context：SparkStreaming</li></ul><p>统一起来：SparkSession</p><p>启动spark-shell</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./spark-shell --master spark:<span class="comment">//node01:7077 --jars /opt/modules/spark-2.1.0/jars/mysql-connector-java-8.0.11.jar</span></div></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> mysqlDF = spark.read.format(<span class="string">"jdbc"</span>).option(<span class="string">"driver"</span>,<span class="string">"com.mysql.jdbc.Driver"</span>).option(<span class="string">"url"</span>,<span class="string">"jdbc:mysql://node01:3306/myTest?serverTimezone=UTC&amp;characterEncoding=utf-8"</span>).option(<span class="string">"user"</span>,<span class="string">"root"</span>).option(<span class="string">"password"</span>,<span class="string">"root"</span>).option(<span class="string">"dbtable"</span>,<span class="string">"Student"</span>).load</div><div class="line"></div><div class="line"><span class="comment">//7s</span></div><div class="line">spark.sql(<span class="string">"select * from person"</span>).show</div><div class="line"></div><div class="line"><span class="comment">//标识可以被缓存</span></div><div class="line">mysqlDF.createOrReplaceTempView(<span class="string">"person"</span>)</div><div class="line"></div><div class="line"><span class="comment">//0.9s --正常读取</span></div><div class="line">spark.sql(<span class="string">"select * from person"</span>).show</div><div class="line"></div><div class="line"><span class="comment">//0.2s --从内存中读取</span></div><div class="line">spark.sql(<span class="string">"select * from person"</span>).show</div></pre></td></tr></table></figure><p>运行时间：</p><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/TIM%E6%88%AA%E5%9B%BE20190414172900.png" alt="运行时间"></p><h2 id="5-2、性能优化的参数"><a href="#5-2、性能优化的参数" class="headerlink" title="5.2、性能优化的参数"></a>5.2、性能优化的参数</h2><p>将数据缓存到内存中的相关优化参数</p><ul><li>spark.sql.inMemoryColumnarStorage.compressed<ul><li>默认为 true</li><li>Spark SQL 将会基于统计信息自动地为每一列选择一种压缩编码方式。</li></ul></li><li>spark.sql.inMemoryColumnarStorage.batchSize<ul><li>默认值：10000</li><li>缓存批处理大小。缓存数据时, 较大的批处理大小可以提高内存利用率和压缩率，但同时也会带来OOM（Out Of Memory）的风险。</li></ul></li></ul><p>其他性能相关的配置选项（不过不推荐手动修改，可能在后续版本自动的自适应修改）</p><ul><li>spark.sql.files.maxPartitionBytes<ul><li>默认值：128 MB</li><li>读取文件时单个分区可容纳的最大字节数</li></ul></li><li>spark.sql.files.openCostInBytes<ul><li>默认值：4M</li><li>打开文件的估算成本, 按照同一时间能够扫描的字节数来测量。当往一个分区写入多个文件的时候会使用。高估更好, 这样的话小文件分区将比大文件分区更快 (先被调度)。</li></ul></li><li>spark.sql.autoBroadcastJoinThreshold<ul><li>默认值：10M</li><li>用于配置一个表在执行 join 操作时能够广播给所有 worker 节点的最大字节大小。通过将这个值设置为 -1 可以禁用广播。注意，当前数据统计仅支持已经运行了 ANALYZE TABLE <tablename> COMPUTE STATISTICS noscan 命令的 Hive Metastore 表。</tablename></li></ul></li><li>spark.sql.shuffle.partitions<ul><li>默认值：200</li><li>用于配置 join 或聚合操作混洗（shuffle）数据时使用的分区数。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、Spark-SQL基础&quot;&gt;&lt;a href=&quot;#1、Spark-SQL基础&quot; class=&quot;headerlink&quot; title=&quot;1、Spark SQL基础&quot;&gt;&lt;/a&gt;1、Spark SQL基础&lt;/h1&gt;&lt;h2 id=&quot;1、Spark-SQL基础-1&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="Spark" scheme="rabbitluluu.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark进阶--场景实战</title>
    <link href="rabbitluluu.github.io/2019/04/08/Spark%E8%BF%9B%E9%98%B6-%E5%9C%BA%E6%99%AF%E5%AE%9E%E6%88%98/"/>
    <id>rabbitluluu.github.io/2019/04/08/Spark进阶-场景实战/</id>
    <published>2019-04-08T06:13:19.000Z</published>
    <updated>2019-04-15T01:23:32.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、日志统计"><a href="#1、日志统计" class="headerlink" title="1、日志统计"></a>1、日志统计</h2><p>需求：统计最多次数被访问的网页信息</p><p>数据<code>html_log.txt</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">192.168.88.1 - - [30/Jul/2017:12:54:37 +0800] &quot;GET /MyDemoWeb/oracle.jsp HTTP/1.1&quot; 200 242</div><div class="line">192.168.88.1 - - [30/Jul/2017:12:54:37 +0800] &quot;GET /MyDemoWeb/spark.jsp HTTP/1.1&quot; 200 242</div><div class="line">192.168.88.1 - - [30/Jul/2017:12:54:37 +0800] &quot;GET /MyDemoWeb/oracle.jsp HTTP/1.1&quot; 200 242</div><div class="line">192.168.88.1 - - [30/Jul/2017:12:54:37 +0800] &quot;GET /MyDemoWeb/oracle.jsp HTTP/1.1&quot; 200 242</div><div class="line">192.168.88.1 - - [30/Jul/2017:12:54:37 +0800] &quot;GET /MyDemoWeb/hadoop.jsp HTTP/1.1&quot; 200 242</div><div class="line">192.168.88.1 - - [30/Jul/2017:12:54:37 +0800] &quot;GET /MyDemoWeb/oracle.jsp HTTP/1.1&quot; 200 242</div><div class="line">192.168.88.1 - - [30/Jul/2017:12:54:37 +0800] &quot;GET /MyDemoWeb/spark.jsp HTTP/1.1&quot; 200 242</div><div class="line">192.168.88.1 - - [30/Jul/2017:12:54:37 +0800] &quot;GET /MyDemoWeb/oracle.jsp HTTP/1.1&quot; 200 242</div><div class="line">192.168.88.1 - - [30/Jul/2017:12:54:37 +0800] &quot;GET /MyDemoWeb/flume.jsp HTTP/1.1&quot; 200 242</div><div class="line">192.168.88.1 - - [30/Jul/2017:12:54:37 +0800] &quot;GET /MyDemoWeb/oracle.jsp HTTP/1.1&quot; 200 242</div><div class="line">192.168.88.1 - - [30/Jul/2017:12:54:37 +0800] &quot;GET /MyDemoWeb/flume.jsp HTTP/1.1&quot; 200 242</div><div class="line">192.168.88.1 - - [30/Jul/2017:12:54:37 +0800] &quot;GET /MyDemoWeb/spark.jsp HTTP/1.1&quot; 200 242</div></pre></td></tr></table></figure><p>代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xyz.llsean</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">TomCatLogCount</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>()</div><div class="line">    .setAppName(<span class="string">"my log count"</span>)</div><div class="line">    .setMaster(<span class="string">"local"</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">val</span> sc =<span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     *读取日志并解析</div><div class="line">     *  192.168.88.1 - - [30/Jul/2017:12:54:37 +0800] "GET /MyDemoWeb/oracle.jsp HTTP/1.1" 200 242</div><div class="line">     */</div><div class="line">    <span class="keyword">val</span> rdd1 = sc.textFile(<span class="string">"H:\\html_log.txt"</span>)</div><div class="line">    .map(</div><div class="line">      line =&gt; &#123;</div><div class="line">        <span class="comment">//解析字符串，得到jsp的名字</span></div><div class="line">        <span class="comment">//解析两个引号之间的字符串</span></div><div class="line">        <span class="keyword">val</span> index1 = line.indexOf(<span class="string">"\""</span>)</div><div class="line">        <span class="keyword">val</span> index2 = line.lastIndexOf(<span class="string">"\""</span>)</div><div class="line">        <span class="comment">//取到引号之间字符串  GET /MyDemoWeb/oracle.jsp HTTP/1.1</span></div><div class="line">        <span class="keyword">val</span> str1 = line.substring(index1+<span class="number">1</span>,index2)</div><div class="line">        </div><div class="line">        <span class="comment">//取到空格</span></div><div class="line">        <span class="keyword">val</span> index3 = str1.indexOf(<span class="string">" "</span>)</div><div class="line">        <span class="keyword">val</span> index4 = str1.lastIndexOf(<span class="string">" "</span>)</div><div class="line">        <span class="keyword">val</span> str2 = str1.substring(index3, index4)</div><div class="line">        </div><div class="line">        <span class="comment">//取到jsp名字</span></div><div class="line">        <span class="keyword">val</span> jspName = str2.substring(str2.lastIndexOf(<span class="string">"/"</span>))</div><div class="line">        </div><div class="line">        (jspName, <span class="number">1</span>)</div><div class="line">      &#125;    </div><div class="line">    )</div><div class="line">    <span class="comment">//统计每一个jsp的次数</span></div><div class="line">    <span class="keyword">val</span> rdd2 = rdd1.reduceByKey(_ + _)</div><div class="line">    </div><div class="line">    <span class="comment">//使用value排序</span></div><div class="line">    <span class="keyword">val</span> rdd3 = rdd2.sortBy(_._2, <span class="literal">false</span>)</div><div class="line">    </div><div class="line">    rdd3.take(<span class="number">2</span>).foreach(println)</div><div class="line">    </div><div class="line">    sc.stop()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2、创建自定义分区（很常用！）"><a href="#2、创建自定义分区（很常用！）" class="headerlink" title="2、创建自定义分区（很常用！）"></a>2、创建自定义分区（很常用！）</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xyz.llsean</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">Partitioner</span></div><div class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">HashMap</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">TomCatLogPartition</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"my Log Partition"</span>).setMaster(<span class="string">"local"</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</div><div class="line">    </div><div class="line">    <span class="keyword">val</span> rdd1 = sc.textFile(<span class="string">"H:\\html_log.txt"</span>)</div><div class="line">    .map(</div><div class="line">      line =&gt; &#123;</div><div class="line">        <span class="comment">//解析字符串，得到jsp的名字</span></div><div class="line">        <span class="comment">//解析两个引号之间的字符串</span></div><div class="line">        <span class="keyword">val</span> index1 = line.indexOf(<span class="string">"\""</span>)</div><div class="line">        <span class="keyword">val</span> index2 = line.lastIndexOf(<span class="string">"\""</span>)</div><div class="line">        <span class="comment">//取到引号之间字符串  GET /MyDemoWeb/oracle.jsp HTTP/1.1</span></div><div class="line">        <span class="keyword">val</span> str1 = line.substring(index1+<span class="number">1</span>,index2)</div><div class="line">        </div><div class="line">        <span class="comment">//取到空格</span></div><div class="line">        <span class="keyword">val</span> index3 = str1.indexOf(<span class="string">" "</span>)</div><div class="line">        <span class="keyword">val</span> index4 = str1.lastIndexOf(<span class="string">" "</span>)</div><div class="line">        <span class="keyword">val</span> str2 = str1.substring(index3, index4)</div><div class="line">        </div><div class="line">        <span class="comment">//取到jsp名字</span></div><div class="line">        <span class="keyword">val</span> jspName = str2.substring(str2.lastIndexOf(<span class="string">"/"</span>))</div><div class="line">        </div><div class="line">        (jspName, line)</div><div class="line">      &#125;    </div><div class="line">   )</div><div class="line">    <span class="comment">//定义分区规则</span></div><div class="line">    <span class="comment">//得到不重复的jsp名字</span></div><div class="line">    <span class="keyword">val</span> rdd2 = rdd1.map(_._1).distinct().collect</div><div class="line">    </div><div class="line">    <span class="comment">//创建分区规则</span></div><div class="line">    <span class="keyword">val</span> myPartition = <span class="keyword">new</span> myWebPartitions(rdd2)</div><div class="line">    <span class="keyword">val</span> rdd3 = rdd1.partitionBy(myPartition)</div><div class="line">    </div><div class="line">    <span class="comment">//输出rdd3</span></div><div class="line">    rdd3.saveAsTextFile(<span class="string">"H:\\temp\\testPartition"</span>)</div><div class="line">    </div><div class="line">    sc.stop()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">myWebPartitions</span>(<span class="params">jspList : <span class="type">Array</span>[<span class="type">String</span>]</span>) <span class="keyword">extends</span> <span class="title">Partitioner</span></span>&#123;</div><div class="line">    <span class="comment">//定义一个map来保存分区条件 String代表jsp的名字 Int代表序号</span></div><div class="line">  <span class="keyword">val</span> partitionMap = <span class="keyword">new</span> <span class="type">HashMap</span>[<span class="type">String</span>,<span class="type">Int</span>]</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> partId = <span class="number">0</span> <span class="comment">//初始分区号</span></div><div class="line">  </div><div class="line">  <span class="keyword">for</span>(jsp &lt;- jspList)&#123;</div><div class="line">    partitionMap.put(jsp, partId)</div><div class="line">    partId  += <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//返回有多少分区</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">numPartitions</span></span>:<span class="type">Int</span> = partitionMap.size</div><div class="line">  </div><div class="line">  <span class="comment">//根据jsp返回对应的分区</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getPartition</span></span>(key : <span class="type">Any</span>) : <span class="type">Int</span> = partitionMap.getOrElse(key.toString, <span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3、使用JDBCRDD操作数据库-不常用"><a href="#3、使用JDBCRDD操作数据库-不常用" class="headerlink" title="3、使用JDBCRDD操作数据库(不常用)"></a>3、使用JDBCRDD操作数据库(不常用)</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、日志统计&quot;&gt;&lt;a href=&quot;#1、日志统计&quot; class=&quot;headerlink&quot; title=&quot;1、日志统计&quot;&gt;&lt;/a&gt;1、日志统计&lt;/h2&gt;&lt;p&gt;需求：统计最多次数被访问的网页信息&lt;/p&gt;
&lt;p&gt;数据&lt;code&gt;html_log.txt&lt;/code&gt;：&lt;
      
    
    </summary>
    
    
      <category term="Spark" scheme="rabbitluluu.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark进阶--RDD高级算子</title>
    <link href="rabbitluluu.github.io/2019/04/08/Spark%E8%BF%9B%E9%98%B6-RDD%E9%AB%98%E7%BA%A7%E7%AE%97%E5%AD%90/"/>
    <id>rabbitluluu.github.io/2019/04/08/Spark进阶-RDD高级算子/</id>
    <published>2019-04-08T06:13:02.000Z</published>
    <updated>2019-04-15T01:22:34.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RDD高级算子"><a href="#RDD高级算子" class="headerlink" title="RDD高级算子"></a>RDD高级算子</h1><h2 id="1、mapPartitionsWithIndex"><a href="#1、mapPartitionsWithIndex" class="headerlink" title="1、mapPartitionsWithIndex"></a>1、<strong>mapPartitionsWithIndex</strong></h2><p>功能：对RDD中每个分区（带有下标）进行操作，下标用index标识，通过这个算子，我们可以获取分区号</p><p>源码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapPartitionsWithIndex</span></span>[<span class="type">U</span>](</div><div class="line">    f: (<span class="type">Int</span>, <span class="type">Iterator</span>[<span class="type">T</span>]) ⇒ <span class="type">Iterator</span>[<span class="type">U</span>], preservesPartitioning: <span class="type">Boolean</span> = <span class="literal">false</span>)</div><div class="line">(<span class="keyword">implicit</span> arg0: <span class="type">ClassTag</span>[<span class="type">U</span>]): <span class="type">RDD</span>[<span class="type">U</span>]</div></pre></td></tr></table></figure><p>参数：f是个函数，参数 f 中第一个参数是Int，代表分区号，第二个Iterator[T]代表分区中的元素</p><p>举例：将分区中的元素，包括分区号都打印出来</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>),<span class="number">3</span>)</div><div class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">2</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></div><div class="line"></div><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">fun1</span></span>(index:<span class="type">Int</span>, iter:<span class="type">Iterator</span>[<span class="type">Int</span>]) : <span class="type">Iterator</span>[<span class="type">String</span>] = &#123;</div><div class="line">     | iter.toList.map(x =&gt; <span class="string">"[partId="</span> + index + <span class="string">",value="</span> + x + <span class="string">"]"</span>).iterator</div><div class="line">     | &#125;</div><div class="line">fun1: (index: <span class="type">Int</span>, iter: <span class="type">Iterator</span>[<span class="type">Int</span>])<span class="type">Iterator</span>[<span class="type">String</span>]</div><div class="line"></div><div class="line">scala&gt; rdd1.mapPartitionsWithIndex(fun1).collect</div><div class="line">res3: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(</div><div class="line">    [partId=<span class="number">0</span>,value=<span class="number">1</span>], [partId=<span class="number">0</span>,value=<span class="number">2</span>],</div><div class="line">    [partId=<span class="number">1</span>,value=<span class="number">3</span>], [partId=<span class="number">1</span>,value=<span class="number">4</span>],</div><div class="line">    [partId=<span class="number">2</span>,value=<span class="number">5</span>], [partId=<span class="number">2</span>,value=<span class="number">6</span>], [partId=<span class="number">2</span>,value=<span class="number">7</span>])</div></pre></td></tr></table></figure><h2 id="2、aggregate：聚合操作，类似于分组"><a href="#2、aggregate：聚合操作，类似于分组" class="headerlink" title="2、aggregate：聚合操作，类似于分组"></a>2、<strong>aggregate</strong>：聚合操作，类似于分组</h2><p>先对局部进行聚合操作，在对全局进行聚合操作</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>),<span class="number">2</span>)</div><div class="line">rdd2: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">4</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></div><div class="line"></div><div class="line">scala&gt; rdd2.mapPartitionsWithIndex(func1).collect</div><div class="line">res8: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(</div><div class="line">    [partId=<span class="number">0</span>,value =<span class="number">1</span>], [partId=<span class="number">0</span>,value =<span class="number">2</span>], </div><div class="line">    [partId=<span class="number">1</span>,value =<span class="number">3</span>], [partId=<span class="number">1</span>,value =<span class="number">4</span>], [partId=<span class="number">1</span>,value =<span class="number">5</span>])</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">import</span> scala.math._</div><div class="line"><span class="keyword">import</span> scala.math._</div><div class="line"></div><div class="line">scala&gt; rdd2.aggregate(<span class="number">0</span>)(max(_,_),_+_)</div><div class="line">res6: <span class="type">Int</span> = <span class="number">7</span></div></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C.png" alt="聚合过程"></p><p>说明：</p><p><code>(0)</code>  初始值为0</p><p><code>max(_,_)</code> 局部操作的函数</p><p><code>_+_</code>  全局操作的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; rdd2.aggregate(0)(max(_,_),_+_)</div><div class="line">res8: Int = 7</div><div class="line"></div><div class="line">scala&gt; rdd2.aggregate(100)(max(_,_),_+_)</div><div class="line">res9: Int = 300</div></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/%E5%88%9D%E5%A7%8B%E5%80%BC.png" alt="聚合过程"></p><p>需求：对RDD的元素进行求和</p><p>1、RDD.map</p><p>2、聚合操作（效率更高）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; rdd2.aggregate(<span class="number">0</span>)(_+_,_+_)</div><div class="line">res11: <span class="type">Int</span> = <span class="number">15</span></div><div class="line"></div><div class="line">scala&gt; rdd2.aggregate(<span class="number">10</span>)(_+_,_+_)</div><div class="line">res12: <span class="type">Int</span> = <span class="number">45</span></div></pre></td></tr></table></figure><blockquote><p>对字符串操作</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">List</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>),<span class="number">2</span>)</div><div class="line">rdd2: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">String</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">6</span>] at parallelize at &lt;console&gt;:<span class="number">27</span></div><div class="line"></div><div class="line">scala&gt; rdd2.aggregate(<span class="string">""</span>)(_+_,_+_)</div><div class="line">res13: <span class="type">String</span> = defabc</div><div class="line"></div><div class="line">scala&gt; rdd2.aggregate(<span class="string">"*"</span>)(_+_,_+_)</div><div class="line">res14: <span class="type">String</span> = **<span class="function"><span class="keyword">def</span><span class="title">*abc</span></span></div></pre></td></tr></table></figure><p>结果分析：</p><p>第一步：<em>abc    </em>def</p><p>第二步：<code>**def*abc</code>或者<code>**abc*def</code>, 哪个分区先运算完成拼接在前面</p><blockquote><p>复杂案例：</p><p>案例一</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd3 = sc parallelize(<span class="type">List</span>(<span class="string">"12"</span>,<span class="string">"23"</span>,<span class="string">"345"</span>,<span class="string">"4567"</span>),<span class="number">2</span>)</div><div class="line">rdd3: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">String</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">7</span>] at parallelize at &lt;console&gt;:<span class="number">27</span></div><div class="line"></div><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">fun1</span></span>(index:<span class="type">Int</span>, iter:<span class="type">Iterator</span>[<span class="type">String</span>]) : <span class="type">Iterator</span>[<span class="type">String</span>] = &#123;</div><div class="line">     | iter.toList.map(x =&gt; <span class="string">"[partId="</span> + index + <span class="string">",value="</span> + x + <span class="string">"]"</span>).iterator</div><div class="line">     | &#125;</div><div class="line">fun1: (index: <span class="type">Int</span>, iter: <span class="type">Iterator</span>[<span class="type">String</span>])<span class="type">Iterator</span>[<span class="type">String</span>]</div><div class="line"></div><div class="line">scala&gt; rdd3.mapPartitions</div><div class="line">mapPartitions   mapPartitionsWithIndex</div><div class="line"></div><div class="line">scala&gt; rdd3.mapPartitionsWithIndex(fun1).collect</div><div class="line">res0: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(</div><div class="line">    [partId=<span class="number">0</span>,value=<span class="number">12</span>], [partId=<span class="number">0</span>,value=<span class="number">23</span>], </div><div class="line">    [partId=<span class="number">1</span>,value=<span class="number">345</span>], [partId=<span class="number">1</span>,value=<span class="number">4567</span>])</div><div class="line"></div><div class="line">scala&gt; rdd3.aggregate(<span class="string">""</span>)((x,y) =&gt; math.max(x.length,y.length).toString,(x,y) =&gt; x+y)</div><div class="line">res17: <span class="type">String</span> = <span class="number">24</span></div><div class="line"></div><div class="line">scala&gt; rdd3.aggregate(<span class="string">""</span>)((x,y) =&gt; math.max(x.length,y.length).toString,(x,y) =&gt; x+y)</div><div class="line">res18: <span class="type">String</span> = <span class="number">42</span></div></pre></td></tr></table></figure><p>过程分析：</p><p>第一个分区：</p><p>​    第一次比较：” “ ,”12”  长度最大值为：2   ==&gt; toString ==&gt; “2”</p><p>​    第二次比较：” 2” ,”23”  长度最大值为：2   ==&gt; toString ==&gt; “2”</p><p>第二个分区：</p><p>​    第一次比较：” “ ,”345”  长度最大值为：3   ==&gt; toString ==&gt; “3”</p><p>​    第二次比较：” 3” ,”4567”  长度最大值为：4   ==&gt; toString ==&gt; “4”</p><blockquote><p>案例2：</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; rdd3.aggregate(<span class="string">""</span>)((x,y) =&gt; math.min(x.length,y.length).toString,(x,y) =&gt; x+y)</div><div class="line">res19: <span class="type">String</span> = <span class="number">11</span></div></pre></td></tr></table></figure><p>过程分析：</p><p>第一个分区：</p><p>​    第一次比较：” “ ,”12”  长度最小值为：0   ==&gt; toString ==&gt; “0”</p><p>​    第二次比较：” 0” ,”23”  长度最小值为：1   ==&gt; toString ==&gt; “1”</p><p>第二个分区：</p><p>​    第一次比较：” “ ,”345”  长度最大值为：0   ==&gt; toString ==&gt; “0”</p><p>​    第二次比较：” 0” ,”4567”  长度最大值为：1   ==&gt; toString ==&gt; “1”</p><h2 id="3、aggregateByKey：类似于aggregate"><a href="#3、aggregateByKey：类似于aggregate" class="headerlink" title="3、aggregateByKey：类似于aggregate"></a>3、<strong>aggregateByKey</strong>：类似于aggregate</h2><p><strong>区别</strong>：操作的是key value的数据类型</p><p>数据准备：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> pairRDD = sc.parallelize(<span class="type">List</span>( (<span class="string">"cat"</span>,<span class="number">2</span>), (<span class="string">"cat"</span>, <span class="number">5</span>), (<span class="string">"mouse"</span>, <span class="number">4</span>),(<span class="string">"cat"</span>, <span class="number">12</span>), (<span class="string">"dog"</span>, <span class="number">12</span>), (<span class="string">"mouse"</span>, <span class="number">2</span>)), <span class="number">2</span>)</div><div class="line"></div><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">fun2</span></span>(index:<span class="type">Int</span>, iter:<span class="type">Iterator</span>[(<span class="type">String</span>, <span class="type">Int</span>)]) : <span class="type">Iterator</span>[<span class="type">String</span>] = &#123;</div><div class="line">     | iter.toList.map(x =&gt; <span class="string">"[partId="</span> + index + <span class="string">",value="</span> + x + <span class="string">"]"</span>).iterator</div><div class="line">     | &#125;</div><div class="line">fun2: (index: <span class="type">Int</span>, iter: <span class="type">Iterator</span>[(<span class="type">String</span>, <span class="type">Int</span>)])<span class="type">Iterator</span>[<span class="type">String</span>]</div><div class="line"></div><div class="line">scala&gt; pairRDD.mapPartitionsWithIndex(fun2).collect</div><div class="line">res5: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>([</div><div class="line">    partId=<span class="number">0</span>,value=(cat,<span class="number">2</span>)], [partId=<span class="number">0</span>,value=(cat,<span class="number">5</span>)], [partId=<span class="number">0</span>,value=(mouse,<span class="number">4</span>)], [partId=<span class="number">1</span>,value=(cat,<span class="number">12</span>)], [partId=<span class="number">1</span>,value=(dog,<span class="number">12</span>)], [partId=<span class="number">1</span>,value=(mouse,<span class="number">2</span>)])</div></pre></td></tr></table></figure><ol><li><p>将每个园(分区)中，动物数最多的动物进行求和</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pairRDD.aggregateByKey(<span class="number">0</span>)(math.max(_,_),_+_)</div><div class="line">res1: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((dog,<span class="number">12</span>), (cat,<span class="number">17</span>), (mouse,<span class="number">6</span>))</div></pre></td></tr></table></figure></li><li><p>将所有动物求和</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pairRDD.aggregateByKey(<span class="number">0</span>)(_+_,_+_)</div><div class="line">res3: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((dog,<span class="number">12</span>), (cat,<span class="number">19</span>), (mouse,<span class="number">6</span>))  </div><div class="line"></div><div class="line"><span class="comment">//同样reduceByKey也能做到，但是不推荐，因为效率不够高</span></div><div class="line">pairRDD.reduceByKey(_+_).collect</div><div class="line">res3: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((dog,<span class="number">12</span>), (cat,<span class="number">19</span>), (mouse,<span class="number">6</span>))</div></pre></td></tr></table></figure></li></ol><h2 id="4、coalesce与repartition"><a href="#4、coalesce与repartition" class="headerlink" title="4、coalesce与repartition"></a>4、coalesce与repartition</h2><p>作用：都与分区相关，对RDD进行重分区</p><p>区别：</p><p><code>coalesce</code>：默认不会进行shuffle，默认为false，如果需要修改分区数，需要指定true</p><p><code>repartition</code>：会进行shuffle</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>),<span class="number">2</span>)</div><div class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">6</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd2 = rdd1.repartition(<span class="number">3</span>)</div><div class="line">rdd2: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">10</span>] at repartition at &lt;console&gt;:<span class="number">26</span></div><div class="line"></div><div class="line">scala&gt; rdd2.partitions.length</div><div class="line">res6: <span class="type">Int</span> = <span class="number">3</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd3 = rdd1.coalesce(<span class="number">3</span>,<span class="literal">true</span>)</div><div class="line">rdd3: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">14</span>] at coalesce at &lt;console&gt;:<span class="number">26</span></div><div class="line"></div><div class="line">scala&gt; rdd3.partitions.length</div><div class="line">res7: <span class="type">Int</span> = <span class="number">3</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd4 = rdd1.coalesce(<span class="number">3</span>)</div><div class="line">rdd4: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">CoalescedRDD</span>[<span class="number">15</span>] at coalesce at &lt;console&gt;:<span class="number">26</span></div><div class="line"></div><div class="line">scala&gt; rdd4.partitions.length</div><div class="line">res8: <span class="type">Int</span> = <span class="number">2</span></div></pre></td></tr></table></figure><h2 id="5、其他的高级算子"><a href="#5、其他的高级算子" class="headerlink" title="5、其他的高级算子"></a>5、其他的高级算子</h2><p><a href="http://homepage.cs.latrobe.edu.au/zhe/ZhenHeSparkRDDAPIExamples.html" target="_blank" rel="external">http://homepage.cs.latrobe.edu.au/zhe/ZhenHeSparkRDDAPIExamples.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RDD高级算子&quot;&gt;&lt;a href=&quot;#RDD高级算子&quot; class=&quot;headerlink&quot; title=&quot;RDD高级算子&quot;&gt;&lt;/a&gt;RDD高级算子&lt;/h1&gt;&lt;h2 id=&quot;1、mapPartitionsWithIndex&quot;&gt;&lt;a href=&quot;#1、mapPart
      
    
    </summary>
    
    
      <category term="Spark" scheme="rabbitluluu.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark进阶--RDD</title>
    <link href="rabbitluluu.github.io/2019/04/04/Spark%E8%BF%9B%E9%98%B6-RDD/"/>
    <id>rabbitluluu.github.io/2019/04/04/Spark进阶-RDD/</id>
    <published>2019-04-04T05:54:50.000Z</published>
    <updated>2019-04-04T09:01:59.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h1><h2 id="2-1、RDD：弹性分布式数据集"><a href="#2-1、RDD：弹性分布式数据集" class="headerlink" title="2.1、RDD：弹性分布式数据集"></a>2.1、RDD：弹性分布式数据集</h2><ol><li>Spark中最基本的数据抽象，类比于人，就是人身体中的细胞</li><li>RDD的特性</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">*  - <span class="type">A</span> list of partitions</div><div class="line">是一组分区。<span class="type">RDD</span>由分区组成，每个分区运行在不同的<span class="type">Worker</span>上，通过这种方式来实现分布式计算。</div><div class="line"></div><div class="line">*  - <span class="type">A</span> function <span class="keyword">for</span> computing each split</div><div class="line">在<span class="type">RDD</span>中，提供算子处理每个分区中的数据</div><div class="line"></div><div class="line">*  - <span class="type">A</span> list of dependencies on other <span class="type">RDDs</span></div><div class="line"><span class="type">RDD</span>存在依赖关系：宽依赖和窄依赖。</div><div class="line"></div><div class="line">*  - <span class="type">Optionally</span>, a <span class="type">Partitioner</span> <span class="keyword">for</span> key-value <span class="type">RDDs</span> (e.g. to say that the <span class="type">RDD</span> is hash-partitioned)</div><div class="line">可以自定义分区规则来创建<span class="type">RDD</span></div><div class="line"></div><div class="line">*  - <span class="type">Optionally</span>, a list of preferred locations to compute each split on (e.g. block locations <span class="keyword">for</span> an <span class="type">HDFS</span> file)</div><div class="line">优先选择离文件位置近的节点来执行</div></pre></td></tr></table></figure><ol><li><p>RDD的创建</p><p>方法一：通过SparkContext.parallelize方法创建</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>),<span class="number">3</span>)</div><div class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">0</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></div></pre></td></tr></table></figure><p>方法二：通过外部数据源创建</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd2 = sc.textFile(<span class="string">"hdfs://node01:9000/input/a.txt"</span>)</div><div class="line">rdd2: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">String</span>] = hdfs:<span class="comment">//node01:9000/input/a.txt MapPartitionsRDD[2] at textFile at &lt;console&gt;:24</span></div></pre></td></tr></table></figure></li></ol><h2 id="2-2、算子（非常关键！！！）"><a href="#2-2、算子（非常关键！！！）" class="headerlink" title="2.2、算子（非常关键！！！）"></a>2.2、算子（非常关键！！！）</h2><h3 id="2-2-1、Transformation"><a href="#2-2-1、Transformation" class="headerlink" title="2.2.1、Transformation"></a>2.2.1、<strong>Transformation</strong></h3><table><thead><tr><th>算子</th><th>解释</th></tr></thead><tbody><tr><td><strong>map</strong>(func)</td><td>相当于for循环，返回一个新的RDD</td></tr><tr><td>过滤</td><td></td></tr><tr><td><strong>filter</strong>(func)</td><td>过滤</td></tr><tr><td><strong>flatMap</strong>(func)</td><td>压平，等于flat+map</td></tr><tr><td>分区</td><td></td></tr><tr><td><strong>mapPartitions</strong>(func)</td><td>对RDD中的每个分区进行操作</td></tr><tr><td><strong>mapPartitionsWithIndex</strong>(func)</td><td>功能同上，不过可以取到<strong>分区号</strong></td></tr><tr><td></td><td></td></tr><tr><td><strong>sample</strong>(withReplacement, fraction, seed)</td><td>采样</td></tr><tr><td>集合运算</td><td></td></tr><tr><td><strong>union</strong>(otherDataset)</td><td></td></tr><tr><td><strong>intersection</strong>(otherDataset)</td><td></td></tr><tr><td></td><td></td></tr><tr><td><strong>distinct</strong>([numTasks]))</td><td>去重</td></tr><tr><td>聚合</td><td></td></tr><tr><td><strong>groupByKey</strong>([numTasks])</td><td></td></tr><tr><td><strong>reduceByKey</strong>(func, [numTasks])</td><td></td></tr><tr><td><strong>aggregateByKey</strong>(zeroValue)(seqOp,combOp,[numTasks])</td><td></td></tr><tr><td>排序</td><td></td></tr><tr><td><strong>sortByKey</strong>([ascending], [numTasks])</td><td></td></tr><tr><td><strong>sortBy</strong>(func,[ascending], [numTasks])</td><td></td></tr><tr><td></td><td></td></tr><tr><td><strong>join</strong>(otherDataset, [numTasks])</td><td></td></tr><tr><td><strong>cogroup</strong>(otherDataset, [numTasks])</td><td></td></tr><tr><td><strong>cartesian</strong>(otherDataset)</td><td></td></tr><tr><td><strong>pipe</strong>(command, [envVars])</td><td></td></tr><tr><td><strong>coalesce</strong>(numPartitions<strong>)</strong></td><td></td></tr><tr><td>重分区</td><td></td></tr><tr><td><strong>repartition</strong>(numPartitions)</td><td></td></tr><tr><td><strong>repartitionAndSortWithinPartitions</strong>(partitioner)</td></tr></tbody></table><p>举例：</p><ol><li><p>创建一个RDD，每个元素乘以2再排序</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">Array</span>(<span class="number">10</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>))</div><div class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">1</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd2 = rdd1.map(_ * <span class="number">2</span>)</div><div class="line">rdd2: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">2</span>] at map at &lt;console&gt;:<span class="number">26</span></div><div class="line"></div><div class="line">scala&gt; rdd2.collect</div><div class="line">res1: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">20</span>, <span class="number">6</span>, <span class="number">18</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">16</span>)</div><div class="line"><span class="comment">//升序</span></div><div class="line">scala&gt; rdd2.sortBy(x =&gt; x,<span class="literal">true</span>).collect</div><div class="line">res3: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">20</span>)   </div><div class="line"><span class="comment">//降序</span></div><div class="line">scala&gt; rdd2.sortBy(x =&gt; x,<span class="literal">false</span>).collect</div><div class="line">res8: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">20</span>, <span class="number">18</span>, <span class="number">16</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure><p>在上面的基础上过滤出大于20的元素</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd3 = rdd2.filter(_ &gt; <span class="number">15</span>)</div><div class="line">rdd3: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">15</span>] at filter at &lt;console&gt;:<span class="number">28</span></div><div class="line"></div><div class="line">scala&gt; rdd3.collect</div><div class="line">res6: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">20</span>, <span class="number">18</span>, <span class="number">16</span>)</div></pre></td></tr></table></figure></li><li><p>创建一个字符串（字符）类型的RDD</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd4 = sc.parallelize(<span class="type">Array</span>(<span class="string">"a b c"</span>,<span class="string">"d e f"</span>,<span class="string">"g h i"</span>))</div><div class="line">rdd4: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">String</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">16</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></div><div class="line"></div><div class="line">scala&gt; rdd4.flatMap(_.split(<span class="string">" "</span>)).collect</div><div class="line">res7: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(a, b, c, d, e, f, g, h, i)</div></pre></td></tr></table></figure></li><li><p>RDD的集合运算</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd6 = sc.parallelize(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">7</span>))</div><div class="line">rdd6: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">19</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd7 = sc.parallelize(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">12</span>))</div><div class="line">rdd7: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">20</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd8 = rdd6.union(rdd7)</div><div class="line">rdd8: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">UnionRDD</span>[<span class="number">21</span>] at union at &lt;console&gt;:<span class="number">28</span></div><div class="line"></div><div class="line">scala&gt; rdd8.collect</div><div class="line">res8: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">12</span>)</div><div class="line"></div><div class="line">scala&gt; rdd8.distinct.collect</div><div class="line">res9: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">12</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>)</div></pre></td></tr></table></figure></li><li><p>分组操作（groupByKey &amp; reduceByKey）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>((<span class="string">"Gakki"</span>,<span class="number">3000</span>),(<span class="string">"Sean"</span>,<span class="number">2000</span>),(<span class="string">"Jojo"</span>,<span class="number">5000</span>)))</div><div class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ParallelCollectionRDD</span>[<span class="number">25</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">List</span>((<span class="string">"shishi"</span>,<span class="number">1500</span>),(<span class="string">"mimi"</span>,<span class="number">1000</span>),(<span class="string">"Jojo"</span>,<span class="number">8000</span>)))</div><div class="line">rdd2: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ParallelCollectionRDD</span>[<span class="number">26</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd3 = rdd1 union rdd2</div><div class="line">rdd3: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">UnionRDD</span>[<span class="number">27</span>] at union at &lt;console&gt;:<span class="number">28</span></div><div class="line"></div><div class="line">scala&gt; rdd3.collect</div><div class="line">res10: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((<span class="type">Gakki</span>,<span class="number">3000</span>), (<span class="type">Sean</span>,<span class="number">2000</span>), (<span class="type">Jojo</span>,<span class="number">5000</span>), (shishi,<span class="number">1500</span>), (mimi,<span class="number">1000</span>), (<span class="type">Jojo</span>,<span class="number">8000</span>))</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd4 = rdd3.groupByKey.collect</div><div class="line">rdd4: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Iterable</span>[<span class="type">Int</span>])] = <span class="type">Array</span>(</div><div class="line">    (<span class="type">Jojo</span>,<span class="type">CompactBuffer</span>(<span class="number">8000</span>, <span class="number">5000</span>)), </div><div class="line">    (<span class="type">Gakki</span>,<span class="type">CompactBuffer</span>(<span class="number">3000</span>)), </div><div class="line">    (<span class="type">Sean</span>,<span class="type">CompactBuffer</span>(<span class="number">2000</span>)), </div><div class="line">    (shishi,<span class="type">CompactBuffer</span>(<span class="number">1500</span>)), </div><div class="line">    (mimi,<span class="type">CompactBuffer</span>(<span class="number">1000</span>)))</div><div class="line"></div><div class="line">scala&gt; rdd3.reduceByKey(_ + _).collect</div><div class="line">res11: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>(</div><div class="line">    (<span class="type">Jojo</span>,<span class="number">13000</span>), (<span class="type">Gakki</span>,<span class="number">3000</span>), (<span class="type">Sean</span>,<span class="number">2000</span>), (shishi,<span class="number">1500</span>), (mimi,<span class="number">1000</span>))</div></pre></td></tr></table></figure><p><strong>官方都不喜欢groupByKey，故别用，多用reduceByKey</strong></p></li><li><p>cogroup,对比于groupByKey</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>((<span class="string">"tom"</span>, <span class="number">1</span>), (<span class="string">"tom"</span>, <span class="number">2</span>), (<span class="string">"jerry"</span>, <span class="number">3</span>), (<span class="string">"kitty"</span>, <span class="number">2</span>)))</div><div class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ParallelCollectionRDD</span>[<span class="number">30</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">List</span>((<span class="string">"jerry"</span>, <span class="number">2</span>), (<span class="string">"tom"</span>, <span class="number">1</span>), (<span class="string">"shuke"</span>, <span class="number">2</span>)))</div><div class="line">rdd2: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ParallelCollectionRDD</span>[<span class="number">31</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd3 = rdd1.cogroup(rdd2).collect</div><div class="line">rdd3: <span class="type">Array</span>[(<span class="type">String</span>, (<span class="type">Iterable</span>[<span class="type">Int</span>], <span class="type">Iterable</span>[<span class="type">Int</span>]))] = <span class="type">Array</span>(</div><div class="line">    (tom,(<span class="type">CompactBuffer</span>(<span class="number">2</span>, <span class="number">1</span>),<span class="type">CompactBuffer</span>(<span class="number">1</span>))), </div><div class="line">    (jerry,(<span class="type">CompactBuffer</span>(<span class="number">3</span>),<span class="type">CompactBuffer</span>(<span class="number">2</span>))), </div><div class="line">    (shuke,(<span class="type">CompactBuffer</span>(),<span class="type">CompactBuffer</span>(<span class="number">2</span>))), </div><div class="line">    (kitty,(<span class="type">CompactBuffer</span>(<span class="number">2</span>),<span class="type">CompactBuffer</span>())))</div></pre></td></tr></table></figure></li><li><p>reduce(Action操作)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</div><div class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">34</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd2 = rdd1.reduce(_ + _)</div><div class="line">rdd2: <span class="type">Int</span> = <span class="number">15</span></div></pre></td></tr></table></figure></li><li><p>按照value排序</p><p>思路：</p><p>1.交换，把key和value交换，然后调用sortByKey方法</p><p>2.再换一次</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>((<span class="string">"tom"</span>, <span class="number">1</span>), (<span class="string">"tom"</span>, <span class="number">2</span>), (<span class="string">"jerry"</span>, <span class="number">3</span>), (<span class="string">"kitty"</span>, <span class="number">2</span>)))</div><div class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ParallelCollectionRDD</span>[<span class="number">37</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">List</span>((<span class="string">"jerry"</span>, <span class="number">8</span>), (<span class="string">"tom"</span>, <span class="number">0</span>), (<span class="string">"shuke"</span>, <span class="number">11</span>)))</div><div class="line">rdd2: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ParallelCollectionRDD</span>[<span class="number">38</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd3 = rdd1 union(rdd2)</div><div class="line">rdd3: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">UnionRDD</span>[<span class="number">39</span>] at union at &lt;console&gt;:<span class="number">28</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd4 = rdd3.reduceByKey(_ + _)</div><div class="line">rdd4: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ShuffledRDD</span>[<span class="number">40</span>] at reduceByKey at &lt;console&gt;:<span class="number">30</span></div><div class="line"></div><div class="line">scala&gt; rdd4.collect</div><div class="line">res12: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((tom,<span class="number">3</span>), (kitty,<span class="number">2</span>), (jerry,<span class="number">11</span>), (shuke,<span class="number">11</span>))</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> rdd5 = rdd4.map(t =&gt; (t._2,t._1)).sortByKey(<span class="literal">false</span>).map(t =&gt; (t._2,t._1))</div><div class="line">rdd5: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">MapPartitionsRDD</span>[<span class="number">45</span>] at map at &lt;console&gt;:<span class="number">32</span></div><div class="line"></div><div class="line">scala&gt; rdd5.collect</div><div class="line">res13: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((jerry,<span class="number">11</span>), (shuke,<span class="number">11</span>), (tom,<span class="number">3</span>), (kitty,<span class="number">2</span>))</div></pre></td></tr></table></figure></li></ol><h3 id="2-2-2、Action"><a href="#2-2-2、Action" class="headerlink" title="2.2.2、Action"></a>2.2.2、<strong>Action</strong></h3><table><thead><tr><th>算子</th><th>解释</th></tr></thead><tbody><tr><td>reduce(<em>func</em>)</td><td>通过func函数聚集RDD中的所有元素，这个功能必须是可交换且可并联的</td></tr><tr><td><strong>collect</strong>()</td><td>在驱动程序中，以数组的形式返回数据集的所有元素</td></tr><tr><td><strong>count</strong>()</td><td>返回RDD的元素个数</td></tr><tr><td><strong>first</strong>()</td><td>返回RDD的第一个元素（类似于take(1)）</td></tr><tr><td><strong>take</strong>(<em>n</em>)</td><td>返回一个由数据集的前n个元素组成的数组</td></tr><tr><td><strong>takeSample</strong>(<em>withReplacement</em>,<em>num</em>, [<em>seed</em>])</td><td>返回一个数组，该数组由从数据集中随机采样的num个元素组成，可以选择是否用随机数替换不足的部分，seed用于指定随机数生成器种子</td></tr><tr><td><strong>takeOrdered</strong>(<em>n</em>, <em>[ordering]</em>)</td><td></td></tr><tr><td><strong>saveAsTextFile</strong>(<em>path</em>)</td><td>将数据集的元素以textfile的形式保存到HDFS文件系统或者其他支持的文件系统，对于每个元素，Spark将会调用toString方法，将它装换为文件中的文本</td></tr><tr><td><strong>saveAsSequenceFile</strong>(<em>path</em>)</td><td>将数据集中的元素以Hadoop sequencefile的格式保存到指定的目录下，可以使HDFS或者其他Hadoop支持的文件系统。</td></tr><tr><td><strong>saveAsObjectFile</strong>(<em>path</em>)</td><td></td></tr><tr><td><strong>countByKey</strong>()</td><td>针对(K,V)类型的RDD，返回一个(K,Int)的map，表示每一个key对应的元素个数。</td></tr><tr><td><strong>foreach</strong>(<em>func</em>)</td><td>与map类似，但是没有返回值</td></tr></tbody></table><h2 id="2-3、特性"><a href="#2-3、特性" class="headerlink" title="2.3、特性"></a>2.3、特性</h2><h3 id="2-3-1、RDD的缓存机制"><a href="#2-3-1、RDD的缓存机制" class="headerlink" title="2.3.1、RDD的缓存机制"></a>2.3.1、RDD的缓存机制</h3><p>作用：提高性能</p><p>用法：表示RDD可以被缓存 persist   cache</p><p>位置：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以下都是缓存位置</span></div><div class="line"><span class="keyword">val</span> <span class="type">NONE</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>)</div><div class="line"><span class="keyword">val</span> <span class="type">DISK_ONLY</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>)</div><div class="line"><span class="keyword">val</span> <span class="type">DISK_ONLY_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">val</span> <span class="type">MEMORY_ONLY</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>)</div><div class="line"><span class="keyword">val</span> <span class="type">MEMORY_ONLY_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">val</span> <span class="type">MEMORY_ONLY_SER</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>)</div><div class="line"><span class="keyword">val</span> <span class="type">MEMORY_ONLY_SER_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">val</span> <span class="type">MEMORY_AND_DISK</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>)</div><div class="line"><span class="keyword">val</span> <span class="type">MEMORY_AND_DISK_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">val</span> <span class="type">MEMORY_AND_DISK_SER</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>)</div><div class="line"><span class="keyword">val</span> <span class="type">MEMORY_AND_DISK_SER_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">val</span> <span class="type">OFF_HEAP</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 默认在内存中</div><div class="line">* Persist this RDD with the default storage level (`MEMORY_ONLY`).</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">persist</span></span>(): <span class="keyword">this</span>.<span class="keyword">type</span> = persist(<span class="type">StorageLevel</span>.<span class="type">MEMORY_ONLY</span>)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Persist this RDD with the default storage level (`MEMORY_ONLY`).</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cache</span></span>(): <span class="keyword">this</span>.<span class="keyword">type</span> = persist()</div></pre></td></tr></table></figure><p>​                                                         </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">scala&gt; rdd1.count  --&gt; 直接触发计算</div><div class="line">res52: <span class="type">Long</span> = <span class="number">923452</span>   </div><div class="line">scala&gt; rdd1.cache  --&gt; 标识<span class="type">RDD</span>可以被缓存，不会触发计算</div><div class="line">res53: rdd1.<span class="keyword">type</span> = hdfs:<span class="comment">//192.168.109.131:8020/tmp_files/test_Cache.txt MapPartitionsRDD[82] at textFile at &lt;console&gt;:29</span></div><div class="line"></div><div class="line">scala&gt; rdd1.count   --&gt; 和第一步一样，触发计算，但是，把结果进行缓存</div><div class="line">res54: <span class="type">Long</span> = <span class="number">923452</span>                                                            </div><div class="line"></div><div class="line">scala&gt; rdd1.count   --&gt;  从缓存中直接读出结果</div><div class="line">res55: <span class="type">Long</span> = <span class="number">923452</span></div></pre></td></tr></table></figure><h3 id="2-3-2、RDD的容错机制：通过检查点来实现"><a href="#2-3-2、RDD的容错机制：通过检查点来实现" class="headerlink" title="2.3.2、RDD的容错机制：通过检查点来实现"></a>2.3.2、RDD的容错机制：通过<em>检查点</em>来实现</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Mark this RDD for checkpointing. It will be saved to a file inside the checkpoint</div><div class="line">* directory set with `SparkContext#setCheckpointDir` and all references to its parent</div><div class="line">* RDDs will be removed. This function must be called before any job has been</div><div class="line">* executed on this RDD. It is strongly recommended that this RDD is persisted in</div><div class="line">* memory, otherwise saving it on a file will require recomputation.</div><div class="line">*/</div></pre></td></tr></table></figure><ol><li><p>回顾：HDFS的检查点，有SecondaryName来实现日志的合并</p></li><li><p>RDD的检查点：容错</p><p>概念：血统Lineage</p><p>含义：表示任务执行的生命周期（wordCount: textFile —&gt; reduceByKey）</p><p>如果血统越长，越容易出错</p><p>假如有检查点，可以从最近的一个检查点开始，往后面计算</p></li><li><p>RDD检查点的类型：</p><ul><li><p>基于本地目录：需要将Spark shell或者任务运行在本地模式上(<code>.setMaster(&quot;local&quot;)</code>)</p><p>设定：<code>sc.setCheckpointDir()</code>写一个本地路径即可</p></li><li><p>HDFS目录：适用于生产</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.textFile(<span class="string">"hdfs://node01:9000/input/a.txt"</span>)</div><div class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">String</span>] = hdfs:<span class="comment">//node01:9000/input/a.txt MapPartitionsRDD[1] at textFile at &lt;console&gt;:24</span></div><div class="line"></div><div class="line"><span class="comment">//设置检查点目录</span></div><div class="line">scala&gt; sc.setCheckpointDir(<span class="string">"hdfs://node01:9000/sparkCheck"</span>)</div><div class="line"></div><div class="line"><span class="comment">//标识rdd可以执行检查点操作</span></div><div class="line">scala&gt; rdd1.checkpoint</div></pre></td></tr></table></figure></li></ul></li></ol><h3 id="2-3-3、依赖关系"><a href="#2-3-3、依赖关系" class="headerlink" title="2.3.3、依赖关系"></a>2.3.3、依赖关系</h3><p>​    RDD和它依赖的父RDD（s）的关系有两种不同的类型，即窄依赖（narrow dependency）和宽依赖（wide dependency）。</p><p>   <img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png" alt="依赖关系"></p><ul><li><p>窄依赖指的是每一个父RDD的Partition最多被子RDD的一个Partition使用</p><p><strong>总结</strong>：窄依赖我们形象的比喻为<strong>独生子女</strong></p></li><li><p>宽依赖指的是多个子RDD的Partition会依赖同一个父RDD的Partition</p><p><strong>总结</strong>：窄依赖我们形象的比喻为<strong>超生</strong></p></li></ul><p><strong>Stage的划分：</strong></p><p>​    DAG(Directed Acyclic Graph)叫做有向无环图，原始的RDD通过一系列的转换就就形成了DAG，根据RDD之间的依赖关系的不同将DAG划分成不同的Stage，对于窄依赖，partition的转换处理在Stage中完成计算。对于宽依赖，由于有Shuffle的存在，只能在parent RDD处理完成后，才能开始接下来的计算，因此<strong>宽依赖是划分Stage</strong>的依据。</p><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/statge%E5%88%92%E5%88%86.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RDD&quot;&gt;&lt;a href=&quot;#RDD&quot; class=&quot;headerlink&quot; title=&quot;RDD&quot;&gt;&lt;/a&gt;RDD&lt;/h1&gt;&lt;h2 id=&quot;2-1、RDD：弹性分布式数据集&quot;&gt;&lt;a href=&quot;#2-1、RDD：弹性分布式数据集&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Spark" scheme="rabbitluluu.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark基础&amp;流程分析</title>
    <link href="rabbitluluu.github.io/2019/04/04/Spark%E5%9F%BA%E7%A1%80-%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>rabbitluluu.github.io/2019/04/04/Spark基础-流程分析/</id>
    <published>2019-04-04T05:54:38.000Z</published>
    <updated>2019-04-04T05:55:29.221Z</updated>
    
    <content type="html"><![CDATA[<p>Spark生态圈：</p><p><strong>Spark Core</strong>：RDD（弹性分布式数据集）</p><p>Spark SQL</p><p>Spark Streaming</p><p>Spark MLLIB：协同过滤，ALS，逻辑回归等</p><p>Spark Graphx：图计算</p><h1 id="1、Spark-Core"><a href="#1、Spark-Core" class="headerlink" title="1、Spark Core"></a>1、Spark Core</h1><h2 id="1-1、什么是Spark"><a href="#1-1、什么是Spark" class="headerlink" title="1.1、什么是Spark"></a>1.1、什么是Spark</h2><p>特点：快、易用、通用性、兼容性（完全兼容hadoop）</p><p>快：快100倍（Hadoop3之前）</p><p>易用：支持多语言开发</p><p>通用性：生态系统圈</p><p>易用性：兼容Hadoop</p><h2 id="1-2、安装和部署Spark及HA"><a href="#1-2、安装和部署Spark及HA" class="headerlink" title="1.2、安装和部署Spark及HA"></a>1.2、安装和部署Spark及HA</h2><p>1、体系结构：</p><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/Spark%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84.png" alt="架构"></p><p>运行模式：</p><ul><li>Yarn</li><li>Standalone:本机调试</li><li>Worker：从节点，每个服务器上，资源和任务的管理者，只负责管理一个节点</li></ul><p>执行过程：</p><p>一个Worker有多个Executor，Executor是任务的执行者，按阶段（stage）划分任务–&gt;RDD</p><p>客户端：DriveProgram提交任务到集群中</p><ol><li>spark-submit</li><li>spark-shell</li></ol><p>spark的搭建：</p><ol><li><p>准备工作：JDK，配置主机名，免密登录</p></li><li><p>伪分布式模式</p><p>在一台虚拟机上模拟分布式环境(Master和Worker在一个节点上)</p></li></ol><p>需要修改文件<code>slaves</code>&amp;<code>spark-env.sh</code></p><p>在<code>spark-env.sh</code>添加如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/opt/modules/jdk1.8.0_141</div><div class="line">export SPARK_MASTER_HOST=node01</div><div class="line">export SPARK_MASTER_PORT=7077</div></pre></td></tr></table></figure><p>启动指令：<code>bin/spark-shell --master spark://node01:7077</code></p><ol><li><p>全分布式</p><p>修改slave文件 拷贝到其他两台服务器</p></li></ol><h2 id="1-3、Spark的HA"><a href="#1-3、Spark的HA" class="headerlink" title="1.3、Spark的HA"></a>1.3、Spark的HA</h2><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/%E5%A4%A7%E6%95%B0%E6%8D%AEHA.jpg" alt="大数据生态HA架构"></p><ol><li><p>基于文件目录的单点恢复</p><p>本质：还是只有一个主节点Master，创建了一个恢复目录，保存集群状态和任务的信息，当Master挂掉，重新启动时，会从回复目录下读取状态信息，恢复出原来的信息</p><p>用途：用于开发和测试，生产用zookeeper</p><p>| <strong>配置参数</strong>                   | <strong>参考值</strong>                                     |<br>| —————————— | ———————————————- |<br>| spark.deploy.recoveryMode      | 设置为FILESYSTEM开启单点恢复功能，默认值：NONE |<br>| spark.deploy.recoveryDirectory | Spark 保存恢复状态的目录                       |</p><p>参考：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export SPARK_DAEMON_JAVA_OPTS="-Dspark.deploy.recoveryMode=FILESYSTEM -Dspark.deploy.recoveryDirectory=/opt/modules/spark-2.1.0/recovery"</div></pre></td></tr></table></figure></li><li><p>基于Zookeeper：和Hadoop类似</p><p>回顾zookeeper：相当于一个数据库，把一些信息存放在zookeeper，比如：集群的信息</p><p>具有如下功能：</p><ul><li>数据同步：给一个节点写入数据，也可以同步到其他节点</li><li>选举：Zookeeper中存在不同的角色，Leader和Follower，如果Leader挂掉，重新选举Leader</li><li>分布式锁：秒杀，以目录节点的方式来保存数据</li></ul><p>操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/opt/modules/jdk1.8.0_141</div><div class="line"><span class="meta">#</span>export SPARK_MASTER_HOST=node01</div><div class="line"><span class="meta">#</span>export SPARK_MASTER_PORT=7077</div><div class="line"></div><div class="line">export SPARK_DAEMON_JAVA_OPTS="-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=node01:2181,node02,node03:2181,node04:2181 -Dspark.deploy.zookeeper.dir=/spark"</div></pre></td></tr></table></figure><p>注释如上两行，添加最下一行</p><p>实现主备切换时，可能局限于机器性能会比较慢，耐心等待即可。可以在web页面查看状态(node01:8080)</p></li></ol><h2 id="1-4、执行Spark的任务–两个工具"><a href="#1-4、执行Spark的任务–两个工具" class="headerlink" title="1.4、执行Spark的任务–两个工具"></a>1.4、执行Spark的任务–两个工具</h2><h3 id="1-4-1、spark-submit：用于提交Spark的任务"><a href="#1-4-1、spark-submit：用于提交Spark的任务" class="headerlink" title="1.4.1、spark-submit：用于提交Spark的任务"></a>1.4.1、<strong>spark-submit</strong>：用于提交Spark的任务</h3><p>任务：jar</p><p>举例：蒙特卡洛求Pi</p><p>指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/spark-submit --master spark://node01:7077 --class org.apache.spark.examples.SparkPi /opt/modules/spark-2.1.0/examples/jars/spark-examples_2.11-2.1.0.jar 100</div></pre></td></tr></table></figure><p>–master指明spark地址</p><p>–class指明主类名称</p><p>再是jar包地址以及实验次数</p><h3 id="1-4-2、spark-shell-相当于REPL"><a href="#1-4-2、spark-shell-相当于REPL" class="headerlink" title="1.4.2、spark-shell 相当于REPL"></a>1.4.2、<strong>spark-shell</strong> 相当于REPL</h3><p>作为一个独立的Application运行</p><ol><li><p>模式一：<strong>本地模式</strong></p><p>直接运行spark-shell，后面不接任何参数，代表本地模式</p><p>在启动过程有如下提示，表明当前模式为local</p><p><code>Spark context available as &#39;sc&#39; (master = local[*], app id = local-1554038463290).</code></p><p>sc 是 SparkContext对象名，local[*]代表本地模式，不提交到集群运行</p></li><li><p>模式二：<strong>集群模式</strong></p><p>启动指令：<code>bin/spark-shell --master spark://node01:7077</code></p><p><code>Spark session</code>:是spark2.0以后提供的，利用它可以访问spark所有组件</p><p>在启动过程有如下提示，表明当前模式为soark集群</p><p><code>Spark context available as &#39;sc&#39; (master = spark://node01:7077, app id = app-20190331094809-0000).</code></p><ol><li><p>本地文件：将结果打印在屏幕上</p><p><code>sc.textFile(&quot;file:///opt/modules/spark-2.1.0/README.md&quot;)</code></p><p><code>.flatMap(_.split(&quot; &quot;))</code></p><p><code>.map((_,1))</code></p><p><code>.reduceByKey(_+_)</code></p><p><code>.collect</code></p><p>文件得在spark安装目录下或者与其平级，否则会有文件不存在的错误</p></li><li><p>hdfs文件：将结果打印在屏幕上</p><p><code>sc.textFile(&quot;hdfs://node01:9000/input/a.txt&quot;)</code></p><p><code>.flatMap(_.split(&quot; &quot;))</code></p><p><code>.map((_,1))</code></p><p><code>.reduceByKey(_+_)</code></p><p><code>.collect</code></p></li><li><p>hdfs文件：将结果存储在hdfs中</p><p><code>sc.textFile(&quot;hdfs://node01:9000/input/a.txt&quot;)</code></p><p><code>.flatMap(_.split(&quot; &quot;))</code></p><p><code>.map((_,1))</code></p><p><code>.reduceByKey(_+_)</code></p><p><code>.saveAsTextFile(&quot;hdfs://node01:9000/output/wc0401&quot;)</code></p></li></ol></li></ol><h3 id="1-4-3、WordCount单步调试"><a href="#1-4-3、WordCount单步调试" class="headerlink" title="1.4.3、WordCount单步调试"></a>1.4.3、WordCount单步调试</h3><p>第一步：    </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.textFile(<span class="string">"hdfs://node01:9000/input/a.txt"</span>)</div><div class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">String</span>] = hdfs:<span class="comment">//node01:9000/input/a.txt MapPartitionsRDD[69] at textFile at &lt;console&gt;:24</span></div><div class="line"></div><div class="line">scala&gt; rdd1.collect</div><div class="line">res15: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(<span class="type">Hello</span> world, <span class="type">Hello</span> <span class="type">Hadoop</span>)</div></pre></td></tr></table></figure><p>第二步：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd2 = rdd1.flatMap(_.split(<span class="string">" "</span>))</div><div class="line">rdd2: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">String</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">70</span>] at flatMap at &lt;console&gt;:<span class="number">26</span></div><div class="line"></div><div class="line">scala&gt; rdd2.collect</div><div class="line">res16: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(<span class="type">Hello</span>, world, <span class="type">Hello</span>, <span class="type">Hadoop</span>)</div></pre></td></tr></table></figure><p>第三步：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd3 = rdd2.map((_,<span class="number">1</span>))</div><div class="line">rdd3: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">MapPartitionsRDD</span>[<span class="number">71</span>] at map at &lt;console&gt;:<span class="number">28</span></div><div class="line"></div><div class="line">scala&gt; rdd3.collect</div><div class="line">res18: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((<span class="type">Hello</span>,<span class="number">1</span>), (world,<span class="number">1</span>), (<span class="type">Hello</span>,<span class="number">1</span>), (<span class="type">Hadoop</span>,<span class="number">1</span>))</div></pre></td></tr></table></figure><p>第四步：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> rdd4 = rdd3.reduceByKey(_ + _)</div><div class="line">rdd4: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ShuffledRDD</span>[<span class="number">72</span>] at reduceByKey at &lt;console&gt;:<span class="number">30</span></div><div class="line"></div><div class="line">scala&gt; rdd4.collect</div><div class="line">res19: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((<span class="type">Hello</span>,<span class="number">2</span>), (world,<span class="number">1</span>), (<span class="type">Hadoop</span>,<span class="number">1</span>))</div></pre></td></tr></table></figure><p>第五步：</p><p>文件存储或输出</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> rdd5 = rdd4.saveAsTextFile(<span class="string">"hdfs://node01:9000/output/wc04010"</span>)</div></pre></td></tr></table></figure><h3 id="1-4-4、依赖关系拓展"><a href="#1-4-4、依赖关系拓展" class="headerlink" title="1.4.4、依赖关系拓展"></a>1.4.4、依赖关系拓展</h3><p>依赖关系 ： 宽依赖和窄依赖<br>算子：<br>函数：<br>    Transformation ： 延时计算   map   flatMap   textFile<br>    Action ： 立即触发计算  collect</p><h2 id="1-5、IDE环境编写WordCount实例"><a href="#1-5、IDE环境编写WordCount实例" class="headerlink" title="1.5、IDE环境编写WordCount实例"></a>1.5、IDE环境编写WordCount实例</h2><h3 id="1-5-1、win本地环境运行wc程序"><a href="#1-5-1、win本地环境运行wc程序" class="headerlink" title="1.5.1、win本地环境运行wc程序"></a>1.5.1、win本地环境运行wc程序</h3><p>代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xyz.llsean</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCountDemo</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">      </div><div class="line">    <span class="comment">//创建一个Spark配置文件</span></div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"My Scala WordCount"</span>).setMaster(<span class="string">"local"</span>)</div><div class="line">    </div><div class="line">    <span class="comment">//创建SparkContext对象</span></div><div class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</div><div class="line">    </div><div class="line">    <span class="comment">//1.从本地模式运行</span></div><div class="line">    <span class="keyword">val</span> result = sc.textFile(<span class="string">"hdfs://node01:9000/input/a.txt"</span>)</div><div class="line">    .flatMap(_.split(<span class="string">" "</span>))</div><div class="line">    .map((_,<span class="number">1</span>))</div><div class="line">    .reduceByKey(_ + _)</div><div class="line">    </div><div class="line">    result.foreach(println)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-5-2、导出jar包到服务器运行"><a href="#1-5-2、导出jar包到服务器运行" class="headerlink" title="1.5.2、导出jar包到服务器运行"></a>1.5.2、导出jar包到服务器运行</h3><p>进一步修改代码，将其修改为可以自行指定输入输出路径，直接将运行结果指定在hdfs中</p><p>注意：此时不需要指定Master，根据实际情况不会写定输入输出路径，故使用args参数来自行指定</p><p>代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xyz.llsean</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCountByCluster</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    </div><div class="line">    <span class="comment">//1、创建配置信息</span></div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"WordCountByCluster"</span>)</div><div class="line">    </div><div class="line">    <span class="comment">//2、创建SparkContext对象</span></div><div class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</div><div class="line">    </div><div class="line">    <span class="comment">//3、业务逻辑</span></div><div class="line">    <span class="keyword">val</span> result = sc.textFile(args(<span class="number">0</span>))</div><div class="line">    .flatMap(_.split(<span class="string">" "</span>))</div><div class="line">    .map((_,<span class="number">1</span>))</div><div class="line">    .reduceByKey(_ + _)</div><div class="line">    .saveAsTextFile(args(<span class="number">1</span>))</div><div class="line"></div><div class="line">    <span class="comment">//4、停止sc对象</span></div><div class="line">    sc.stop()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>启动指令：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/spark-submit --master spark:<span class="comment">//node01:7077 --class xyz.llsean.WordCountByCluster /root/temp/WordCountByCluster.jar hdfs://node01:9000/input/a.txt hdfs://node01:9000/output/wc0401_scala</span></div></pre></td></tr></table></figure><h3 id="1-5-3、java版本的WordCount"><a href="#1-5-3、java版本的WordCount" class="headerlink" title="1.5.3、java版本的WordCount"></a>1.5.3、java版本的WordCount</h3><p>注意：需要提前添加spark的jar包或者配置相关maven</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.spark.SparkConf;</div><div class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaPairRDD;</div><div class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaRDD;</div><div class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaSparkContext;</div><div class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.FlatMapFunction;</div><div class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.Function2;</div><div class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.PairFunction;</div><div class="line"><span class="keyword">import</span> scala.Tuple2;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span>: Sean</div><div class="line"> * <span class="doctag">@date</span>: 2019/4/2/15:19</div><div class="line"> * <span class="doctag">@version</span>: 1.0</div><div class="line"> * 使用java编写Spark的WordCount程序</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparkWordCountDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//配置文件</span></div><div class="line">        SparkConf conf = <span class="keyword">new</span> SparkConf()</div><div class="line">                .setAppName(<span class="string">"JavaWordCount"</span>)</div><div class="line">                .setMaster(<span class="string">"local"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//1.新建SparkContext对象</span></div><div class="line">        JavaSparkContext sc = <span class="keyword">new</span> JavaSparkContext(conf);</div><div class="line"></div><div class="line">        <span class="comment">//读入数据</span></div><div class="line">        JavaRDD&lt;String&gt; lines = sc.textFile(<span class="string">"hdfs://node01:9000/input/a.txt"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//分词</span></div><div class="line">        <span class="comment">//第一个参数表示读进来的话，第二个参数表示返回值</span></div><div class="line">        JavaRDD&lt;String&gt; words = lines.flatMap(<span class="keyword">new</span> FlatMapFunction&lt;String, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Iterator&lt;String&gt; <span class="title">call</span><span class="params">(String input)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="comment">//切分</span></div><div class="line">                String[] strings = input.split(<span class="string">" "</span>);</div><div class="line">                <span class="comment">//将结果转成List</span></div><div class="line">                List&lt;String&gt; list = Arrays.asList(strings);</div><div class="line"></div><div class="line">                <span class="keyword">return</span> list.iterator();</div><div class="line">                <span class="comment">//可以缩写为 return Arrays.asList(input.split(" ")).iterator()</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">//将每个单词进行一次记数</span></div><div class="line">        JavaPairRDD&lt;String, Integer&gt; ones = words.mapToPair(<span class="keyword">new</span> PairFunction&lt;String, String, Integer&gt;() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">call</span><span class="params">(String input)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="comment">//将数据改造成元组形式并返回</span></div><div class="line">                Tuple2&lt;String, Integer&gt; tuple2 = <span class="keyword">new</span> Tuple2&lt;&gt;(input, <span class="number">1</span>);</div><div class="line"></div><div class="line">                <span class="keyword">return</span> tuple2;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">//执行reduce操作</span></div><div class="line">        JavaPairRDD&lt;String, Integer&gt; counts = ones.reduceByKey(<span class="keyword">new</span> Function2&lt;Integer, Integer, Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer args0, Integer args1)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> args0 + args1;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">//打印结果</span></div><div class="line">        List&lt;Tuple2&lt;String, Integer&gt;&gt; output = counts.collect();</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(Tuple2&lt;String, Integer&gt; o:output)&#123;</div><div class="line">            System.out.println(o._1 + <span class="string">":"</span> + o._2);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sc.stop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>将jar包上传到服务器</p><p>运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/spark-submit --master hdfs://node01:9000/input/a.txt --class SparkWordCountDemo /root/temp/SparkWordCount-1.0-SNAPSHOT.jar</div></pre></td></tr></table></figure><h2 id="1-6、过程分析"><a href="#1-6、过程分析" class="headerlink" title="1.6、过程分析"></a>1.6、过程分析</h2><h3 id="1-6-1、WordCount过程分析"><a href="#1-6-1、WordCount过程分析" class="headerlink" title="1.6.1、WordCount过程分析"></a>1.6.1、WordCount过程分析</h3><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/wordCount%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90.png" alt="WordCount过程"></p><h3 id="1-6-2、Spark任务调度过程分析"><a href="#1-6-2、Spark任务调度过程分析" class="headerlink" title="1.6.2、Spark任务调度过程分析"></a>1.6.2、Spark任务调度过程分析</h3><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/Spark%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6.png" alt="任务调度"></p><p>此处需要重点注意jar的动态：</p><p>​    <strong>提交任务请求的时候并不会动用jar，而是在Executor启动之后，才会提交jar！！！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spark生态圈：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spark Core&lt;/strong&gt;：RDD（弹性分布式数据集）&lt;/p&gt;
&lt;p&gt;Spark SQL&lt;/p&gt;
&lt;p&gt;Spark Streaming&lt;/p&gt;
&lt;p&gt;Spark MLLIB：协同过滤，ALS，逻辑回归等&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Spark" scheme="rabbitluluu.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Scala进阶--高级特性</title>
    <link href="rabbitluluu.github.io/2019/03/30/Scala%E8%BF%9B%E9%98%B6-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>rabbitluluu.github.io/2019/03/30/Scala进阶-高级特性/</id>
    <published>2019-03-30T03:08:34.000Z</published>
    <updated>2019-03-30T03:09:41.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、泛型"><a href="#1、泛型" class="headerlink" title="1、泛型"></a>1、泛型</h2><p>1、泛型类：定义类的时候，可以带有一个泛型的参数</p><p>2、泛型函数：定义一个函数，可以带有一个泛型的参数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">mkIntArray</span></span>(elem:<span class="type">Int</span>*) = <span class="type">Array</span>[<span class="type">Int</span>](elem:_*)</div><div class="line">mkIntArray: (elem: <span class="type">Int</span>*)<span class="type">Array</span>[<span class="type">Int</span>]</div><div class="line"></div><div class="line">scala&gt; mkIntArray(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">res1: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line"></div><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">mkStringArray</span></span>(elem:<span class="type">String</span>*) = <span class="type">Array</span>[<span class="type">String</span>](elem:_*)</div><div class="line">mkStringArray: (elem: <span class="type">String</span>*)<span class="type">Array</span>[<span class="type">String</span>]</div><div class="line"></div><div class="line">scala&gt; mkStringArray(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>)</div><div class="line">res2: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(a, b, c)</div></pre></td></tr></table></figure><p>使用泛型：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">import</span> scala.reflect.<span class="type">ClassTag</span></div><div class="line"><span class="keyword">import</span> scala.reflect.<span class="type">ClassTag</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkArray</span></span>[<span class="type">T</span>:<span class="type">ClassTag</span>](elem:<span class="type">T</span>*) = <span class="type">Array</span>[<span class="type">T</span>](elem:_*)</div><div class="line">mkArray: [<span class="type">T</span>](elem: <span class="type">T</span>*)(<span class="keyword">implicit</span> evidence$<span class="number">1</span>: scala.reflect.<span class="type">ClassTag</span>[<span class="type">T</span>])<span class="type">Array</span>[<span class="type">T</span>]</div><div class="line"></div><div class="line">scala&gt; mkArray(<span class="string">"Hello"</span>,<span class="string">"World"</span>)</div><div class="line">res3: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(<span class="type">Hello</span>, <span class="type">World</span>)</div><div class="line"></div><div class="line">scala&gt; mkArray(<span class="string">"Hello"</span>,<span class="number">123</span>)</div><div class="line">res4: <span class="type">Array</span>[<span class="type">Any</span>] = <span class="type">Array</span>(<span class="type">Hello</span>, <span class="number">123</span>)</div></pre></td></tr></table></figure><p><code>ClassTag</code>： 表示scala在运行时候的状态信息，这里表示调用时候数据类型3\</p><p>3、上界和下界</p><p>规定整数Int x，规定x的取值范围  100 &lt;= x &lt;=1000        </p><p>泛型T的取值范围：类的继承关系  A —&gt; B  —&gt; C —&gt; D 箭头指向子类<br>定义T的取值范围   D   &lt;:     T     &lt;:  B   ，T 的 取值范围 就是 B C D<br><code>&lt;:</code> 就是上下界的表示方法<br>概念<br>上界  S  &lt;： T  规定了 S的类型必须是 T的子类或本身<br>下界  U  &gt;： T  规定了 U的类型必须是 T的父类或本身</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0327_my</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * 上界和下界</div><div class="line">  */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="comment">//函数：驾驶</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">drive</span></span>() = println(<span class="string">"driving"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">drive</span></span>(): <span class="type">Unit</span> = println(<span class="string">"Car Driving"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bike</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">drive</span></span>(): <span class="type">Unit</span> = println(<span class="string">"Bike Driving"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaUpperBound</span> </span>&#123;</div><div class="line">  <span class="comment">//定义驾驶佳通工具的函数,规定了上界</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">takeVehcli</span></span>[<span class="type">T</span> &lt;: <span class="type">Vehicle</span>](v: <span class="type">T</span>) = v.drive()</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//定义交通工具</span></div><div class="line">    <span class="keyword">var</span> v:<span class="type">Vehicle</span> = <span class="keyword">new</span> <span class="type">Vehicle</span></div><div class="line">    takeVehcli(v)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> c:<span class="type">Car</span> = <span class="keyword">new</span> <span class="type">Car</span></div><div class="line">    takeVehcli(c)</div><div class="line"></div><div class="line">    <span class="comment">//语法没错，运行时出错</span></div><div class="line">    <span class="keyword">var</span> b:<span class="type">Bike</span> = <span class="keyword">new</span> <span class="type">Bike</span></div><div class="line">    takeVehcli(b)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>4、视图界定</p><p>定义：上界和下界的扩展，除了接收上界和下界规定的类型以外，还可以接受通过隐式转换过去的类型，用<code>%</code>表示</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">addTwoString</span></span>[<span class="type">T</span> &lt;% <span class="type">String</span>](x:<span class="type">T</span>,y:<span class="type">T</span>) = x + <span class="string">"****"</span> + y</div><div class="line">addTwoString: [<span class="type">T</span>](x: <span class="type">T</span>, y: <span class="type">T</span>)(<span class="keyword">implicit</span> evidence$<span class="number">1</span>: <span class="type">T</span> =&gt; <span class="type">String</span>)<span class="type">String</span></div><div class="line"></div><div class="line">scala&gt; addTwoString(<span class="string">"hello"</span>,<span class="number">111</span>)</div><div class="line">&lt;console&gt;:<span class="number">13</span>: error: <span class="type">No</span> <span class="keyword">implicit</span> view available from <span class="type">Any</span> =&gt; <span class="type">String</span>.</div><div class="line">       addTwoString(<span class="string">"hello"</span>,<span class="number">111</span>)</div><div class="line">                   ^</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">intToString</span></span>(n:<span class="type">Int</span>):<span class="type">String</span> = n.toString</div><div class="line">warning: there was one feature warning; re-run <span class="keyword">with</span> -feature <span class="keyword">for</span> details</div><div class="line">intToString: (n: <span class="type">Int</span>)<span class="type">String</span></div><div class="line"></div><div class="line">scala&gt; addTwoString(<span class="number">222</span>,<span class="number">111</span>)</div><div class="line">res5: <span class="type">String</span> = <span class="number">222</span>****<span class="number">111</span></div></pre></td></tr></table></figure><p>​    隐式转换使用<code>implicit</code>关键字进行定义，一旦定义，后台一直运行，需要用的时候会自行调用，区别于上下界，隐式转换使用%,函数名任意取</p><p>执行过程：</p><ol><li>调用了intToString   将Int=&gt;String</li><li>addTwoString(“1”,”2”)</li></ol><p>5、协变和逆变(了解即可)</p><p>协变：表示在类型参数前面加上<code>+</code>,泛型变量的值，可以是本身类型或者其子类类型</p><p>逆变：表示在类型参数前面加上<code>-</code>,泛型变量的值，可以是本身类型或者其父类类型</p><p>协变：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0327_my</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sparrow</span> <span class="keyword">extends</span> <span class="title">Bird</span></span></div><div class="line"></div><div class="line"><span class="comment">//定义第四个类：吃东西的类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EatSomeSthing</span>[+<span class="type">T</span>](<span class="params">t:<span class="type">T</span></span>)</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo04</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</div><div class="line">  <span class="comment">//定义一个鸟吃东西的对象</span></div><div class="line">  <span class="keyword">var</span> c1:<span class="type">EatSomeSthing</span>[<span class="type">Bird</span>] = <span class="keyword">new</span> <span class="type">EatSomeSthing</span>[<span class="type">Bird</span>](<span class="keyword">new</span> <span class="type">Bird</span>)</div><div class="line"></div><div class="line">  <span class="comment">//定义动物吃东西的对象</span></div><div class="line">  <span class="keyword">var</span> c2:<span class="type">EatSomeSthing</span>[<span class="type">Animal</span>] = c1</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">    * 能否把c1赋给c2</div><div class="line">    * class EatSomeSthing[T](t:T)</div><div class="line">    * var c2:EatSomeSthing[Animal] = c1 报错</div><div class="line">    * 原因：EatSomeSthing[Bird]并没有继承EatSomeSthing[Animal]</div><div class="line">    * 修改为class EatSomeSthing[+T](t:T)</div><div class="line">    * 报错消失</div><div class="line">    */</div><div class="line"></div><div class="line">  <span class="keyword">var</span> c3:<span class="type">EatSomeSthing</span>[<span class="type">Sparrow</span>] = <span class="keyword">new</span> <span class="type">EatSomeSthing</span>[<span class="type">Sparrow</span>](<span class="keyword">new</span> <span class="type">Sparrow</span>)</div><div class="line">  <span class="keyword">var</span> c4:<span class="type">EatSomeSthing</span>[<span class="type">Animal</span>] = <span class="keyword">new</span> <span class="type">EatSomeSthing</span>[<span class="type">Animal</span>](<span class="keyword">new</span> <span class="type">Animal</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>逆变：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0327_my</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  *逆变实例</div><div class="line">  */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sparrow</span> <span class="keyword">extends</span> <span class="title">Bird</span></span></div><div class="line"></div><div class="line"><span class="comment">//定义第四个类：吃东西的类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EatSomeSthing</span>[-<span class="type">T</span>](<span class="params">t:<span class="type">T</span></span>)</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo05</span> <span class="keyword">extends</span> <span class="title">App</span></span>&#123;</div><div class="line">  <span class="comment">//定义一个鸟吃东西的对象</span></div><div class="line">  <span class="keyword">var</span> c1:<span class="type">EatSomeSthing</span>[<span class="type">Bird</span>] = <span class="keyword">new</span> <span class="type">EatSomeSthing</span>[<span class="type">Bird</span>](<span class="keyword">new</span> <span class="type">Bird</span>)</div><div class="line"></div><div class="line">  <span class="keyword">var</span> c2:<span class="type">EatSomeSthing</span>[<span class="type">Sparrow</span>] = c1</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="2、隐式转换"><a href="#2、隐式转换" class="headerlink" title="2、隐式转换"></a>2、隐式转换</h1><p>1、关键字<code>implicit</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0327_my</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * 隐式转换函数</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span>(<span class="params">name: <span class="type">String</span></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getFruitName</span></span>(): <span class="type">String</span> = name</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monkey</span>(<span class="params">f: <span class="type">Fruit</span></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">say</span></span>() = println(<span class="string">"Monkey like "</span> + f.getFruitName())</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImplicitDemo</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//定义一个水果对象</span></div><div class="line">    <span class="keyword">var</span> f: <span class="type">Fruit</span> = <span class="keyword">new</span> <span class="type">Fruit</span>(<span class="string">"Banana"</span>)</div><div class="line"></div><div class="line">    f.say()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//隐式转换</span></div><div class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">fruitToMonkey</span></span>(f: <span class="type">Fruit</span>): <span class="type">Monkey</span> = <span class="keyword">new</span> <span class="type">Monkey</span>(f)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>补充：隐式函数会在后台自行调用和检测</p><p>2、隐式参数：使用<code>implicit</code> 修饰的函数参数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">testPara</span></span>(<span class="keyword">implicit</span> name:<span class="type">String</span>) = println(<span class="string">"The value is "</span> + name)</div><div class="line">testPara: (<span class="keyword">implicit</span> name: <span class="type">String</span>)<span class="type">Unit</span></div><div class="line"></div><div class="line">scala&gt; testPara(<span class="string">"ssssssss"</span>)</div><div class="line"><span class="type">The</span> value is ssssssss</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">implicit</span> <span class="keyword">val</span> name:<span class="type">String</span> = <span class="string">"Gakki"</span></div><div class="line">name: <span class="type">String</span> = <span class="type">Gakki</span></div><div class="line"></div><div class="line">scala&gt; testPara(<span class="string">""</span>)</div><div class="line"><span class="type">The</span> value is</div><div class="line"></div><div class="line"><span class="comment">//不给参数，调用隐式参数</span></div><div class="line">scala&gt; testPara</div><div class="line"><span class="type">The</span> value is <span class="type">Gakki</span></div></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">smaller</span></span>[<span class="type">T</span>](a:<span class="type">T</span>,b:<span class="type">T</span>)(<span class="keyword">implicit</span> order : <span class="type">T</span> =&gt; <span class="type">Ordered</span>[<span class="type">T</span>]) = <span class="keyword">if</span> (a &lt; b) a <span class="keyword">else</span> b</div><div class="line">smaller: [<span class="type">T</span>](a: <span class="type">T</span>, b: <span class="type">T</span>)(<span class="keyword">implicit</span> prder: <span class="type">T</span> =&gt; <span class="type">Ordered</span>[<span class="type">T</span>])<span class="type">T</span></div><div class="line"></div><div class="line">scala&gt; smaller(<span class="string">"Hello"</span>,<span class="string">"ABC"</span>)</div><div class="line">res10: <span class="type">String</span> = <span class="type">ABC</span></div></pre></td></tr></table></figure><p>解释：order就是一个隐式参数，我们使用scala中的Ordered类，表示该值可以被排序，也就是可以被比较</p><p>作用：扩充了属性的功能</p><p>3、隐式类</p><p>在类名加<code>implicit</code>，作用是扩充类的功能</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0327_my</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * 隐式类</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo06</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//执行两个数字的求和</span></div><div class="line">    println(<span class="string">"两个数字的和是："</span> + <span class="number">1.</span>add(<span class="number">2</span>))</div><div class="line"></div><div class="line">     <span class="comment">//定义一个隐式类，来增强1的功能</span></div><div class="line">    <span class="keyword">implicit</span> <span class="class"><span class="keyword">class</span> <span class="title">Calc</span>(<span class="params">x: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">      <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(i: <span class="type">Int</span>): <span class="type">Int</span> = x + i</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>分析：   因为1是int类型，所以会被传递进来<br>执行过程：把1–&gt;Calc(x)执行 <code>var a = new Calc(1)</code>,最后调用了a.add方法，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、泛型&quot;&gt;&lt;a href=&quot;#1、泛型&quot; class=&quot;headerlink&quot; title=&quot;1、泛型&quot;&gt;&lt;/a&gt;1、泛型&lt;/h2&gt;&lt;p&gt;1、泛型类：定义类的时候，可以带有一个泛型的参数&lt;/p&gt;
&lt;p&gt;2、泛型函数：定义一个函数，可以带有一个泛型的参数&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Scala" scheme="rabbitluluu.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala进阶--模式匹配&amp;样本类</title>
    <link href="rabbitluluu.github.io/2019/03/30/Scala%E8%BF%9B%E9%98%B6-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D-%E6%A0%B7%E6%9C%AC%E7%B1%BB/"/>
    <id>rabbitluluu.github.io/2019/03/30/Scala进阶-模式匹配-样本类/</id>
    <published>2019-03-30T03:07:34.000Z</published>
    <updated>2019-03-30T03:09:13.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、模式匹配"><a href="#1、模式匹配" class="headerlink" title="1、模式匹配"></a>1、模式匹配</h1><p>情况1：相当于java的switch case</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo01</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> chi = '-'</div><div class="line">    <span class="keyword">var</span> sign = <span class="number">0</span></div><div class="line"></div><div class="line">    chi <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> '+' =&gt; sign = <span class="number">1</span></div><div class="line">      <span class="keyword">case</span> '-' =&gt; sign = <span class="number">-1</span></div><div class="line">      <span class="keyword">case</span> _ =&gt; sign = <span class="number">0</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    println(sign)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>情况2：使用了scala的守卫，形如<code>case _ if</code> 用来匹配某种类型的所有值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//情况2：匹配所有数字,</span></div><div class="line">   <span class="comment">// scala中的守卫: case _ if 匹配某种类型的所有值</span></div><div class="line">   <span class="keyword">var</span> ch2 = '<span class="number">6</span>'</div><div class="line">   <span class="keyword">var</span> result : <span class="type">Int</span> = <span class="number">-1</span></div><div class="line"></div><div class="line">   ch2 <span class="keyword">match</span> &#123;</div><div class="line">     <span class="keyword">case</span> '+' =&gt; println(<span class="string">"这是一个加号"</span>)</div><div class="line">     <span class="keyword">case</span> '-' =&gt; println(<span class="string">"这是一个减号"</span>)</div><div class="line">     <span class="keyword">case</span> _ <span class="keyword">if</span> <span class="type">Character</span>.isDigit(ch2) =&gt; result = <span class="type">Character</span>.digit(ch2,<span class="number">10</span>)</div><div class="line">     <span class="keyword">case</span> _ =&gt; println(<span class="string">"其他"</span>)</div><div class="line">   &#125;</div><div class="line">   println(result)</div></pre></td></tr></table></figure><p>情况3：在case中使用变量，如下<code>ch</code>是一个变量，代表传进来的变量值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//情况3：在模式匹配中使用变量</span></div><div class="line">   <span class="keyword">var</span> mystr = <span class="string">"Hello World"</span></div><div class="line"></div><div class="line">   mystr(<span class="number">7</span>) <span class="keyword">match</span> &#123;</div><div class="line">     <span class="keyword">case</span> '+' =&gt; println(<span class="string">"这是一个加号"</span>)</div><div class="line">     <span class="keyword">case</span> '-' =&gt; println(<span class="string">"这是一个减号"</span>)</div><div class="line">     <span class="keyword">case</span> ch =&gt; println(ch)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>情况4：类似于java的instance of  </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//情况4：匹配instance of</span></div><div class="line">   <span class="keyword">var</span> v4 : <span class="type">Any</span>= <span class="number">100</span></div><div class="line">   v4 <span class="keyword">match</span> &#123;</div><div class="line">     <span class="keyword">case</span> x : <span class="type">Int</span> =&gt; println(<span class="string">"这是一个整数"</span>)</div><div class="line">     <span class="keyword">case</span> s : <span class="type">String</span> =&gt; println(<span class="string">"这是一个字符串"</span>)</div><div class="line">     <span class="keyword">case</span> _ =&gt; println(<span class="string">"这是其他类型"</span>)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>情况5：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//情况5：匹配数组和列表，</span></div><div class="line">   <span class="keyword">var</span> myArray = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">   myArray <span class="keyword">match</span> &#123;</div><div class="line">     <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>) =&gt; println(<span class="string">"数组中只有一个0"</span>)</div><div class="line">     <span class="keyword">case</span> <span class="type">Array</span>(x,y) =&gt; println(<span class="string">"数组中包含两个元素"</span>)</div><div class="line">     <span class="keyword">case</span> <span class="type">Array</span>(x,y,z) =&gt; println(<span class="string">"数组包含是三个元素"</span>)</div><div class="line">     <span class="keyword">case</span> <span class="type">Array</span>(_*) =&gt; println(<span class="string">"这是一个有多个元素的数组"</span>)</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> myList = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">   myList <span class="keyword">match</span> &#123;</div><div class="line">     <span class="keyword">case</span> <span class="type">List</span>(<span class="number">0</span>) =&gt; println(<span class="string">"数组中只有一个0"</span>)</div><div class="line">     <span class="keyword">case</span> <span class="type">List</span>(x, y) =&gt; println(<span class="string">"数组中包含两个元素,和为："</span> + (x + y))</div><div class="line">     <span class="keyword">case</span> <span class="type">List</span>(x, y, z) =&gt; println(<span class="string">"数组包含是三个元素,和为："</span> + (x + y + z))</div><div class="line">     <span class="keyword">case</span> <span class="type">List</span>(_*) =&gt; println(<span class="string">"这是一个有多个元素的数组,和为："</span> + myList.sum)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h1 id="2、样本类"><a href="#2、样本类" class="headerlink" title="2、样本类"></a>2、样本类</h1><p>定义：case class</p><p>作用：</p><ol><li>支持模式匹配 instanceof</li><li>定一个Spark Sql中的schema：表结构</li></ol><p><strong>不用样本类的情况下：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span></div><div class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span></div><div class="line"></div><div class="line">scala&gt; <span class="class"><span class="keyword">class</span> <span class="title">Banana</span>(<span class="params">name:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Fruit</span></span></div><div class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">Banana</span></span></div><div class="line"></div><div class="line">scala&gt; <span class="class"><span class="keyword">class</span> <span class="title">Apple</span>(<span class="params">name:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Fruit</span></span></div><div class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="type">Apple</span>(<span class="string">"Apple"</span>)</div><div class="line">a: <span class="type">Apple</span> = <span class="type">Apple</span>@<span class="number">7e446</span>d92</div><div class="line"></div><div class="line"><span class="comment">//注意使用大括号</span></div><div class="line">scala&gt; println(a.isInstanceOf[<span class="type">Fruit</span>])</div><div class="line"><span class="literal">true</span></div><div class="line"></div><div class="line">scala&gt; println(a.isInstanceOf[<span class="type">Banana</span>])</div><div class="line">&lt;console&gt;:<span class="number">16</span>: warning: fruitless <span class="class"><span class="keyword">type</span> <span class="title">test</span></span>: a value of <span class="class"><span class="keyword">type</span> <span class="title">Apple</span> <span class="title">cannot</span> <span class="title">also</span> <span class="title">be</span> <span class="title">a</span> <span class="title">Banana</span></span></div><div class="line">println(a.isInstanceOf[<span class="type">Banana</span>])</div><div class="line">^</div><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure><p><strong>用样本类的情况：</strong></p><p>用case class来做模式匹配</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0327_my</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  *使用样本类</div><div class="line">  */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span></span></div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> (<span class="params">name : <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Vehicle</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Bike</span>(<span class="params">name : <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Vehicle</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo02OfCase</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">var</span> aCar : <span class="type">Vehicle</span> = <span class="keyword">new</span> <span class="type">Car</span>(<span class="string">"Car"</span>)</div><div class="line"></div><div class="line">    aCar <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="type">Car</span>(name) =&gt; println(<span class="string">"汽车---: "</span> + name)</div><div class="line">      <span class="keyword">case</span> <span class="type">Bike</span>(name) =&gt; println(<span class="string">"自行车---: "</span> + name)</div><div class="line">      <span class="keyword">case</span> _ =&gt; println(<span class="string">"嘛也不是"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="3、类型区分"><a href="#3、类型区分" class="headerlink" title="3、类型区分"></a>3、类型区分</h1><p><code>Any</code>：表示任何类型，相当于java中的Object</p><p><code>Unit</code>：表示没有值，void</p><p><code>Nothing</code>：在函数抛出异常时，返回值就是Nothing，是scala类层级中的最低端，他是任何其他类型的子类型</p><p><code>Null</code>：是所有引用类型的子类，值：null</p><p>特殊类型：</p><p><code>Option</code>：表示一个值是可选的（有/无值）</p><p><code>Some</code>：如果值存在，Option[T]就是一个Some</p><p><code>None</code>：如果值不存在，Option[T]就是None</p><p>四个N的区分：</p><p><code>None</code>：如果值不存在，Option[T]就是None</p><p><code>Nothing</code>：在函数抛出异常时，返回值就是Nothing</p><p><code>Null</code>：可以赋值给所有的引用类型，但不能赋值给值类型</p><p><code>Nil</code>：空的List</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、模式匹配&quot;&gt;&lt;a href=&quot;#1、模式匹配&quot; class=&quot;headerlink&quot; title=&quot;1、模式匹配&quot;&gt;&lt;/a&gt;1、模式匹配&lt;/h1&gt;&lt;p&gt;情况1：相当于java的switch case&lt;/p&gt;
&lt;figure class=&quot;highlight s
      
    
    </summary>
    
    
      <category term="Scala" scheme="rabbitluluu.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala进阶--集合</title>
    <link href="rabbitluluu.github.io/2019/03/27/Scala%E8%BF%9B%E9%98%B6-%E9%9B%86%E5%90%88/"/>
    <id>rabbitluluu.github.io/2019/03/27/Scala进阶-集合/</id>
    <published>2019-03-27T01:44:04.000Z</published>
    <updated>2019-03-27T01:45:26.886Z</updated>
    
    <content type="html"><![CDATA[<p>定位：类似于java集合</p><h2 id="1、可变集合和不可变集合（map）"><a href="#1、可变集合和不可变集合（map）" class="headerlink" title="1、可变集合和不可变集合（map）"></a>1、可变集合和不可变集合（map）</h2><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">math</span> </span>= scala.collection.immutable.<span class="type">Map</span>(<span class="string">"Gakki"</span> -&gt; <span class="number">80</span>, <span class="string">"Jojo"</span> -&gt; <span class="number">70</span>)</div><div class="line">math: scala.collection.immutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>]</div><div class="line"></div><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">math</span> </span>= scala.collection.mutable.<span class="type">Map</span>(<span class="string">"Gakki"</span> -&gt; <span class="number">80</span>, <span class="string">"Jojo"</span> -&gt; <span class="number">70</span>)</div><div class="line">math: scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>]</div></pre></td></tr></table></figure><p>操作：</p><ol><li><p>获取集合中操作</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">scala&gt; math(<span class="string">"Gakki"</span>)</div><div class="line">res1: <span class="type">Int</span> = <span class="number">80</span></div><div class="line"></div><div class="line">scala&gt; math.get(<span class="string">"Gakki"</span>)</div><div class="line">res2: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">Some</span>(<span class="number">80</span>)</div><div class="line"></div><div class="line">scala&gt; math.get(<span class="string">"Gakki111"</span>)</div><div class="line">res3: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">None</span></div><div class="line"></div><div class="line">scala&gt; math(<span class="string">"Gakki111"</span>)</div><div class="line">java.util.<span class="type">NoSuchElementException</span>: key not found: <span class="type">Gakki111</span></div><div class="line">  at scala.collection.<span class="type">MapLike</span>$<span class="class"><span class="keyword">class</span>.<span class="title">default</span>(<span class="params"><span class="type">MapLike</span>.scala:228</span>)</span></div><div class="line">  at scala.collection.<span class="type">AbstractMap</span>.<span class="keyword">default</span>(<span class="type">Map</span>.scala:<span class="number">59</span>)</div><div class="line">  at scala.collection.mutable.<span class="type">HashMap</span>.apply(<span class="type">HashMap</span>.scala:<span class="number">65</span>)</div><div class="line">  ... <span class="number">32</span> elided</div></pre></td></tr></table></figure></li><li><p>更新集合中的值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scala&gt; math(<span class="string">"Gakki"</span>) = <span class="number">99</span></div><div class="line"></div><div class="line">scala&gt; math</div><div class="line">res9: scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="type">Jojo</span> -&gt; <span class="number">70</span>, <span class="type">Gakki</span> -&gt; <span class="number">99</span>)</div></pre></td></tr></table></figure></li><li><p>添加元素</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; math += <span class="string">"Sean"</span> -&gt; <span class="number">99</span></div><div class="line">res10: scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="type">Sean</span> -&gt; <span class="number">99</span>, <span class="type">Jojo</span> -&gt; <span class="number">70</span>, <span class="type">Gakki</span> -&gt; <span class="number">80</span>)</div><div class="line"></div><div class="line">scala&gt; math</div><div class="line">res11: scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="type">Jojo</span> -&gt; <span class="number">70</span>, <span class="type">Gakki</span> -&gt; <span class="number">80</span>)</div></pre></td></tr></table></figure></li><li><p>移除元素</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; math -= <span class="string">"Sean"</span></div><div class="line">res12: scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="type">Jojo</span> -&gt; <span class="number">70</span>, <span class="type">Gakki</span> -&gt; <span class="number">80</span>)</div></pre></td></tr></table></figure></li></ol><h2 id="2、列表：可变列表，不可变列表"><a href="#2、列表：可变列表，不可变列表" class="headerlink" title="2、列表：可变列表，不可变列表"></a>2、列表：可变列表，不可变列表</h2><p><strong>不可变列表：</strong></p><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> myList  =  <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">myList: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">var</span> nullList : <span class="type">List</span>[<span class="type">Nothing</span>] = <span class="type">List</span>()</div><div class="line">nullList: <span class="type">List</span>[<span class="type">Nothing</span>] = <span class="type">List</span>()</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">var</span> dim : <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="type">List</span>(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</div><div class="line">dim: <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="type">List</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>))</div></pre></td></tr></table></figure><p>常见操作：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//首位元素</span></div><div class="line">scala&gt; myList.head</div><div class="line">res13: <span class="type">Int</span> = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">//除了第一个之外，其他的元素</span></div><div class="line">scala&gt; myList.tail</div><div class="line">res14: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div></pre></td></tr></table></figure><p><strong>可变列表：</strong>在<code>scala.collection.mutable</code>中</p><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> myList = scala.collection.mutable.<span class="type">LinkedList</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">warning: there was one deprecation warning; re-run <span class="keyword">with</span> -deprecation <span class="keyword">for</span> details</div><div class="line"></div><div class="line">myList: scala.collection.mutable.<span class="type">LinkedList</span>[<span class="type">Int</span>] = <span class="type">LinkedList</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure><p>操作：</p><p>将每个元素乘以2</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明指针</span></div><div class="line">scala&gt; <span class="keyword">var</span> cul = myList</div><div class="line">cul: scala.collection.mutable.<span class="type">LinkedList</span>[<span class="type">Int</span>] = <span class="type">LinkedList</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line"><span class="comment">//处理元素，Nil代表NULL，elem代表data，next是指向下一元素的指针</span></div><div class="line">scala&gt; <span class="keyword">while</span>(cul != <span class="type">Nil</span>)&#123;</div><div class="line">     | cul.elem *= <span class="number">2</span></div><div class="line">     | cul = cul.next</div><div class="line">     | &#125;</div><div class="line"></div><div class="line">scala&gt; myList</div><div class="line">res18: scala.collection.mutable.<span class="type">LinkedList</span>[<span class="type">Int</span>] = <span class="type">LinkedList</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>)</div></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用map，结合匿名函数进行运算</span></div><div class="line">scala&gt; myList.map(_ * <span class="number">2</span>)</div><div class="line">warning: there was one deprecation warning; re-run <span class="keyword">with</span> -deprecation <span class="keyword">for</span> details</div><div class="line"></div><div class="line">res19: scala.collection.mutable.<span class="type">LinkedList</span>[<span class="type">Int</span>] = <span class="type">LinkedList</span>(<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>)</div></pre></td></tr></table></figure><h2 id="3、序列"><a href="#3、序列" class="headerlink" title="3、序列"></a>3、序列</h2><h3 id="3-1、数据库数列：sequence-、-auto-increment"><a href="#3-1、数据库数列：sequence-、-auto-increment" class="headerlink" title="3,1、数据库数列：sequence 、 auto increment"></a>3,1、数据库数列：sequence 、 auto increment</h3><ul><li>作为主键，实现自动增长</li><li>提高性能，序列在Oracle是在内存中的</li></ul><h3 id="3-2、Vector和Range"><a href="#3-2、Vector和Range" class="headerlink" title="3.2、Vector和Range"></a>3.2、Vector和Range</h3><p><strong>Vector</strong> ：是一个带下标的序列，我们可以通过下标来访问Vector中的元素</p><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">v</span> </span>= <span class="type">Vector</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">v: scala.collection.immutable.<span class="type">Vector</span>[<span class="type">Int</span>]</div></pre></td></tr></table></figure><p><strong>Range</strong> ： 是一个整数的序列</p><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//含头不含尾</span></div><div class="line">scala&gt; <span class="type">Range</span>(<span class="number">0</span>,<span class="number">5</span>)</div><div class="line">res21: scala.collection.immutable.<span class="type">Range</span> = <span class="type">Range</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line">scala&gt; println(<span class="number">0</span> until <span class="number">5</span>)</div><div class="line"><span class="type">Range</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//包含头尾</span></div><div class="line">scala&gt; println(<span class="number">0</span> to <span class="number">5</span>)</div><div class="line"><span class="type">Range</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div></pre></td></tr></table></figure><p>Range可以相加：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; ('<span class="number">0</span>' to '<span class="number">9</span>') ++ ('<span class="type">A</span>' to '<span class="type">Z</span>')</div><div class="line">res22: scala.collection.immutable.<span class="type">IndexedSeq</span>[<span class="type">Char</span>] = <span class="type">Vector</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="type">A</span>, <span class="type">B</span>, <span class="type">C</span>, <span class="type">D</span>, <span class="type">E</span>, <span class="type">F</span>, <span class="type">G</span>, <span class="type">H</span>, <span class="type">I</span>, <span class="type">J</span>, <span class="type">K</span>, <span class="type">L</span>, <span class="type">M</span>, <span class="type">N</span>, <span class="type">O</span>, <span class="type">P</span>, <span class="type">Q</span>, <span class="type">R</span>, <span class="type">S</span>, <span class="type">T</span>, <span class="type">U</span>, <span class="type">V</span>, <span class="type">W</span>, <span class="type">X</span>, <span class="type">Y</span>, <span class="type">Z</span>)</div></pre></td></tr></table></figure><p>Range可以转换为List</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="number">1</span> to <span class="number">5</span> toList</div><div class="line">warning: there was one feature warning; re-run <span class="keyword">with</span> -feature <span class="keyword">for</span> details</div><div class="line">res23: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div></pre></td></tr></table></figure><h2 id="3、集（Set）"><a href="#3、集（Set）" class="headerlink" title="3、集（Set）"></a>3、集（Set）</h2><p><strong>Set：</strong></p><p>概念：不重复元素的集合，默认是HashSet，与java类似</p><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> s = <span class="type">Set</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>)</div><div class="line">s: scala.collection.mutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line">scala&gt; s + <span class="number">1</span></div><div class="line">res24: scala.collection.mutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line">scala&gt; s + <span class="number">2</span></div><div class="line">res25: scala.collection.mutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line">scala&gt; s</div><div class="line">res26: scala.collection.mutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure><p>运算后返回新的集，不改变原来集的元素</p><p><strong>SortedSet：</strong></p><p>概念：可排序的Set</p><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> s2 = scala.collection.mutable.<span class="type">SortedSet</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">8</span>)</div><div class="line">s2: scala.collection.mutable.<span class="type">SortedSet</span>[<span class="type">Int</span>] = <span class="type">TreeSet</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">10</span>)</div></pre></td></tr></table></figure><p>操作：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断元素是否存在</span></div><div class="line">scala&gt; s2.contains(<span class="number">1</span>)</div><div class="line">res53: <span class="type">Boolean</span> = <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">//定义两个Set</span></div><div class="line">scala&gt; <span class="keyword">var</span> s1 = <span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div><div class="line">s1: scala.collection.immutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">var</span> s2 = <span class="type">Set</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</div><div class="line">s2: scala.collection.immutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">8</span>)</div><div class="line"></div><div class="line"><span class="comment">//union操作：两个集相加</span></div><div class="line">scala&gt; s1 union s2</div><div class="line">res55: scala.collection.immutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>)</div><div class="line"><span class="comment">//intersect：交集</span></div><div class="line">scala&gt; s1 intersect s2</div><div class="line">res56: scala.collection.immutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">5</span>, <span class="number">6</span>)</div><div class="line"><span class="comment">//diff：差集</span></div><div class="line">scala&gt; s1 diff s2</div><div class="line">res57: scala.collection.immutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;定位：类似于java集合&lt;/p&gt;
&lt;h2 id=&quot;1、可变集合和不可变集合（map）&quot;&gt;&lt;a href=&quot;#1、可变集合和不可变集合（map）&quot; class=&quot;headerlink&quot; title=&quot;1、可变集合和不可变集合（map）&quot;&gt;&lt;/a&gt;1、可变集合和不可变集合（ma
      
    
    </summary>
    
    
      <category term="Scala" scheme="rabbitluluu.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala进阶--函数式编程</title>
    <link href="rabbitluluu.github.io/2019/03/27/Scala%E8%BF%9B%E9%98%B6-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>rabbitluluu.github.io/2019/03/27/Scala进阶-函数式编程/</id>
    <published>2019-03-27T01:43:52.000Z</published>
    <updated>2019-03-27T01:44:51.555Z</updated>
    
    <content type="html"><![CDATA[<p>多范式：面相对象，函数式编程（程序实现起来简单）</p><p>举例：wordcount</p><p>sc是SparkContext对象，非常重要！！</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = sc.textFile(<span class="string">"hdfs://xxxx//xxx/data.txt"</span>)</div><div class="line">.flatMap(_.split(<span class="string">" "</span>))</div><div class="line">.map((_,<span class="number">1</span>))</div><div class="line">.reduceByKey(_+_)</div><div class="line">.collect</div></pre></td></tr></table></figure><h1 id="1、匿名函数"><a href="#1、匿名函数" class="headerlink" title="1、匿名函数"></a>1、匿名函数</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> myarry = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">myarry: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">fun1</span></span>(x:<span class="type">Int</span>):<span class="type">Int</span> = x * <span class="number">3</span></div><div class="line">fun1: (x: <span class="type">Int</span>)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; (x:<span class="type">Int</span>) =&gt; x * <span class="number">3</span></div><div class="line">res0: <span class="type">Int</span> =&gt; <span class="type">Int</span> = &lt;function1&gt;</div><div class="line"></div><div class="line">scala&gt; myarry.map((x:<span class="type">Int</span>) =&gt; x * <span class="number">3</span>)</div><div class="line">res2: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>)</div></pre></td></tr></table></figure><p><code>(x:Int) =&gt; x * 3</code>作为参数，传到了另一个函数里面，同理<code>(_,1)</code>   <code>(_+_)</code>都是匿名函数</p><h1 id="2、高阶函数"><a href="#2、高阶函数" class="headerlink" title="2、高阶函数"></a>2、高阶函数</h1><p>定义：带有<strong>函数参数</strong>的<strong>函数</strong>，把一个函数作为另一个函数的参数值</p><p>如：定义一个高阶函数</p><p>对10做<strong>某种</strong>运算：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">someAction</span></span>(f:(<span class="type">Double</span>) =&gt; (<span class="type">Double</span>)) = f(<span class="number">10</span>)</div><div class="line">someAction: (f: <span class="type">Double</span> =&gt; <span class="type">Double</span>)<span class="type">Double</span></div><div class="line">scala&gt; <span class="keyword">import</span> scala.math._</div><div class="line"><span class="keyword">import</span> scala.math._</div><div class="line"></div><div class="line">scala&gt; someAction(sqrt)</div><div class="line">res3: <span class="type">Double</span> = <span class="number">3.1622776601683795</span></div><div class="line"></div><div class="line">scala&gt; someAction(sin)</div><div class="line">res4: <span class="type">Double</span> = <span class="number">-0.5440211108893698</span></div></pre></td></tr></table></figure><p><code>(Double) =&gt; (Double)</code>  代表f的类型，入参是double，返回值也是double</p><p><code>f(10)   ---&gt;  sqrt(10)</code></p><h2 id="2-1、高阶函数实例"><a href="#2-1、高阶函数实例" class="headerlink" title="2.1、高阶函数实例"></a>2.1、高阶函数实例</h2><p><strong>map：</strong>相当于一个循环，对某个集合中的每个元素都进行操作（接收一个函数），返回一个<strong>新的集合</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; var numbers = List(1,2,3,4,5,6,7,8)</div><div class="line">numbers: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8)</div><div class="line"></div><div class="line">scala&gt; numbers.map((i:Int) =&gt; i*2)</div><div class="line">res6: List[Int] = List(2, 4, 6, 8, 10, 12, 14, 16)</div><div class="line"></div><div class="line">scala&gt; numbers.map(_ * 2)</div><div class="line">res7: List[Int] = List(2, 4, 6, 8, 10, 12, 14, 16)</div></pre></td></tr></table></figure><ol><li><code>(i:Int) =&gt; i*2</code>  和  <code>_ * 2</code>   等价</li><li>两次结果相同，表名map操作并没有改变原来的值，而是返回了一个<strong>新的集合</strong>!!</li></ol><p><strong>foreach:</strong>相当于一个循环，对某个集合中的每个元素都进行操作（接收一个函数），不返回结果</p><p><strong>filter：</strong>过滤操作，选择满足的数据，返回bool值为true的数据</p><p>如下：查找能被2整除的</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; numbers.filter((i:<span class="type">Int</span>) =&gt; i%<span class="number">2</span> ==<span class="number">0</span>)</div><div class="line">res12: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>)</div></pre></td></tr></table></figure><p><strong>zip：</strong>合并数据，少的不合并</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).zip(<span class="type">List</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>))</div><div class="line">res13: <span class="type">List</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = <span class="type">List</span>((<span class="number">1</span>,<span class="number">5</span>), (<span class="number">2</span>,<span class="number">6</span>), (<span class="number">3</span>,<span class="number">7</span>))</div><div class="line"></div><div class="line">scala&gt; <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).zip(<span class="type">List</span>(<span class="number">5</span>,<span class="number">6</span>))</div><div class="line">res14: <span class="type">List</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = <span class="type">List</span>((<span class="number">1</span>,<span class="number">5</span>), (<span class="number">2</span>,<span class="number">6</span>))</div></pre></td></tr></table></figure><p><strong>partition：</strong>根据断言（就是<strong>某个条件</strong>，可以通过匿名函数来实现），来进行分区</p><p>如下：能被2整除的分成一个区，否则为另一个区</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; numbers.partition((i:<span class="type">Int</span>) =&gt; i%<span class="number">2</span> ==<span class="number">0</span>)</div><div class="line">res15: (<span class="type">List</span>[<span class="type">Int</span>], <span class="type">List</span>[<span class="type">Int</span>]) = (<span class="type">List</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>),<span class="type">List</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>))</div></pre></td></tr></table></figure><p><strong>find：</strong>查找第一个满足条件的元素</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; numbers.find(_%<span class="number">3</span> == <span class="number">0</span>)</div><div class="line">res16: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">Some</span>(<span class="number">3</span>)</div></pre></td></tr></table></figure><p><strong>flatten：</strong>把嵌套的结果展开</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="type">List</span>(<span class="type">List</span>(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>),<span class="type">List</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)).flatten</div><div class="line">res17: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</div></pre></td></tr></table></figure><p><strong>flatmap：</strong>相当于一个map+flatten</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> myList = <span class="type">List</span>(<span class="type">List</span>(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>),<span class="type">List</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>))</div><div class="line">myList: <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>(<span class="type">List</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>), <span class="type">List</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>))</div><div class="line"></div><div class="line">scala&gt; myList.flatMap(x =&gt; x.map(_*<span class="number">2</span>))</div><div class="line">res18: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">18</span>)</div><div class="line"></div><div class="line">scala&gt; myList.flatMap(_.map(_*<span class="number">2</span>))</div><div class="line">res4: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">18</span>)</div></pre></td></tr></table></figure><p>执行过程：</p><ol><li>将<code>List(List(2,4,6,8,10),List(1,3,5,7,9))</code>调用<code>map(_*2)</code>方法，x代表一个List</li><li>使用flatten来展开</li></ol><p>两者对比：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day03</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * 对比flatmap和map</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo02</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">    * .flatMap执行分析：</div><div class="line">    * x = 1 时，List(x * 2)  = List(2)</div><div class="line">    * x = 2 时，List(x * 2)  = List(4)</div><div class="line">    * x = 3 时，List('a', 'b')  = List('a', 'b')</div><div class="line">    *List(List(2),List(4),List('a', 'b')).flatmap ===&gt; List(2, 4, a, b)</div><div class="line">    * */</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">flatMap1</span></span>() = &#123;</div><div class="line">    <span class="keyword">val</span> li = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">    <span class="keyword">val</span> res = li.flatMap(x =&gt;</div><div class="line">      x <span class="keyword">match</span> &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span> =&gt; <span class="type">List</span>('a', 'b')</div><div class="line">        <span class="keyword">case</span> _ =&gt; <span class="type">List</span>(x * <span class="number">2</span>)</div><div class="line">      &#125;)</div><div class="line"></div><div class="line">    println(res)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">    * .map执行过程</div><div class="line">    * x = 1 时，x * 2  = 2 , List(2,2,3)</div><div class="line">    * x = 2 时，x * 2  = 4 , List(2,4,3)</div><div class="line">    * x = 3 时，List('a', 'b')  = List('a', 'b') , List(List(2), List(4), List(a, b))</div><div class="line">    * */</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">map1</span></span>() = &#123;</div><div class="line">    <span class="keyword">val</span> li = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">    <span class="keyword">val</span> res = li.map(x =&gt;</div><div class="line">      x <span class="keyword">match</span> &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span> =&gt; <span class="type">List</span>('a', 'b')</div><div class="line">        <span class="keyword">case</span> _ =&gt; <span class="type">List</span>(x * <span class="number">2</span>)</div><div class="line">      &#125;)</div><div class="line"></div><div class="line">    println(res)</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    flatMap1()</div><div class="line">    map1()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="3、闭包、柯里化"><a href="#3、闭包、柯里化" class="headerlink" title="3、闭包、柯里化"></a>3、闭包、柯里化</h1><ol><li>闭包：就是函数的嵌套，</li></ol><p>​    在一个函数里面，包含了另一个函数的定义</p><p>​    可以在内函数中访问外函数的变量</p><p>如：<code>def mulBy(factor:Double) = (x:Double) =&gt; x*factor</code></p><p>​                 外层                内层</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">mulBy</span></span>(factor:<span class="type">Double</span>) = (x:<span class="type">Double</span>) =&gt; x*factor</div><div class="line">mulBy: (factor: <span class="type">Double</span>)<span class="type">Double</span> =&gt; <span class="type">Double</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">var</span> triple = mulBy(<span class="number">3</span>)</div><div class="line">triple: <span class="type">Double</span> =&gt; <span class="type">Double</span> = &lt;function1&gt;</div><div class="line"></div><div class="line">scala&gt; triple(<span class="number">10</span>)</div><div class="line">res0: <span class="type">Double</span> = <span class="number">30.0</span></div><div class="line"></div><div class="line">scala&gt; triple(<span class="number">20</span>)</div><div class="line">res1: <span class="type">Double</span> = <span class="number">60.0</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">var</span> half = mulBy(<span class="number">0.5</span>)</div><div class="line">half: <span class="type">Double</span> =&gt; <span class="type">Double</span> = &lt;function1&gt;</div><div class="line"></div><div class="line">scala&gt; half(<span class="number">10</span>)</div><div class="line">res2: <span class="type">Double</span> = <span class="number">5.0</span></div><div class="line"></div><div class="line">scala&gt; mulBy(<span class="number">0.5</span>)(<span class="number">10</span>)</div><div class="line">res3: <span class="type">Double</span> = <span class="number">5.0</span></div></pre></td></tr></table></figure><ol><li>柯里化：具有多个参数的函数转化为一个函数链，每个节点上都是单一函数</li></ol><p>如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x:<span class="type">Int</span>,y:<span class="type">Int</span>) = x + y</div><div class="line">add: (x: <span class="type">Int</span>, y: <span class="type">Int</span>)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x:<span class="type">Int</span>)(y:<span class="type">Int</span>) = x + y</div><div class="line">add: (x: <span class="type">Int</span>)(y: <span class="type">Int</span>)<span class="type">Int</span></div></pre></td></tr></table></figure><p>转化过程如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原始：<span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x:<span class="type">Int</span>,y:<span class="type">Int</span>) = x+y</div><div class="line">闭包：<span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x:<span class="type">Int</span>) = (y:<span class="type">Int</span>) =&gt; x+y</div><div class="line">简写：<span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x:<span class="type">Int</span>)(y:<span class="type">Int</span>) = x+y</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多范式：面相对象，函数式编程（程序实现起来简单）&lt;/p&gt;
&lt;p&gt;举例：wordcount&lt;/p&gt;
&lt;p&gt;sc是SparkContext对象，非常重要！！&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
    
      <category term="Scala" scheme="rabbitluluu.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala进阶--面向对象</title>
    <link href="rabbitluluu.github.io/2019/03/25/Scala%E8%BF%9B%E9%98%B6-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>rabbitluluu.github.io/2019/03/25/Scala进阶-面向对象/</id>
    <published>2019-03-25T02:32:35.000Z</published>
    <updated>2019-03-27T01:43:08.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、面向对象"><a href="#1、面向对象" class="headerlink" title="1、面向对象"></a>1、面向对象</h1><p>概念：</p><ul><li>封装：把属性和操作属性的方法写在一起，定义为class</li><li>继承</li><li>多态</li></ul><p>java中面向对象的概念，适用于scala</p><h1 id="2、定义类"><a href="#2、定义类" class="headerlink" title="2、定义类"></a>2、定义类</h1><p>案例1：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student01</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//定义学生属性</span></div><div class="line">  <span class="keyword">private</span>  <span class="keyword">var</span> stuId:<span class="type">Int</span> = <span class="number">0</span></div><div class="line">  <span class="keyword">private</span>  <span class="keyword">var</span> stuAge:<span class="type">Int</span> = <span class="number">20</span></div><div class="line">  <span class="keyword">private</span>  <span class="keyword">var</span> stuName:<span class="type">String</span> = <span class="string">"Tom"</span></div><div class="line"></div><div class="line">  <span class="comment">//定义方法  set和get方法</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getStuName</span></span>():<span class="type">String</span> = stuName</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setStuName</span></span>(newName:<span class="type">String</span>) = <span class="keyword">this</span>.stuName = newName</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getStuAge</span></span>():<span class="type">Int</span> = stuAge</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setStuAge</span></span>(newAge:<span class="type">Int</span>) = <span class="keyword">this</span>.stuAge = newAge</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 注意:object 和 class  名字可以不一样</div><div class="line">  * 如果一样的话，这个object就叫做class的伴生对象</div><div class="line">  * 伴生对象时，可以直接访问类中的私有属性</div><div class="line">  * */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Student01</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//测试</span></div><div class="line">    <span class="comment">//创建学生独享</span></div><div class="line">    <span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="type">Student01</span></div><div class="line"></div><div class="line">    <span class="comment">//访问属性并输出</span></div><div class="line">    println(s1.getStuName() + <span class="string">"\t"</span> + s1.getStuAge())</div><div class="line"></div><div class="line">    <span class="comment">//访问set方法</span></div><div class="line">    s1.setStuName(<span class="string">"Gakki"</span>)</div><div class="line">    s1.setStuAge(<span class="number">18</span>)</div><div class="line">    println(s1.getStuName() + <span class="string">"\t"</span> + s1.getStuAge())</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">      * 直接访问私有属性</div><div class="line">      * */</div><div class="line">    println(<span class="string">"--------------访问私有属性---------------"</span>)</div><div class="line">    println(s1.stuName + <span class="string">"\t"</span> + s1.stuAge)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>说明：</p><p>为什么可以直接访问私有成员？</p><ol><li>当一个属性是private的时候，scala自动为其生成set和get方法，当进行<code>s1.stuName</code>或者<code>s1.stuAge</code>的时候默认调用了get方法，只不过恰好同名</li><li>如果只希望生成get方法不需要get方法—只需要将其定义为常量<code>val</code>即可</li><li>如果希望属性不能被外部访问  使用<code>private[this]</code>关键字</li></ol><h1 id="3、内部类（嵌套类）"><a href="#3、内部类（嵌套类）" class="headerlink" title="3、内部类（嵌套类）"></a>3、内部类（嵌套类）</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * 定义一个学生类，同时需要保存学生的成绩信息</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student02</span> </span>&#123;</div><div class="line">  <span class="comment">//定义学生的属性</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> stuName: <span class="type">String</span> = <span class="string">"Tom"</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> stuAge: <span class="type">Int</span> = <span class="number">20</span></div><div class="line"></div><div class="line">  <span class="comment">//定义数组保存课程成绩信息</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> courseList = <span class="keyword">new</span> <span class="type">ArrayBuffer</span>[<span class="type">Course</span>]()</div><div class="line"></div><div class="line">  <span class="comment">//定义一个函数，用来添加学生课程成绩</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">addNewCourse</span></span>(cname: <span class="type">String</span>, grade: <span class="type">Int</span>) = &#123;</div><div class="line">    <span class="comment">//创建课程成绩信息</span></div><div class="line">    <span class="keyword">var</span> c = <span class="keyword">new</span> <span class="type">Course</span>(cname, grade)</div><div class="line"></div><div class="line">    <span class="comment">//添加到学生对象中</span></div><div class="line">    courseList += c</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//定义课程类</span></div><div class="line">  <span class="comment">//括号里面写的就是定义的属性</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Course</span>(<span class="params">var courseName: <span class="type">String</span>, var grade: <span class="type">Int</span></span>) </span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Student02</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//创建学生对象</span></div><div class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="type">Student02</span>()</div><div class="line">    s.stuName = <span class="string">"Gakki"</span></div><div class="line">    s.stuAge = <span class="number">21</span></div><div class="line"></div><div class="line">    <span class="comment">//添加课程信息</span></div><div class="line">    s.addNewCourse(<span class="string">"chinese"</span>, <span class="number">70</span>)</div><div class="line">    s.addNewCourse(<span class="string">"Math"</span>, <span class="number">80</span>)</div><div class="line">    s.addNewCourse(<span class="string">"English"</span>, <span class="number">50</span>)</div><div class="line">println(<span class="string">"--------学生信息-------"</span>)</div><div class="line">    println(s.stuName + <span class="string">"\t"</span> + s.stuAge)</div><div class="line">    println(<span class="string">"--------课程信息-------"</span>)</div><div class="line">    <span class="keyword">for</span> (c &lt;- s.courseList) println(c.courseName + <span class="string">"\t"</span> + c.grade)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="4、类的构造器"><a href="#4、类的构造器" class="headerlink" title="4、类的构造器"></a>4、类的构造器</h1><p>主构造器：和类的声明在一起，并且一个类只能有一个主构造器</p><p><code>class Student03(var stuName: String, var age:Int){</code></p><p>辅助构造器：一个类可以有多个辅助构造器，通过this来实现</p><p><code>def this(age:Int){</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student03</span>(<span class="params">var stuName: <span class="type">String</span>, var age:<span class="type">Int</span></span>) </span>&#123;</div><div class="line">  <span class="comment">//定义辅助构造器---实质上就是一个函数，只不过名字叫this</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(age:<span class="type">Int</span>)&#123;</div><div class="line">    <span class="keyword">this</span>(<span class="string">"no name"</span>, age)</div><div class="line">    println(<span class="string">"这是辅助构造器"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Student03</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//使用主构造器创建一个对象--声明的时候按照参数列表给值</span></div><div class="line">    <span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="type">Student03</span>(<span class="string">"Gakki"</span>,<span class="number">20</span>)</div><div class="line">    println(s1.stuName + <span class="string">"\t"</span> + s1.age)</div><div class="line"></div><div class="line">    <span class="comment">//使用辅助构造器--根据给定参数自动推断使用哪一个辅助构造器</span></div><div class="line">    <span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="type">Student03</span>(<span class="number">25</span>)</div><div class="line">    println(s2.stuName + <span class="string">"\t"</span> + s2.age)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="5、object对象：相当于java的static"><a href="#5、object对象：相当于java的static" class="headerlink" title="5、object对象：相当于java的static"></a>5、object对象：相当于java的static</h1><p><strong>总结：</strong></p><ol><li>Object对象中的内容都是<strong>静态</strong></li><li>如果和类名相同，则称为<strong>伴生对象</strong></li><li>scala中没有static关键字</li></ol><p><strong>举例：</strong></p><ol><li><p>使用object来实现单例模式：一个类中只有一个对象</p><p>java中，把类的构造器定义成private，并提供一个getInstance,返回对象</p><p>scala中，使用object来实现</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 实现单例模式</div><div class="line">  **/</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">CreditCard</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//定义一个变量来保存信用卡卡号</span></div><div class="line">  <span class="keyword">private</span> [<span class="keyword">this</span>] <span class="keyword">var</span> creditCardNumber : <span class="type">Long</span> = <span class="number">0</span></div><div class="line"></div><div class="line">  <span class="comment">//定义函数来产生卡号</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generateNum</span></span>() : <span class="type">Long</span> = &#123;</div><div class="line">    creditCardNumber += <span class="number">1</span></div><div class="line">    creditCardNumber</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    println(<span class="type">CreditCard</span>.generateNum())</div><div class="line">    println(<span class="type">CreditCard</span>.generateNum())</div><div class="line">    println(<span class="type">CreditCard</span>.generateNum())</div><div class="line">    println(<span class="type">CreditCard</span>.generateNum())</div><div class="line">    println(<span class="type">CreditCard</span>.generateNum())</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>使用App对象：应用程序对象</p><p>好处：可以省略main方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</div><div class="line">  <span class="comment">//不需要main函数，直接能运行</span></div><div class="line">  println(<span class="string">"hello world"</span>)</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(args.length &gt; <span class="number">0</span>)&#123;</div><div class="line">    println(<span class="string">"有参数"</span>)</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    println(<span class="string">"无参数"</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/*  def main(args: Array[String]): Unit = &#123;</span></div><div class="line">      println("hello world")</div><div class="line">    &#125;*/</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h1 id="6、apply方法"><a href="#6、apply方法" class="headerlink" title="6、apply方法"></a>6、apply方法</h1><p>当使用<code>val t1 = Tuple(&quot;gakki&quot;,20)</code>时，并没有new关键字，实质为调用<strong>apply方法</strong>创建对象</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student04</span>(<span class="params">var stuName:<span class="type">String</span></span>)</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 定义student04的apply方法</div><div class="line">  * */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Student04</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(name:<span class="type">String</span>) = &#123;</div><div class="line">    println(<span class="string">"调用apply方法"</span>)</div><div class="line">    <span class="keyword">new</span> <span class="type">Student04</span>(name)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//通过主构造器来创建学生对象</span></div><div class="line">    <span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="type">Student04</span>(<span class="string">"Jojo"</span>)</div><div class="line">    println(s1.stuName)</div><div class="line"></div><div class="line">    <span class="comment">//通过apply方法创建学生对象，省略new</span></div><div class="line">    <span class="keyword">var</span> s2 = <span class="type">Student04</span>(<span class="string">"Gakki"</span>)</div><div class="line">    println(s2.stuName)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><font color="red"><strong>注意：apply方法必须写在伴生对象中，也就是object中</strong></font><h1 id="7、继承"><a href="#7、继承" class="headerlink" title="7、继承"></a>7、继承</h1><ol><li><p>使用<code>extends</code>关键字，和java类似</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02_my</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 定义父类和子类实现继承和重写</div><div class="line">  */</div><div class="line"></div><div class="line"><span class="comment">//定义父类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">val name: <span class="type">String</span>, val age: <span class="type">Int</span></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//定义函数</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span></span>(): <span class="type">String</span> = <span class="string">"Hello "</span> + name + <span class="string">" and the age is "</span> + age</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义子类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>(<span class="params">override val name: <span class="type">String</span>, override val age: <span class="type">Int</span>, val salary: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="comment">//重写父类方法</span></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span></span>(): <span class="type">String</span> = <span class="string">"子类中的sayHello"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ExtendsTest</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</div><div class="line">  <span class="comment">//定义父类对象</span></div><div class="line">  <span class="keyword">val</span> p1 : <span class="type">Person</span>= <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"Gakki"</span>,<span class="number">20</span>)</div><div class="line">  println(p1.name + <span class="string">"\t"</span> +p1.age)</div><div class="line">  println(p1.sayHello())</div><div class="line"></div><div class="line">  <span class="comment">//定义一个子类对象</span></div><div class="line">  <span class="keyword">val</span> p2 :<span class="type">Person</span> = <span class="keyword">new</span> <span class="type">Employee</span>(<span class="string">"Jojo"</span>,<span class="number">25</span>,<span class="number">1000</span>)</div><div class="line">  println(p2.sayHello())</div><div class="line"></div><div class="line">  <span class="comment">//匿名子类</span></div><div class="line">  <span class="keyword">val</span> p3 :<span class="type">Person</span> = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"Mary"</span>, <span class="number">23</span>)&#123;</div><div class="line">    <span class="comment">//匿名子类中重写sayhello方法</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span></span>(): <span class="type">String</span> = <span class="string">"匿名子类中重写sayhello方法"</span></div><div class="line">  &#125;</div><div class="line">  println(p3.sayHello())</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>抽象类和抽象字段</p><p>抽象类：只能用于继承的类，可以包含抽象方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"><span class="comment">//定义父类:交通工具</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span></span>&#123;</div><div class="line">  <span class="comment">//抽象方法</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">checkType</span></span>() : <span class="type">String</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//定义子类1：自行车</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span></span>&#123;</div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">checkType</span></span>(): <span class="type">String</span> = <span class="string">"I am a car"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义子类2：汽车</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bike</span> <span class="keyword">extends</span> <span class="title">Vehicle</span></span>&#123;</div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">checkType</span></span>(): <span class="type">String</span> = <span class="string">"I am a Bike"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo2</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">var</span> v1 : <span class="type">Vehicle</span> = <span class="keyword">new</span> <span class="type">Car</span></div><div class="line">    println(v1.checkType())</div><div class="line"></div><div class="line">    <span class="keyword">var</span> v2 : <span class="type">Vehicle</span> = <span class="keyword">new</span> <span class="type">Bike</span></div><div class="line">    println(v2.checkType())</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>抽象字段：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *抽象字段</div><div class="line">  * 定义：没有初始值的字段</div><div class="line">  */</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person1</span></span>&#123;</div><div class="line">  <span class="comment">//定义抽象字段</span></div><div class="line">  <span class="keyword">var</span> id : <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> name : <span class="type">String</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//方法1：如果不加abstract会报错</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee1</span> <span class="keyword">extends</span> <span class="title">Person1</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//方法2：如果不加abstract，可以将抽象字段放在主构造器中</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee2</span>(<span class="params">var id:<span class="type">Int</span>, var name:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Person1</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//方法3：也可以给抽象字段初始值</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee3</span> <span class="keyword">extends</span> <span class="title">Person1</span></span>&#123;</div><div class="line">  <span class="keyword">var</span> id : <span class="type">Int</span> = <span class="number">0</span></div><div class="line">  <span class="keyword">var</span> name : <span class="type">String</span> = <span class="string">""</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo3</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h1 id="8、特质：trait"><a href="#8、特质：trait" class="headerlink" title="8、特质：trait"></a>8、特质：trait</h1><p>本质：scala的一个<strong>抽象类</strong>,作用是用来多重继承</p><p>继承的时候使用with关键字，需要重写抽象方法和给抽象字段赋值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day03</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * trait:可以实现多重继承</div><div class="line">  *</div><div class="line">  * 定义两个父类,两个trait</div><div class="line">  * 父类：人  动作</div><div class="line">  * 子类：学生</div><div class="line">  */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Human</span> </span>&#123;</div><div class="line">  <span class="comment">//抽象字段</span></div><div class="line">  <span class="keyword">val</span> id: <span class="type">Int</span></div><div class="line">  <span class="keyword">val</span> name: <span class="type">String</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Action</span></span>&#123;</div><div class="line">  <span class="comment">//抽象方法</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getActionName</span></span>():<span class="type">String</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 使用trait实现了多重继承</div><div class="line">* */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1</span>(<span class="params">val id:<span class="type">Int</span>,val name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Human</span> <span class="keyword">with</span> <span class="title">Action</span> </span>&#123;</div><div class="line">    <span class="comment">//抽象字段写入到主构造器，重写抽象方法</span></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getActionName</span></span>(): <span class="type">String</span> = <span class="string">"Action is running"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo01</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//创建学生对象</span></div><div class="line">    <span class="keyword">val</span> s1 = <span class="keyword">new</span> <span class="type">Student1</span>(<span class="number">1011</span>, <span class="string">"Gakki"</span>)</div><div class="line">    println(s1.id + <span class="string">"\t"</span> + s1.name)</div><div class="line">    println(s1.getActionName())</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="9、包和包对象"><a href="#9、包和包对象" class="headerlink" title="9、包和包对象"></a>9、包和包对象</h1><p><strong>包</strong>：package，Scala中依然使用<strong>import</strong>作为引用包的关键字，引入包时下划线<code>_</code>和java中的<code>*</code>同义，并且import可以写在任意地方</p><p>​    包可以包含类、对象和特质，但不能包含函数或者变量的定义。很不幸，这是Java虚拟机的局限。</p><p>把工具函数或者常量添加到包而不是某个Utils对象，这是更加合理的做法。Scala中，包对象的出现正是为了解决这个局限。</p><p><strong>包对象</strong>：可以包含常量，变量，方法，类，对象，trait（特质）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、面向对象&quot;&gt;&lt;a href=&quot;#1、面向对象&quot; class=&quot;headerlink&quot; title=&quot;1、面向对象&quot;&gt;&lt;/a&gt;1、面向对象&lt;/h1&gt;&lt;p&gt;概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装：把属性和操作属性的方法写在一起，定义为class&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="Scala" scheme="rabbitluluu.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>初识Scala</title>
    <link href="rabbitluluu.github.io/2019/03/25/%E5%88%9D%E8%AF%86Scala/"/>
    <id>rabbitluluu.github.io/2019/03/25/初识Scala/</id>
    <published>2019-03-25T02:32:10.000Z</published>
    <updated>2019-03-25T07:04:55.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、数据类型和变量常量"><a href="#1、数据类型和变量常量" class="headerlink" title="1、数据类型和变量常量"></a>1、数据类型和变量常量</h1><ol><li><p>scala中所有的数据都是对象，如在java中1是int类型，scala中1是一个对象，有自己的方法</p></li><li><p>基本数据类型</p><p>Byte    8位有符号数字<br>Short    16位有符号数字<br>Int    …<br>Long<br>Float<br>Double         </p><p>字符串类型<br>String<br>字符<br>Char</p></li></ol><p>插值操作：</p><p>​    <code>var s1:String = &quot;hello&quot;</code></p><p>​    <code>s&quot;my name is ${s1}&quot;</code></p><p>加一个小s可以实现插值</p><ol><li><p>变量var和常量val</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; val s2 :String = &quot;Hello all&quot;</div><div class="line">s2: String = Hello all</div><div class="line">scala&gt; s2 = &quot;Hello everyone&quot;</div><div class="line">&lt;console&gt;:12: error: reassignment to val</div><div class="line">s2 = &quot;Hello everyone&quot;</div></pre></td></tr></table></figure></li><li><p>Unit类型和Nothing类型</p><p><strong>Unit</strong>：</p><p>Unit类型，就是java中的void，没有返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; val f = ()</div><div class="line">f: Unit = ()</div></pre></td></tr></table></figure><p>返回值 Unit类型</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">() 代表了一个函数，这个函数没有返回值</div></pre></td></tr></table></figure><p>   <strong>Nothing</strong>：</p><p>   Nothing类型，在执行过程中，产生了异常Exception</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; def myFun = throw new Exception(&quot;Some Error&quot;)</div><div class="line">myFun: Nothing</div></pre></td></tr></table></figure><h1 id="2、函数–头等公民"><a href="#2、函数–头等公民" class="headerlink" title="2、函数–头等公民"></a>2、函数–头等公民</h1><h2 id="2-1、scala内置函数"><a href="#2-1、scala内置函数" class="headerlink" title="2.1、scala内置函数"></a>2.1、scala内置函数</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">scala&gt; max(<span class="number">1</span>,<span class="number">5</span>)</div><div class="line">&lt;console&gt;:<span class="number">12</span>: error: not found: value max</div><div class="line">       max(<span class="number">1</span>,<span class="number">5</span>)</div><div class="line">       ^</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">import</span> scala.math._</div><div class="line"><span class="keyword">import</span> scala.math._</div><div class="line"></div><div class="line">scala&gt; max(<span class="number">1</span>,<span class="number">5</span>)</div><div class="line">res1: <span class="type">Int</span> = <span class="number">5</span></div></pre></td></tr></table></figure><p><strong>_ 就相当于java中的 * 代表包内所有东西</strong></p><p><strong>定义了一个变量 res1 ，接收了 max 函数的返回值。scala中支持类型的推导。</strong></p><h2 id="2-2、scala自定义函数"><a href="#2-2、scala自定义函数" class="headerlink" title="2.2、scala自定义函数"></a>2.2、scala自定义函数</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def 函数名称（[参数名称：参数类型]*） : 返回值类型 = &#123;</div><div class="line">函数的实现</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li><p>返回值类型可不写，scala支持类型推导</p></li><li><p>参数可以有多个</p></li><li><p>函数主体只有一行时，可以省略大括号</p></li></ol><p>案例1：</p><p>需求：求两int整数和</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(x:<span class="type">Int</span>, y:<span class="type">Int</span>):<span class="type">Int</span>=x+y</div><div class="line">sum: (x: <span class="type">Int</span>, y: <span class="type">Int</span>)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; sum(<span class="number">1</span>,<span class="number">5</span>)</div></pre></td></tr></table></figure><p>案例2：</p><p>需求：求x的阶乘</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">factorial</span></span>(x:<span class="type">Int</span>):<span class="type">Int</span>=&#123;</div><div class="line">     | <span class="keyword">if</span>(x &lt;=<span class="number">1</span> ) <span class="number">1</span></div><div class="line">     | <span class="keyword">else</span></div><div class="line">     | x * factorial(x - <span class="number">1</span>)</div><div class="line">     | &#125;</div><div class="line">factorial: (x: <span class="type">Int</span>)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; factorial(<span class="number">5</span>)</div><div class="line">res3: <span class="type">Int</span> = <span class="number">120</span></div></pre></td></tr></table></figure><font color="red">没有return，函数的最后一行就是返回值</font><p>案例3：</p><p>需求：求输入的年份是否是闰年</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">isLeapYear</span></span>(year : <span class="type">Int</span>)=&#123;</div><div class="line">     | <span class="keyword">if</span>((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">0</span>)) <span class="literal">true</span></div><div class="line">     | <span class="keyword">else</span> <span class="literal">false</span></div><div class="line">     | &#125;</div><div class="line">isLeapYear: (year: <span class="type">Int</span>)<span class="type">Boolean</span></div><div class="line"></div><div class="line">scala&gt; isLeapYear(<span class="number">2015</span>)</div><div class="line">res5: <span class="type">Boolean</span> = <span class="literal">false</span></div><div class="line"></div><div class="line">scala&gt; isLeapYear(<span class="number">2016</span>)</div><div class="line">res6: <span class="type">Boolean</span> = <span class="literal">true</span></div></pre></td></tr></table></figure><font color="red">可以不写返回值类型，支持类型推导</font><h1 id="3、循环语句"><a href="#3、循环语句" class="headerlink" title="3、循环语句"></a>3、循环语句</h1><ol><li>类似于java的用法，while、dowhile、for</li><li>foreach循环（spark算子）</li></ol><h2 id="3-1、for循环"><a href="#3-1、for循环" class="headerlink" title="3.1、for循环"></a>3.1、for循环</h2><p>提前创建list：</p><p><code>var list = List(&quot;Jojo&quot;, &quot;Sean&quot;, &quot;Gakki&quot;)</code></p><p><strong>法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">println(&quot;--------------for循环:法1----------------&quot;)</div><div class="line">for(s &lt;- list) println(s)</div></pre></td></tr></table></figure><p><strong>&lt;-    :scala中的提取符</strong></p><p><strong>法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">println(&quot;--------------for循环:法2----------------&quot;)</div><div class="line">for&#123;</div><div class="line">   s &lt;- list</div><div class="line">   if(s.length &gt; 3)</div><div class="line">&#125;println(s)</div></pre></td></tr></table></figure><p><strong>法3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">println(&quot;--------------for循环:法3----------------&quot;)</div><div class="line">    for (s &lt;- list if s.length &lt;= 4) println(s)</div></pre></td></tr></table></figure><p>对于第二种的进一步精简</p><p><strong>法4：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"--------------for循环:法3----------------"</span>)</div><div class="line">    <span class="comment">/*</span></div><div class="line">    * 1.把list中所有元素都变成大写</div><div class="line">    * 2.返回一个新的集合</div><div class="line">    * */</div><div class="line">    <span class="keyword">var</span> newList = <span class="keyword">for</span>&#123;</div><div class="line">      s &lt;- list</div><div class="line">      <span class="comment">//变成大写</span></div><div class="line">      s1 = s.toUpperCase</div><div class="line">      <span class="comment">//返回新集合</span></div><div class="line">    &#125;<span class="keyword">yield</span> (s1)</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(s &lt;- newList) println(s)</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h2 id="3-2、while循环"><a href="#3-2、while循环" class="headerlink" title="3.2、while循环"></a>3.2、while循环</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"--------------while循环----------------"</span>)</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> (i &lt; list.length)&#123;</div><div class="line">      println(list(i))</div><div class="line">      <span class="comment">//scala中没有自增i++</span></div><div class="line">      i += <span class="number">1</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="3-3、dowhile循环"><a href="#3-3、dowhile循环" class="headerlink" title="3.3、dowhile循环"></a>3.3、dowhile循环</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"--------------dowhile循环----------------"</span>)</div><div class="line">    <span class="keyword">var</span> j = <span class="number">0</span></div><div class="line">    do&#123;</div><div class="line">      println(list(j))</div><div class="line">      j += <span class="number">1</span></div><div class="line">    &#125;<span class="keyword">while</span>(j &lt; list.length)</div></pre></td></tr></table></figure><h2 id="3-4、foreach循环"><a href="#3-4、foreach循环" class="headerlink" title="3.4、foreach循环"></a>3.4、foreach循环</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"--------------for each循环----------------"</span>)</div><div class="line">   <span class="comment">/*</span></div><div class="line">   * scala和spark都会用for each循环</div><div class="line">   * 该循环没有返回值，但是map有返回值</div><div class="line">   * foreach是list的一个方法</div><div class="line">   * */</div><div class="line">   list.foreach(println)</div></pre></td></tr></table></figure><p>说明：foreach()参数也得是一个函数，如上的println</p><h2 id="3-4、循环案例"><a href="#3-4、循环案例" class="headerlink" title="3.4、循环案例"></a>3.4、循环案例</h2><h3 id="3-4-1、判断素数"><a href="#3-4-1、判断素数" class="headerlink" title="3.4.1、判断素数"></a>3.4.1、判断素数</h3><p>需求：判断101~200之间有多少素数</p><p>思路：当2~开根号的数都不能呗整除的时候，就是素数</p><p>代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"--------------案例一----------------"</span>)</div><div class="line">    <span class="keyword">var</span> count: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> index_outer = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> index_inner = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (index_outer &lt;- <span class="number">101</span> until <span class="number">200</span>) &#123;</div><div class="line"></div><div class="line">      <span class="keyword">var</span> temp = <span class="literal">false</span> <span class="comment">//标识是否能被整除</span></div><div class="line">      index_inner = <span class="number">2</span></div><div class="line"></div><div class="line">      breakable &#123;</div><div class="line">        <span class="keyword">while</span> (index_inner &lt;= sqrt(index_outer)) &#123;</div><div class="line">          <span class="keyword">if</span> (index_outer % index_inner == <span class="number">0</span>) &#123;</div><div class="line">            temp = <span class="literal">true</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">          &#125;</div><div class="line">          index_inner += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (!temp) count += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    println(<span class="string">"count:"</span> + count)</div></pre></td></tr></table></figure><h3 id="3-4-2、实现冒泡排序"><a href="#3-4-2、实现冒泡排序" class="headerlink" title="3.4.2、实现冒泡排序"></a>3.4.2、实现冒泡排序</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"--------------案例二----------------"</span>)</div><div class="line">    <span class="keyword">var</span> arry = <span class="type">Array</span>(<span class="number">4</span>, <span class="number">8</span>, <span class="number">21</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">24</span>, <span class="number">12</span>, <span class="number">3</span>)</div><div class="line">    </div><div class="line">    println(<span class="string">"--------------排序前----------------"</span>)</div><div class="line">    arry.foreach(println)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until arry.length) &#123;</div><div class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">0</span> until arry.length - i - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (arry(j) &gt; arry(j+<span class="number">1</span>)) &#123;</div><div class="line">          <span class="comment">//执行交换</span></div><div class="line">          <span class="keyword">var</span> temp = arry(j)</div><div class="line">          arry(j) = arry(j+<span class="number">1</span>)</div><div class="line">          arry(j+<span class="number">1</span>) = temp</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    println(<span class="string">"--------------排序后----------------"</span>)</div><div class="line">    arry.foreach(println)</div></pre></td></tr></table></figure><h1 id="4、scala的函数参数"><a href="#4、scala的函数参数" class="headerlink" title="4、scala的函数参数"></a>4、scala的函数参数</h1><h2 id="4-1、函数参数的求值策略"><a href="#4-1、函数参数的求值策略" class="headerlink" title="4.1、函数参数的求值策略"></a>4.1、函数参数的求值策略</h2><p>call by name      <code>:</code></p><p>对函数的实参求值</p><p>call by value       <code>: =&gt;</code></p><p>函数实参在函数内部用到的时候，才会被求值</p><p><strong>例1：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">test1</span></span>(x:<span class="type">Int</span>,y:<span class="type">Int</span>) = x + x</div><div class="line">test1: (x: <span class="type">Int</span>, y: <span class="type">Int</span>)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">test2</span></span>(x: =&gt; <span class="type">Int</span>,y: =&gt;<span class="type">Int</span>) = x + x</div><div class="line">test2: (x: =&gt; <span class="type">Int</span>, y: =&gt; <span class="type">Int</span>)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; test1(<span class="number">3</span>+<span class="number">4</span>,<span class="number">8</span>)</div><div class="line">res8: <span class="type">Int</span> = <span class="number">14</span></div><div class="line"></div><div class="line">scala&gt; test2(<span class="number">3</span>+<span class="number">4</span>,<span class="number">8</span>)</div><div class="line">res9: <span class="type">Int</span> = <span class="number">14</span></div></pre></td></tr></table></figure><p>解析：</p><p>test1使用的call by value，test2使用的call by name</p><p>运行结果一样，但是过程却不同</p><p>test1     —&gt;     test1(3+4,8)      —&gt;     test1(7,8)      —&gt;     7+7     —&gt;     14<br>test2     —&gt;     test2(3+4,8)      —&gt;     (3+4) + (3+4)      —&gt;     14</p><p><strong>例2：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">bar</span></span>(x:<span class="type">Int</span>,y : =&gt; <span class="type">Int</span>) : <span class="type">Int</span> = <span class="number">1</span></div><div class="line">bar: (x: <span class="type">Int</span>, y: =&gt; <span class="type">Int</span>)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">loop</span></span>() : <span class="type">Int</span> = loop</div><div class="line">loop: ()<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; bar(<span class="number">1</span>,loop)</div><div class="line">res11: <span class="type">Int</span> = <span class="number">1</span></div><div class="line"></div><div class="line">scala&gt; bar(loop,<span class="number">1</span>)</div><div class="line">程序卡死</div></pre></td></tr></table></figure><p>解析：</p><p>bar函数中，x使用的call by value，y使用的是call by name</p><ol><li>虽然 y 是 name, 每次调用的时候会被求值。但是，函数体内，没有调用到y，故不会产生死循环</li><li>x 是 value，对函数参数求值，并且只求一次。虽然后面没有用到x，但求值时产生了死循环。</li></ol><h2 id="4-2、scala函数参数的类型"><a href="#4-2、scala函数参数的类型" class="headerlink" title="4.2、scala函数参数的类型"></a>4.2、scala函数参数的类型</h2><ol><li><p>默认参数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">fun1</span></span>(x:<span class="type">String</span> = <span class="string">"Gakki"</span>) = x + <span class="string">" is a beautiful girl"</span></div><div class="line">fun1: (x: <span class="type">String</span>)<span class="type">String</span></div><div class="line"></div><div class="line">scala&gt; fun1()</div><div class="line">res4: <span class="type">String</span> = <span class="type">Gakki</span> is a beautiful girl</div><div class="line"></div><div class="line">scala&gt; fun1(<span class="string">"Sean"</span>)</div><div class="line">res5: <span class="type">String</span> = <span class="type">Sean</span> is a beautiful girl</div></pre></td></tr></table></figure><p>给变量一个默认值，在调用的时候空参，会调用默认值</p></li><li><p>代名参数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">fun2</span></span>(name:<span class="type">String</span> = <span class="string">"Gakki"</span>, age:<span class="type">Int</span> = <span class="number">20</span>) = <span class="string">"name is:"</span> + name + <span class="string">",age is:"</span> + age</div><div class="line">fun2: (name: <span class="type">String</span>, age: <span class="type">Int</span>)<span class="type">String</span></div><div class="line"></div><div class="line">scala&gt; fun2()</div><div class="line">res0: <span class="type">String</span> = name is:<span class="type">Gakki</span>,age is:<span class="number">20</span></div><div class="line"></div><div class="line">scala&gt; fun2(age = <span class="number">18</span>)</div><div class="line">res1: <span class="type">String</span> = name is:<span class="type">Gakki</span>,age is:<span class="number">18</span></div></pre></td></tr></table></figure><p>指定更改某个参数的值，没有被指定的参数继续使用默认值</p></li><li><p>可变参数</p><p>类似于java中的可变长参数…</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(args:<span class="type">Int</span>*)=&#123;</div><div class="line">     | <span class="keyword">var</span> result = <span class="number">0</span></div><div class="line">     | <span class="keyword">for</span>(s &lt;- args) result += s</div><div class="line">     | result</div><div class="line">     | &#125;</div><div class="line">sum: (args: <span class="type">Int</span>*)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>)</div><div class="line">res2: <span class="type">Int</span> = <span class="number">45</span></div></pre></td></tr></table></figure></li></ol><h1 id="5、懒值（lazy）"><a href="#5、懒值（lazy）" class="headerlink" title="5、懒值（lazy）"></a>5、懒值（lazy）</h1><p>铺垫：spark的核心是RDD（数据集合），操作数据集合的数据，使用算子来操作RDD（函数、方法）</p><p>算子：</p><p>​    Transformation：延时加载，不会触发计算</p><p>​    Action：会立刻触发计算</p><p>懒值定义：常量如果是lazy的，他的初始化会被延迟，推迟到第一次使用该常量时</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> x:<span class="type">Int</span> = <span class="number">10</span></div><div class="line">x: <span class="type">Int</span> = <span class="number">10</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> y:<span class="type">Int</span> = x+<span class="number">1</span></div><div class="line">y: <span class="type">Int</span> = <span class="number">11</span>         <span class="comment">//定义后会立即进行计算</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">lazy</span> <span class="keyword">val</span> z:<span class="type">Int</span> = x+<span class="number">1</span></div><div class="line">z: <span class="type">Int</span> = &lt;<span class="keyword">lazy</span>&gt;<span class="comment">//z的初始化会被延迟</span></div><div class="line"></div><div class="line">scala&gt; z</div><div class="line">res0: <span class="type">Int</span> = <span class="number">11</span>      <span class="comment">//此处才进行了计算</span></div></pre></td></tr></table></figure><p>在读文件时，加上lazy即便有错误也不会进行上报，初始化被延迟，只有在调用的时候才会报出</p><h1 id="6、例外：Exception"><a href="#6、例外：Exception" class="headerlink" title="6、例外：Exception"></a>6、例外：Exception</h1><p>情况1：</p><p>采用try catch finaly来捕获异常和处理异常</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo2</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">      * 1.采用try catch finaly来捕获异常和处理异常</div><div class="line">      **/</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">//try代码块里面写可能出现异常的函数</span></div><div class="line">      <span class="keyword">var</span> words = scala.io.<span class="type">Source</span>.fromFile(<span class="string">"H:\\stu.txt"</span>).mkString</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">      <span class="keyword">case</span> ex: <span class="type">FileNotFoundException</span> =&gt;</div><div class="line">        println(<span class="string">"File Not Found Exception"</span>)</div><div class="line"></div><div class="line">      <span class="keyword">case</span> ex: <span class="type">IllegalArgumentException</span> =&gt;</div><div class="line">        println(<span class="string">"Illegal Argument Exception"</span>)</div><div class="line"></div><div class="line">      <span class="keyword">case</span> _: <span class="type">Exception</span> =&gt; &#123;</div><div class="line">        println(<span class="string">"This is an Exception"</span>)</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      println(<span class="string">"this is finally"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>没有异常的时候，会执行finally中的内容</p><p>有异常的时候会处理对应的异常，并最终执行finally</p><p>情况2：</p><p>函数返回类型为nothing时，代表运行过程中产生了异常</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">demo</span></span>() = <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Exception</span>(<span class="string">"exception"</span>)</div><div class="line">demo: ()<span class="type">Nothing</span></div></pre></td></tr></table></figure><h1 id="7、数组"><a href="#7、数组" class="headerlink" title="7、数组"></a>7、数组</h1><h2 id="7-1、一维数组"><a href="#7-1、一维数组" class="headerlink" title="7.1、一维数组"></a>7.1、一维数组</h2><h3 id="7-1-1、数组类型"><a href="#7-1-1、数组类型" class="headerlink" title="7.1.1、数组类型"></a>7.1.1、数组类型</h3><ol><li>定长数组：Array</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//法1：</span></div><div class="line"><span class="keyword">val</span> a = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">String</span>](<span class="number">10</span>)</div><div class="line"><span class="comment">//法2：</span></div><div class="line"><span class="keyword">val</span> c:<span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(<span class="string">"Tom"</span>,<span class="string">"Gakki"</span>)</div><div class="line"><span class="comment">//不同添加不同类型的元素，如下是不被允许的</span></div><div class="line"><span class="comment">//var c:Array[String] = Array("Tom","Gakki",1)</span></div></pre></td></tr></table></figure><ol><li>变长数组</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引入</span></div><div class="line"><span class="keyword">import</span> scala.collection.mutable._</div><div class="line"><span class="comment">//声明</span></div><div class="line"><span class="keyword">val</span> d = <span class="type">ArrayBuffer</span>[<span class="type">Int</span>]()</div></pre></td></tr></table></figure><h3 id="7-1-2、数组操作"><a href="#7-1-2、数组操作" class="headerlink" title="7.1.2、数组操作"></a>7.1.2、数组操作</h3><p>添加元素：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; d += <span class="number">1</span></div><div class="line">res2: d.<span class="keyword">type</span> = <span class="type">ArrayBuffer</span>(<span class="number">1</span>)</div><div class="line"></div><div class="line">scala&gt; d += (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div><div class="line">res3: d.<span class="keyword">type</span> = <span class="type">ArrayBuffer</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div></pre></td></tr></table></figure><p>去除最后俩元素：<code>d.trimEnd(2)</code></p><ol><li><p>数组的<strong>遍历</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">for</span>(s &lt;- a)println(s)</div><div class="line">tom</div><div class="line">gakki</div><div class="line">jojo</div><div class="line"></div><div class="line">scala&gt; a.foreach(println)</div><div class="line">tom</div><div class="line">gakki</div><div class="line">jojo</div></pre></td></tr></table></figure></li><li><p>数值操作</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> myarray = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">5</span>)</div><div class="line">myarray: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">5</span>)</div><div class="line"></div><div class="line">scala&gt; myarray.max</div><div class="line">res11: <span class="type">Int</span> = <span class="number">10</span></div><div class="line"></div><div class="line">scala&gt; myarray.min</div><div class="line">res12: <span class="type">Int</span> = <span class="number">1</span></div><div class="line"></div><div class="line">scala&gt; myarray.sortWith(_&gt;_)</div><div class="line">res13: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)</div><div class="line"></div><div class="line">scala&gt; myarray.sortWith(_&lt;_)</div><div class="line">res14: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>)</div></pre></td></tr></table></figure><p>解释：<code>(_&gt;_)</code>是一个函数，传入两个参数，返回值是布尔型</p><p>完整：sortWith函数里面，参数也是一个函数–》高阶函数</p><p><code>(_&gt;_)</code>完整的情况：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span></span>(a:<span class="type">Int</span>, b:<span class="type">Int</span>) = &#123;<span class="keyword">if</span>(a&gt;b) <span class="literal">true</span> <span class="keyword">else</span> <span class="literal">false</span>&#125;</div><div class="line">(a,b) =&gt; &#123;<span class="keyword">if</span>(a&gt;b) <span class="literal">true</span> <span class="keyword">else</span> <span class="literal">false</span>&#125;</div><div class="line">(a,b) =&gt; &#123;<span class="keyword">if</span>(a&gt;b) <span class="literal">true</span> <span class="keyword">else</span> <span class="literal">false</span>&#125;    简化为：    _&gt;_</div></pre></td></tr></table></figure></li></ol><h2 id="7-2、多维数组"><a href="#7-2、多维数组" class="headerlink" title="7.2、多维数组"></a>7.2、多维数组</h2><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义一个3行4列的数组</span></div><div class="line">scala&gt; <span class="keyword">var</span> matrix = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">matrix: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</div></pre></td></tr></table></figure><p>修改值：<code>matrix(1)(2) = 10</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">res16: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</div></pre></td></tr></table></figure><p>例子：定义一个二维数组，其中每个元素是一个一维数组，并且长度不固定</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> triangle = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]](<span class="number">10</span>)</div><div class="line">triangle: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>)</div></pre></td></tr></table></figure><p>初始化：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">for</span>(i &lt;- <span class="number">0</span> until triangle.length)&#123;</div><div class="line">     | triangle(i) = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](i+<span class="number">1</span>)</div><div class="line">     | &#125;</div><div class="line"></div><div class="line">scala&gt; triangle</div><div class="line">res18: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(<span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</div></pre></td></tr></table></figure><p>二维数组如果使用上面方法声明时</p><ul><li>首先制定外层数组的长度</li><li>初始化内存数组时，在指定内层数组的长度</li></ul><h1 id="8、映射-Map"><a href="#8、映射-Map" class="headerlink" title="8、映射 Map"></a>8、映射<key,value> Map</key,value></h1><p>举例：</p><p>​    创建map保存学生成绩</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> scores = <span class="type">Map</span>(<span class="string">"Gakki"</span> -&gt; <span class="number">80</span>,<span class="string">"Jojo"</span> -&gt; <span class="number">90</span>)</div><div class="line">scores: scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="type">Jojo</span> -&gt; <span class="number">90</span>, <span class="type">Gakki</span> -&gt; <span class="number">80</span>)</div></pre></td></tr></table></figure><p>解释：</p><ul><li><p>Map[String,Int]       自动推导出类型：key  String    value Int</p></li><li><p>scala.collection.mutable   scala总映射有两种，一种可变map。一种不可变</p><p>scala.collection.mutable    ====》 可变</p><p>scala.collection.immutable    ====》 不可变</p><p><code>val scores = scala.collection.immutable.Map(&quot;Gakki&quot; -&gt; 80,&quot;Jojo&quot; -&gt; 90)</code></p></li></ul><ol><li><p>初始化映射:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> scores2 = <span class="type">Map</span>((<span class="string">"Gakki"</span>,<span class="number">50</span>),(<span class="string">"Jojo"</span>,<span class="number">90</span>))</div><div class="line">scala&gt; <span class="keyword">val</span> scores = <span class="type">Map</span>(<span class="string">"Gakki"</span> -&gt; <span class="number">80</span>,<span class="string">"Jojo"</span> -&gt; <span class="number">90</span>)</div></pre></td></tr></table></figure></li><li><p>映射操作：</p><ol><li>取值：</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">scala&gt; scores(<span class="string">"Jojo"</span>)</div><div class="line">res19: <span class="type">Int</span> = <span class="number">90</span></div><div class="line"></div><div class="line">scala&gt; scores.get(<span class="string">"Jojo"</span>)</div><div class="line">res20: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">Some</span>(<span class="number">90</span>)</div><div class="line"></div><div class="line">scala&gt; scores.get(<span class="string">"Jojoo"</span>)</div><div class="line">res21: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">None</span></div><div class="line"></div><div class="line">scala&gt; scores(<span class="string">"Jojoo"</span>)</div><div class="line">java.util.<span class="type">NoSuchElementException</span>: key not found: <span class="type">Jojoo</span></div><div class="line">  at scala.collection.<span class="type">MapLike</span>$<span class="class"><span class="keyword">class</span>.<span class="title">default</span>(<span class="params"><span class="type">MapLike</span>.scala:228</span>)</span></div><div class="line">  at scala.collection.<span class="type">AbstractMap</span>.<span class="keyword">default</span>(<span class="type">Map</span>.scala:<span class="number">59</span>)</div><div class="line">  at scala.collection.mutable.<span class="type">HashMap</span>.apply(<span class="type">HashMap</span>.scala:<span class="number">65</span>)</div><div class="line">  ... <span class="number">32</span> elided</div></pre></td></tr></table></figure><p>需求：判断key是否存在，若不存在，返回默认值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">if</span>(scores.contains(<span class="string">"sean"</span>))&#123;</div><div class="line">     | scores(<span class="string">"sean"</span>)</div><div class="line">     | &#125;<span class="keyword">else</span>&#123;</div><div class="line">     | <span class="number">-1</span>&#125;</div><div class="line">res10: <span class="type">Int</span> = <span class="number">-1</span></div><div class="line">     </div><div class="line"><span class="comment">//法2</span></div><div class="line">scala&gt; scores.getOrElse(<span class="string">"sean"</span>,<span class="number">-1</span>)</div></pre></td></tr></table></figure><ol><li><p>更新：</p><p>必须是可变映射才能更新数值</p></li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scala&gt; scores(<span class="string">"Gakki"</span>) = <span class="number">99</span></div><div class="line"></div><div class="line">scala&gt; scores</div><div class="line">res25: scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="type">Jojo</span> -&gt; <span class="number">90</span>, <span class="type">Gakki</span> -&gt; <span class="number">99</span>)</div></pre></td></tr></table></figure><ol><li>映射迭代</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">for</span>(s &lt;- scores) println(s)</div><div class="line">(<span class="type">Jojo</span>,<span class="number">90</span>)</div><div class="line">(<span class="type">Gakki</span>,<span class="number">99</span>)</div><div class="line"></div><div class="line">scala&gt; scores.foreach(println)</div><div class="line">(<span class="type">Jojo</span>,<span class="number">90</span>)</div><div class="line">(<span class="type">Gakki</span>,<span class="number">99</span>)</div></pre></td></tr></table></figure></li></ol><h1 id="9、元组：Tuple"><a href="#9、元组：Tuple" class="headerlink" title="9、元组：Tuple"></a>9、元组：Tuple</h1><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> t1 = <span class="type">Tuple3</span>(<span class="string">"Tom"</span>,<span class="string">"gakki"</span>,<span class="number">1</span>)</div><div class="line">t1: (<span class="type">String</span>, <span class="type">String</span>, <span class="type">Int</span>) = (<span class="type">Tom</span>,gakki,<span class="number">1</span>)</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> t2 = (<span class="string">"Tom"</span>,<span class="string">"gakki"</span>,<span class="number">1</span>)</div><div class="line">t2: (<span class="type">String</span>, <span class="type">String</span>, <span class="type">Int</span>) = (<span class="type">Tom</span>,gakki,<span class="number">1</span>)</div></pre></td></tr></table></figure><p><code>Tuple3</code>代表有三个元素</p><p><strong>操作：</strong></p><p><strong>访问里面的元素：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">scala&gt; t1.</div><div class="line">_1   _3         copy     hashCode   productArity     productIterator   toString   zipped</div><div class="line">_2   canEqual   equals   invert     productElement   productPrefix     x</div><div class="line"></div><div class="line">scala&gt; t1._1</div><div class="line">res29: <span class="type">String</span> = <span class="type">Tom</span></div></pre></td></tr></table></figure><p><strong><em>下划线加下标表示该位置元素，从1开始</em></strong></p><p><strong>遍历：</strong></p><p>注意：Tuple并没有提供foreach函数，使用<code>productIterator</code>进行遍历</p><p>遍历分为两步：</p><ol><li><p>生成迭代器</p></li><li><p>调用foreach</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scala&gt; t1.productIterator.foreach(println)</div><div class="line"><span class="type">Tom</span></div><div class="line">gakki</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure></li></ol><h1 id="10、scala的文件操作"><a href="#10、scala的文件操作" class="headerlink" title="10、scala的文件操作"></a>10、scala的文件操作</h1><p>类似于java的io</p><p>需求：</p><ol><li><p>读取文件</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 将整个文件作为一个字符串输出</div><div class="line"> * */</div><div class="line">println(<span class="string">"------------mkString------------"</span>)</div><div class="line"><span class="comment">//println(source.mkString)</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">      * 将每一行读入并输出</div><div class="line">      * */</div><div class="line">println(<span class="string">"------------lines------------"</span>)</div><div class="line"><span class="keyword">var</span> lines = source.getLines()</div><div class="line"><span class="comment">//lines.foreach(println)</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">      * 读取字符</div><div class="line">      * */</div><div class="line">println(<span class="string">"------------lines------------"</span>)</div><div class="line"><span class="keyword">for</span>(c &lt;- source) println(c)</div></pre></td></tr></table></figure></li><li><p>读取二进制文件</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"------------Read Bytes------------"</span>)</div><div class="line"><span class="comment">/**</span></div><div class="line">* scala不支持直接读取二进制</div><div class="line">* 通过调用java的InputStream</div><div class="line">* */</div><div class="line"><span class="keyword">var</span> file = <span class="keyword">new</span> <span class="type">File</span>(<span class="string">"H:\\stu.txt"</span>)</div><div class="line"><span class="comment">//构造一个InputStream</span></div><div class="line"><span class="keyword">var</span> in = <span class="keyword">new</span> <span class="type">FileInputStream</span>(file)</div><div class="line"><span class="comment">//构造一个buffer</span></div><div class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Byte</span>](file.length().toInt)</div><div class="line"><span class="comment">//读取</span></div><div class="line">in.read(buffer)</div><div class="line">println(buffer.length)</div><div class="line"></div><div class="line"><span class="comment">//关闭</span></div><div class="line">in.close()</div></pre></td></tr></table></figure></li><li><p>从url中获取信息</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"------------URL------------"</span>)</div><div class="line"><span class="keyword">var</span> source2 = fromURL(<span class="string">"http://www.baidu.com"</span>,<span class="string">"UTF-8"</span>)</div><div class="line">println(source2.mkString)</div></pre></td></tr></table></figure></li><li><p>写入文件</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//写文件</span></div><div class="line"><span class="comment">//PrintWriter也是java中的io包中内容</span></div><div class="line"><span class="keyword">var</span> out = <span class="keyword">new</span> <span class="type">PrintWriter</span>(<span class="string">"H:\\insert.txt"</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i &lt;- <span class="number">0</span> until <span class="number">10</span>) out.println(i)</div><div class="line"></div><div class="line">out.close()</div></pre></td></tr></table></figure></li><li><p>scala去调用java的类库</p><p>2中用到的InputStream就是java类库</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、数据类型和变量常量&quot;&gt;&lt;a href=&quot;#1、数据类型和变量常量&quot; class=&quot;headerlink&quot; title=&quot;1、数据类型和变量常量&quot;&gt;&lt;/a&gt;1、数据类型和变量常量&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;scala中所有的数据都是对象，如在java中1是
      
    
    </summary>
    
    
      <category term="Scala" scheme="rabbitluluu.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>ELK之K--Kibana</title>
    <link href="rabbitluluu.github.io/2019/03/22/ELK%E4%B9%8BK-Kibana/"/>
    <id>rabbitluluu.github.io/2019/03/22/ELK之K-Kibana/</id>
    <published>2019-03-22T02:46:16.000Z</published>
    <updated>2019-03-22T02:51:16.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h1><p>​    Kibana是一个开源的分析和可视化平台，设计用于和Elasticsearch一起工作。</p><p>​    你用Kibana来搜索，查看，并和存储在Elasticsearch索引中的数据进行交互。</p><p>​    你可以轻松地执行高级数据分析，并且以各种图标、表格和地图的形式可视化数据。</p><p>​    Kibana使得理解大量数据变得很容易。它简单的、基于浏览器的界面使你能够快速创建和共享动态仪表板，实时显示Elasticsearch查询的变化。</p><h1 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h1><p>解压：tar -zxvf kibana-6.6.2-linux-x86_64.tar.gz</p><p>修改 kibana.yml 配置文件：</p><p>server.port: 5601</p><p>server.host: “node01”   ———-部署kinana服务器的ip</p><p>elasticsearch.hosts: [“<a href="http://node01:9200" target="_blank" rel="external">http://node01:9200</a>“]</p><p>kibana.index: “.kibana”</p><h1 id="3、问题排查"><a href="#3、问题排查" class="headerlink" title="3、问题排查"></a>3、问题排查</h1><ol><li><p>启动kibana，报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[error[plugin:remote_clusters@6.6.2] Status changed from red to red - X-Pack plugin is not installed on the [data] Elasticsearch cluster.</div></pre></td></tr></table></figure></li></ol><p>​    解决：卸载x-pack插件。</p><p>​    <code>elasticsearch-plugin remove x-pack</code></p><p>​    <code>kibana-plugin remove x-pack</code></p><ol><li><p>启动kibana，报错 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log   [09:53:07.332] error[plugin:elasticsearch@6.1.1] Status changed from yellow to red - This version of Kibana requires Elasticsearch v6.1.1 on all nodes. I found the following incompatible nodes in your cluster: v5.6.2 @ 192.168.10.202:9200 (192.168.10.202), v5.6.2 @ 192.168.10.201:9200 (192.168.10.201), v5.6.2 @ 192.168.10.204:9200 (192.168.10.204), v5.6.2 @ 192.168.10.203:9200 (192.168.10.203)</div></pre></td></tr></table></figure><p>解决：重装对应版本的kibana即可</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、概述&quot;&gt;&lt;a href=&quot;#1、概述&quot; class=&quot;headerlink&quot; title=&quot;1、概述&quot;&gt;&lt;/a&gt;1、概述&lt;/h1&gt;&lt;p&gt;​    Kibana是一个开源的分析和可视化平台，设计用于和Elasticsearch一起工作。&lt;/p&gt;
&lt;p&gt;​    
      
    
    </summary>
    
    
      <category term="Kibana" scheme="rabbitluluu.github.io/tags/Kibana/"/>
    
  </entry>
  
  <entry>
    <title>ELK之L--Logtash</title>
    <link href="rabbitluluu.github.io/2019/03/22/ELK%E4%B9%8BL-Logtash/"/>
    <id>rabbitluluu.github.io/2019/03/22/ELK之L-Logtash/</id>
    <published>2019-03-22T02:46:08.000Z</published>
    <updated>2019-03-22T02:50:58.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h1><p>​    logstash是一个数据分析软件，主要目的是分析log日志。整一套软件可以当作一个MVC模型，logstash是controller层，Elasticsearch是一个model层，kibana是view层。</p><p>​    首先将数据传给logstash，它将数据进行过滤和格式化（转成JSON格式），然后传给Elasticsearch进行存储、建搜索的索引，kibana提供前端的页面再进行搜索和图表可视化，它是调用Elasticsearch的接口返回的数据进行可视化。logstash和Elasticsearch是用Java写的，kibana使用node.js框架。</p><p>常用架构：L–&gt;redis/kafka–&gt;L–&gt;E–&gt;K</p><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/Logtash.png" alt=""></p><h1 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h1><ol><li>解压缩</li><li>直接用</li></ol><font color="red"><strong>注意：比较消耗资源，注意资源的分配</strong></font><p>内存过低会有如下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c5330000, 986513408, 0) failed; error='Cannot allocate memory' (errno=12)</div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span> There is insufficient memory for the Java Runtime Environment to continue.</div><div class="line"><span class="meta">#</span> Native memory allocation (mmap) failed to map 986513408 bytes for committing reserved memory.</div><div class="line"><span class="meta">#</span> An error report file with more information is saved as:</div><div class="line"><span class="meta">#</span> /usr/local/logstash-6.6.2/confs_test/hs_err_pid3910.log</div></pre></td></tr></table></figure><ol><li><p>测试</p><p><code>bin/logstash -e &#39;input{stdin{}}output{stdout{codec=&gt;rubydebug}}&#39;</code></p><p>机器性能各异，个别可能会启动较慢，耐心等待即可</p></li></ol><h1 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h1><h2 id="3-1、Input"><a href="#3-1、Input" class="headerlink" title="3.1、Input"></a>3.1、Input</h2><ol><li><p>监听文件(File)</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; ["/opt/modules/logstash-6.6.2/data_test/message"]</div><div class="line">        type =&gt; "system"</div><div class="line">        start_position =&gt; "beginning"</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">output&#123;stdout&#123;codec=&gt;rubydebug&#125;&#125;</div></pre></td></tr></table></figure><p>有一些比较有用的配置项，可以用来指定 FileWatch 库的行为：</p><ul><li><p>discover_interval</p><p>logstash 每隔多久去检查一次被监听的 path 下是否有新文件。默认值是 15 秒。</p></li><li><p>exclude</p><p>不想被监听的文件可以排除出去，这里跟 path 一样支持 glob 展开。</p></li><li><p>close_older</p><p>一个已经监听中的文件，如果超过这个值的时间内没有更新内容，就关闭监听它的文件句柄。默认是 3600 秒，即一小时 </p></li><li><p>ignore_older</p><p>在每次检查文件列表的时候，如果一个文件的最后修改时间超过这个值，就忽略这个文件。默认是 86400 秒，即一天。</p></li><li><p>sincedb_path</p><p>如果你不想用默认的 $HOME/.sincedb(Windows 平台上在 C:\Windows\System32\config\systemprofile.sincedb)，可以通过这个配置定义 sincedb 文件到其他位置。 </p></li><li><p>sincedb_write_interval</p><p>logstash 每隔多久写一次 sincedb 文件，默认是 15 秒。</p></li><li><p>stat_interval</p><p>logstash 每隔多久检查一次被监听文件状态（是否有更新），默认是 1 秒。</p></li><li><p>start_position</p><p>logstash 从什么位置开始读取文件数据，默认是结束位置，也就是说 logstash 进程会以类似 tail -F 的形式运行。如果你是要导入原有数据，把这个设定改成 “beginning”，logstash 进程就从头开始读取，类似 less +F 的形式运行。</p></li></ul></li><li><p>标准输入/输出(Stdin)</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">        add_field =&gt; &#123;"key" =&gt; "value"&#125;</div><div class="line">        codec =&gt; "plain"</div><div class="line">        tags =&gt; ["add"]</div><div class="line">        type =&gt; "std"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output&#123;stdout&#123;codec=&gt;rubydebug&#125;&#125;</div></pre></td></tr></table></figure><p>​    type 和 tags 是 logstash 事件中两个特殊的字段。通常来说我们会在输入区段中通过 type 来标记事件类型。而 tags 则是在数据处理过程中，由具体的插件来添加或者删除的。</p><p>常常有以下用法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">        type =&gt; "web"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">    if [type] == "web" &#123;</div><div class="line">        grok &#123;</div><div class="line">            match =&gt; ["message", %&#123;COMBINEDAPACHELOG&#125;]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">    if "_grokparsefailure" in [tags] &#123;</div><div class="line">        nagios_nsca &#123;</div><div class="line">            nagios_status =&gt; "1"</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        elasticsearch &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h2 id="3-2、Codec"><a href="#3-2、Codec" class="headerlink" title="3.2、Codec"></a>3.2、Codec</h2><p>​    Codec 是 logstash 从 1.3.0 版开始新引入的概念(Codec 来自 Coder/decoder 两个单词的首字母缩写)。</p><p>在此之前，logstash 只支持纯文本形式输入，然后以过滤器处理它。但现在，我们可以在输入期处理不同类型的数据，这全是因为有了 codec 设置。所以，这里需要纠正之前的一个概念。Logstash 不只是一个input | filter | output 的数据流，而是一个 <strong>input | decode | filter | encode | output</strong> 的数据流！codec 就是用来 decode、encode 事件的。codec 的引入，使得 logstash 可以更好更方便的与其他有自定义数据格式的运维产品共存，比如 graphite、fluent、netflow、collectd，以及使用 msgpack、json、edn 等通用数据格式的其他产品等。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">        add_field =&gt; &#123;"key" =&gt; "value"&#125;</div><div class="line">        codec =&gt; "json"</div><div class="line">        type =&gt; "std"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output&#123;stdout&#123;codec=&gt;rubydebug&#125;&#125;</div></pre></td></tr></table></figure><p>输入测试</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"simCar"</span>:<span class="number">18074045598</span>,<span class="attr">"validityPeriod"</span>:<span class="string">"1996-12-06"</span>,<span class="attr">"unitPrice"</span>:<span class="number">9</span>,<span class="attr">"quantity"</span>:<span class="number">19</span>,<span class="attr">"amount"</span>:<span class="number">35</span>,<span class="attr">"imei"</span>:<span class="number">887540376467915</span>,<span class="attr">"user"</span>:<span class="string">"test"</span>&#125;</div></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        "@timestamp" =&gt; 2019-03-21T07:11:22.457Z,</div><div class="line">              "imei" =&gt; 887540376467915,</div><div class="line">    "validityPeriod" =&gt; "1996-12-06",</div><div class="line">              "user" =&gt; "test",</div><div class="line">              "host" =&gt; "node01",</div><div class="line">            "amount" =&gt; 35,</div><div class="line">               "key" =&gt; "value",</div><div class="line">            "simCar" =&gt; 18074045598,</div><div class="line">         "unitPrice" =&gt; 9,</div><div class="line">          "quantity" =&gt; 19,</div><div class="line">              "type" =&gt; "std",</div><div class="line">          "@version" =&gt; "1"</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-3、Filter"><a href="#3-3、Filter" class="headerlink" title="3.3、Filter"></a>3.3、Filter</h2><h3 id="3-3-1、Grok插件"><a href="#3-3-1、Grok插件" class="headerlink" title="3.3.1、Grok插件"></a>3.3.1、Grok插件</h3><p>​    logstash拥有丰富的filter插件,它们扩展了进入过滤器的原始数据，进行复杂的逻辑处理，甚至可以无中生有的添加新的 logstash 事件到后续的流程中去！Grok 是 Logstash 最重要的插件之一。也是迄今为止使蹩脚的、无结构的日志结构化和可查询的最好方式。Grok在解析 syslog logs、apache and other webserver logs、mysql logs等任意格式的文件上表现完美。</p><p>​    这个工具非常适用于系统日志，Apache和其他网络服务器日志，MySQL日志等。</p><p>测试：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">        type =&gt; "std"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    match=&gt;&#123;"message"=&gt; "%&#123;IP:client&#125; %&#123;WORD:method&#125; %&#123;URIPATHPARAM:request&#125; %&#123;NUMBER:bytes&#125; %&#123;NUMBER:duration&#125;" &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">output&#123;stdout&#123;codec=&gt;rubydebug&#125;&#125;</div></pre></td></tr></table></figure><p>输入：</p><p><code>55.3.244.1 GET /index.html 15824 0.043</code></p><p>输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "@timestamp" =&gt; 2019-03-21T07:18:44.268Z,</div><div class="line">       "request" =&gt; "/index.html",</div><div class="line">         "bytes" =&gt; "15824",</div><div class="line">      "duration" =&gt; "0.043",</div><div class="line">          "host" =&gt; "node01",</div><div class="line">        "method" =&gt; "GET",</div><div class="line">        "client" =&gt; "55.3.244.1",</div><div class="line">       "message" =&gt; "55.3.244.1 GET /index.html 15824 0.043",</div><div class="line">      "@version" =&gt; "1",</div><div class="line">          "type" =&gt; "std"</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-3-2、Grok语法"><a href="#3-3-2、Grok语法" class="headerlink" title="3.3.2、Grok语法"></a>3.3.2、Grok语法</h3><p>grok模式的语法如下：</p><p><code>%{SYNTAX:SEMANTIC}</code></p><p><strong>SYNTAX</strong>：代表匹配值的类型,例如3.44可以用NUMBER类型所匹配,127.0.0.1可以使用IP类型匹配。</p><p><strong>SEMANTIC</strong>：代表存储该值的一个变量名称,例如 3.44 可能是一个事件的持续时间,127.0.0.1可能是请求的client地址。所以这两个值可以用 %{NUMBER:duration} %{IP:client} 来匹配。</p><p>​    你也可以选择将数据类型转换添加到Grok模式。默认情况下，所有语义都保存为字符串。如果您希望转换语义的数据类型，例如将字符串更改为整数，则将其后缀为目标数据类型。例如%{NUMBER:num:int}将num语义从一个字符串转换为一个整数。目前唯一支持的转换是int和float。</p><p>​    Logstash附带约120个模式。你可以在这里找到它们<a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns" target="_blank" rel="external">https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns</a></p><h3 id="3-3-3、自定义Grok模式"><a href="#3-3-3、自定义Grok模式" class="headerlink" title="3.3.3、自定义Grok模式"></a>3.3.3、自定义Grok模式</h3><p>​    更多时候logstash grok没办法提供你所需要的匹配类型，这个时候我们可以使用自定义。</p><p>创建自定义 patterns 文件。</p><ol><li><p>创建一个名为patterns其中创建一个文件postfix （文件名无关紧要,随便起）,在该文件中，将需要的模式写为模式名称，空格，然后是该模式的正则表达式。例如：</p><p><code>POSTFIX_QUEUEID [0-9A-F]{10,11}</code></p></li><li><p>然后使用这个插件中的patterns_dir设置告诉logstash目录是你的自定义模式。</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">        type =&gt; "std"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    patterns_dir =&gt; ["./patterns"]</div><div class="line">    match =&gt; &#123; "message" =&gt; "%&#123;SYSLOGBASE&#125; %&#123;POSTFIX_QUEUEID:queue_id&#125;: %&#123;GREEDYDATA:syslog_message&#125;" &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">output&#123;stdout&#123;codec=&gt;rubydebug&#125;&#125;</div></pre></td></tr></table></figure><p>输入：</p><p><code>Jan 1 06:25:43 mailserver14 postfix/cleanup[21403]: BEF25A72965:message-id=&lt;20130101142543.5828399CCAF@mailserver1</code></p><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">          "queue_id" =&gt; "BEF25A72965",</div><div class="line">           "message" =&gt; "Jan  1 06:25:43 mailserver14 postfix/cleanup[21403]: BEF25A72965: message-id=&lt;20130101142543.5828399CCAF@mailserver1",</div><div class="line">               "pid" =&gt; "21403",</div><div class="line">           "program" =&gt; "postfix/cleanup",</div><div class="line">          "@version" =&gt; "1",</div><div class="line">              "type" =&gt; "std",</div><div class="line">         "logsource" =&gt; "mailserver14",</div><div class="line">              "host" =&gt; "zzc-203",</div><div class="line">         "timestamp" =&gt; "Jan  1 06:25:43",</div><div class="line">    "syslog_message" =&gt; "message-id=&lt;20130101142543.5828399CCAF@mailserver1",</div><div class="line">        "@timestamp" =&gt; 2019-03-19T05:31:37.405Z</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-3-GeoIP"><a href="#3-3-GeoIP" class="headerlink" title="3.3.GeoIP"></a>3.3.GeoIP</h3><p>​    GeoIP 是最常见的免费 IP 地址归类查询库，同时也有收费版可以采购。GeoIP 库可以根据 IP 地址提供对应的地域信息，包括国别，省市，经纬度等，对于可视化地图和区域统计非常有用。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">        type =&gt; "std"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">    geoip &#123;</div><div class="line">        source =&gt; "message"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output&#123;stdout&#123;codec=&gt;rubydebug&#125;&#125;</div></pre></td></tr></table></figure><p>输入：</p><p><code>39.65.228.148</code></p><p>输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">       "message" =&gt; "39.65.228.148",</div><div class="line">          "host" =&gt; "node01",</div><div class="line">          "type" =&gt; "std",</div><div class="line">         "geoip" =&gt; &#123;</div><div class="line">              "location" =&gt; &#123;</div><div class="line">            "lon" =&gt; 116.9972,</div><div class="line">            "lat" =&gt; 36.6683</div><div class="line">        &#125;,</div><div class="line">                    "ip" =&gt; "39.65.228.148",</div><div class="line">         "country_code3" =&gt; "CN",</div><div class="line">             "longitude" =&gt; 116.9972,</div><div class="line">         "country_code2" =&gt; "CN",</div><div class="line">           "region_name" =&gt; "Shandong",</div><div class="line">           "region_code" =&gt; "37",</div><div class="line">              "timezone" =&gt; "Asia/Shanghai",</div><div class="line">          "country_name" =&gt; "China",</div><div class="line">              "latitude" =&gt; 36.6683,</div><div class="line">        "continent_code" =&gt; "AS",</div><div class="line">             "city_name" =&gt; "Jinan"</div><div class="line">    &#125;,</div><div class="line">    "@timestamp" =&gt; 2019-03-21T08:16:10.813Z,</div><div class="line">      "@version" =&gt; "1"</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-4、Output"><a href="#3-4、Output" class="headerlink" title="3.4、Output"></a>3.4、Output</h2><h3 id="3-4-1、保存成本地文件"><a href="#3-4-1、保存成本地文件" class="headerlink" title="3.4.1、保存成本地文件"></a>3.4.1、保存成本地文件</h3><p>配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">        type =&gt; "std"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; "../data_test/%&#123;+yyyy&#125;/%&#123;+MM&#125;/%&#123;+dd&#125;/%&#123;host&#125;.log"</div><div class="line">        codec =&gt; line &#123; format =&gt; "custom format: %&#123;message&#125;"&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输入：</p><p><code>Gakki真漂亮</code></p><p>输出到：<code>/opt/modules/logstash-6.6.2/data_test/2019/03/21</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[sean@node01 21]$ cat node01.log </div><div class="line">custom format: Gakki真漂亮`</div></pre></td></tr></table></figure><h3 id="3-4-2、服务器间传文件"><a href="#3-4-2、服务器间传文件" class="headerlink" title="3.4.2、服务器间传文件"></a>3.4.2、服务器间传文件</h3><p>发送端</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">input&#123;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; ["/opt/modules/logstash-6.6.2/data_test/send.log"]</div><div class="line">        type =&gt; "ecolog"</div><div class="line">        start_position =&gt; "beginning"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">    if [type] =~ /^ecolog/ &#123;</div><div class="line">        ruby &#123;</div><div class="line">            code =&gt; "file_name = event.get('path').split('/')[-1]</div><div class="line">                                         event.set('file_name',file_name)</div><div class="line">                                         event.set('servip','客户端IP')"</div><div class="line">        &#125;</div><div class="line">        mutate &#123;</div><div class="line">            rename =&gt; &#123;"file_name" =&gt; "filename"&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">        tcp &#123;</div><div class="line">        host  =&gt; "node01"</div><div class="line">        port  =&gt; 9600</div><div class="line">        codec =&gt; json_lines</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接收端</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  tcp &#123;</div><div class="line">        mode =&gt; "server"</div><div class="line">        port =&gt; 9600</div><div class="line">        ssl_enable =&gt; false</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">    json &#123;</div><div class="line">        source =&gt; "message"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; "/opt/modules/logstash-6.6.2/data_test/%&#123;+YYYY-MM-dd&#125;/%&#123;servip&#125;-%&#123;filename&#125;"</div><div class="line">        codec =&gt; line &#123; format =&gt; "%&#123;message&#125;"&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-4-3、写入到es"><a href="#3-4-3、写入到es" class="headerlink" title="3.4.3、写入到es"></a>3.4.3、写入到es</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; ["/opt/modules/logstash-6.6.2/data_test/run_error.log"]</div><div class="line">        type =&gt; "error"</div><div class="line">        start_position =&gt; "beginning"</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">    elasticsearch &#123;</div><div class="line">        hosts =&gt; ["node01:9200"]</div><div class="line">        index =&gt; "logstash-%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;"</div><div class="line">        document_type =&gt; "%&#123;type&#125;"</div><div class="line">        sniffing =&gt; true</div><div class="line">        template_overwrite =&gt; true</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>sniffing ：寻找其他es节点，建议打开</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、概述&quot;&gt;&lt;a href=&quot;#1、概述&quot; class=&quot;headerlink&quot; title=&quot;1、概述&quot;&gt;&lt;/a&gt;1、概述&lt;/h1&gt;&lt;p&gt;​    logstash是一个数据分析软件，主要目的是分析log日志。整一套软件可以当作一个MVC模型，logstash是
      
    
    </summary>
    
    
      <category term="Logtash" scheme="rabbitluluu.github.io/tags/Logtash/"/>
    
  </entry>
  
  <entry>
    <title>IK分词器</title>
    <link href="rabbitluluu.github.io/2019/03/22/IK%E5%88%86%E8%AF%8D%E5%99%A8/"/>
    <id>rabbitluluu.github.io/2019/03/22/IK分词器/</id>
    <published>2019-03-22T02:46:00.000Z</published>
    <updated>2019-03-22T02:50:29.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h1><h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><ol><li><p>下载</p><p><code>https://github.com/medcl/elasticsearch-analysis-ik</code>找到对应es的版本下载zip包</p></li><li><p>安装</p><ol><li><p>cp elasticsearch-analysis-ik-6.1.1.zip ./elasticsearch-6.1.1/plugins/</p><p>unzip elasticsearch-analysis-ik-6.1.1.zip -d ik-analyzer</p><p>推荐使用</p></li><li><p>./elasticsearch-plugin<br>install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.1.1/elasticsearch-analysis-ik-6.1.1.zip" target="_blank" rel="external">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.1.1/elasticsearch-analysis-ik-6.1.1.zip</a></p><p>不推荐此法</p></li><li><p>elasticsearch-plugin install -f<br>file:///usr/local/elasticsearch-analysis-ik-6.1.1.zip</p></li></ol><font color="red"><strong>注意：不能有内层目录，否则启动报错</strong></font></li><li><p>测试</p><p><code>curl -XGET &#39;http://node01:9200/_analyze?pretty&amp;analyzer=standard&#39; -d &#39;Gakki真是一个可爱的女孩子&#39;</code></p></li></ol><h2 id="2、模式介绍"><a href="#2、模式介绍" class="headerlink" title="2、模式介绍"></a>2、模式介绍</h2><p><strong>ik_smart模式</strong></p><p>测试：</p><p><code>curl -XGET &#39;http://node01:9200/_analyze?pretty&amp;analyzer=ik_smart&#39; -d &#39;Gakki真是一个可爱的女孩子&#39;</code></p><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"tokens"</span> : [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"gakki"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">5</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"ENGLISH"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"真是"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">5</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">7</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"一个"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">7</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">9</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">2</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"可爱"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">9</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">11</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">3</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"的"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">11</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">12</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_CHAR"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">4</span></div><div class="line">    &#125;,</div><div class="line">&#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"女孩子"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">12</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">15</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">5</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>ik_max_word模式</strong></p><p><code>curl -XGET &#39;http://node01:9200/_analyze?pretty&amp;analyzer=ik_max_word&#39; -d &#39;Gakki真是一个可爱的女孩子&#39;</code></p><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"tokens"</span> : [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"gakki"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">5</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"ENGLISH"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"真是"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">5</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">7</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"一个"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">7</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">9</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">2</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"一"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">7</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">8</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"TYPE_CNUM"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">3</span></div><div class="line">    &#125;,</div><div class="line">&#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"个"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">8</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">9</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"COUNT"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">4</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"可爱"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">9</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">11</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">5</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"的"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">11</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">12</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_CHAR"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">6</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"女孩子"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">12</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">15</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">7</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"女孩"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">12</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">14</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">8</span></div><div class="line">    &#125;,</div><div class="line">&#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"孩子"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">13</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">15</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">9</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>区别：</p><p><code>ik_max_word</code>分词更为细腻，会重复使用句子中的字，将所有可能的结果都会分出来</p><p><code>ik_smart</code>则每个字只使用一次，不会重复使用</p><h2 id="3、API使用"><a href="#3、API使用" class="headerlink" title="3、API使用"></a>3、API使用</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IK分词器&quot;&gt;&lt;a href=&quot;#IK分词器&quot; class=&quot;headerlink&quot; title=&quot;IK分词器&quot;&gt;&lt;/a&gt;IK分词器&lt;/h1&gt;&lt;h2 id=&quot;1、安装&quot;&gt;&lt;a href=&quot;#1、安装&quot; class=&quot;headerlink&quot; title=&quot;1、安装&quot;
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="rabbitluluu.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ELK之E--Elasticsearch的API使用</title>
    <link href="rabbitluluu.github.io/2019/03/22/ELK%E4%B9%8BE-Elasticsearch%E7%9A%84API%E4%BD%BF%E7%94%A8/"/>
    <id>rabbitluluu.github.io/2019/03/22/ELK之E-Elasticsearch的API使用/</id>
    <published>2019-03-22T02:45:50.000Z</published>
    <updated>2019-03-22T03:19:45.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h1><h2 id="1-1、新建maven工程，pom中添加如下"><a href="#1-1、新建maven工程，pom中添加如下" class="headerlink" title="1.1、新建maven工程，pom中添加如下"></a>1.1、新建maven工程，pom中添加如下</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;4.1&lt;/version&gt;</div><div class="line">&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;5.6.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;transport&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;5.6.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;2.9.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure><h2 id="1-2、添加log4j2-xml文件"><a href="#1-2、添加log4j2-xml文件" class="headerlink" title="1.2、添加log4j2.xml文件"></a>1.2、添加log4j2.xml文件</h2><p>在sources中添加文件名为<code>log4j2.xml</code>的文件，加入如下内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;Configuration status="warn"&gt;</div><div class="line">    &lt;Appenders&gt;</div><div class="line">        &lt;Console name="Console" target="SYSTEM_OUT"&gt;</div><div class="line">            &lt;PatternLayout pattern="%m%n"/&gt;</div><div class="line">        &lt;/Console&gt;</div><div class="line">    &lt;/Appenders&gt;</div><div class="line">    &lt;Loggers&gt;</div><div class="line">        &lt;Root level="INFO"&gt;</div><div class="line">            &lt;AppenderRef ref="Console"/&gt;</div><div class="line">        &lt;/Root&gt;</div><div class="line">    &lt;/Loggers&gt;</div><div class="line">&lt;/Configuration&gt;</div></pre></td></tr></table></figure><h1 id="2、代码实现"><a href="#2、代码实现" class="headerlink" title="2、代码实现"></a>2、代码实现</h1><h2 id="3-1、声明客户端"><a href="#3-1、声明客户端" class="headerlink" title="3.1、声明客户端"></a>3.1、声明客户端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明客户端</span></div><div class="line"><span class="keyword">private</span> TransportClient client;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 初始化连接</div><div class="line"> */</div><div class="line"><span class="meta">@Before</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getClient</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</div><div class="line">    <span class="comment">//1.设置连接的集群名称</span></div><div class="line">    Settings settings = Settings.builder().</div><div class="line">            put(<span class="string">"cluster.name"</span>, <span class="string">"my-application"</span>).</div><div class="line">            build();</div><div class="line"></div><div class="line">    <span class="comment">//2.连接集群</span></div><div class="line">    client = <span class="keyword">new</span> PreBuiltTransportClient(settings);</div><div class="line">    client.addTransportAddress(</div><div class="line">            <span class="keyword">new</span> InetSocketTransportAddress(</div><div class="line">                    InetAddress.getByName(<span class="string">"node01"</span>), <span class="number">9300</span>));</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-2、创建索引"><a href="#2-2、创建索引" class="headerlink" title="2.2、创建索引"></a>2.2、创建索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 创建索引--名字只能用小写</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//1.创建索引</span></div><div class="line">        client.admin().indices().prepareCreate(<span class="string">"jojo"</span>).get();</div><div class="line"></div><div class="line">        <span class="comment">//关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="2-3、删除索引"><a href="#2-3、删除索引" class="headerlink" title="2.3、删除索引"></a>2.3、删除索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 删除索引</div><div class="line">    */</div><div class="line">   <span class="meta">@Test</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">//1.删除索引</span></div><div class="line">       client.admin().indices().prepareDelete(<span class="string">"gakki"</span>).get();</div><div class="line"></div><div class="line">       <span class="comment">//2.关闭连接</span></div><div class="line">       client.close();</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h2 id="2-4、新建文档"><a href="#2-4、新建文档" class="headerlink" title="2.4、新建文档"></a>2.4、新建文档</h2><p>法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 新建文档--方式1：源数据json串</div><div class="line">     * (不推荐)</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndexByJson</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//1.文档数据准备</span></div><div class="line">        String json = <span class="string">"&#123;"</span> + <span class="string">"\"id\":\"1\","</span> + <span class="string">"\"title\":\"基于Lucene的搜索服务器\","</span></div><div class="line">                + <span class="string">"\"content\":\"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口\""</span> + <span class="string">"&#125;"</span>;</div><div class="line"></div><div class="line">        <span class="comment">//2.创建文档</span></div><div class="line">        IndexResponse indexResponse = client.prepareIndex(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"1"</span>)</div><div class="line">                .setSource(json)</div><div class="line">                .execute()</div><div class="line">                .actionGet();</div><div class="line"></div><div class="line">        <span class="comment">//3.打印结果</span></div><div class="line">        System.out.println(<span class="string">"index:"</span> + indexResponse.getIndex());</div><div class="line">        System.out.println(<span class="string">"type:"</span> + indexResponse.getType());</div><div class="line">        System.out.println(<span class="string">"id:"</span> + indexResponse.getId());</div><div class="line">        System.out.println(<span class="string">"version:"</span> + indexResponse.getVersion());</div><div class="line">        System.out.println(<span class="string">"result:"</span> + indexResponse.getResult());</div><div class="line"></div><div class="line">        <span class="comment">//4.关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 创建文档--方式2：源数据map方式添加json</div><div class="line">    */</div><div class="line">   <span class="meta">@Test</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndexByMap</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">//1.文档数据准备</span></div><div class="line">       HashMap&lt;String, Object&gt; json = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">       json.put(<span class="string">"id"</span>, <span class="number">2</span>);</div><div class="line">       json.put(<span class="string">"title"</span>, <span class="string">"基于Lucene的搜索服务器"</span>);</div><div class="line">       json.put(<span class="string">"content"</span>, <span class="string">"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口"</span>);</div><div class="line"></div><div class="line">       <span class="comment">//2.创建文档</span></div><div class="line">       IndexResponse indexResponse = client.prepareIndex(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"2"</span>).setSource(json).execute().actionGet();</div><div class="line"></div><div class="line">       <span class="comment">// 3 打印返回的结果</span></div><div class="line">       System.out.println(<span class="string">"index:"</span> + indexResponse.getIndex());</div><div class="line">       System.out.println(<span class="string">"type:"</span> + indexResponse.getType());</div><div class="line">       System.out.println(<span class="string">"id:"</span> + indexResponse.getId());</div><div class="line">       System.out.println(<span class="string">"version:"</span> + indexResponse.getVersion());</div><div class="line">       System.out.println(<span class="string">"result:"</span> + indexResponse.getResult());</div><div class="line"></div><div class="line">       <span class="comment">// 4 关闭连接</span></div><div class="line">       client.close();</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>法三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 创建文档--方式3：源数据es构建器添加json</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndexByEs</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">//1.通过es自带的帮助类，构建json数据</span></div><div class="line">        XContentBuilder builder = XContentFactory.jsonBuilder().startObject()</div><div class="line">                .field(<span class="string">"id"</span>, <span class="number">3</span>)</div><div class="line">                .field(<span class="string">"title"</span>, <span class="string">"基于Lucene的搜索服务器"</span>)</div><div class="line">                .field(<span class="string">"content"</span>, <span class="string">"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。"</span>)</div><div class="line">                .endObject();</div><div class="line"></div><div class="line">        <span class="comment">// 2 创建文档</span></div><div class="line">        IndexResponse indexResponse = client.prepareIndex(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"3"</span>).setSource(builder).get();</div><div class="line"></div><div class="line">        <span class="comment">// 3 打印返回的结果</span></div><div class="line">        System.out.println(<span class="string">"index:"</span> + indexResponse.getIndex());</div><div class="line">        System.out.println(<span class="string">"type:"</span> + indexResponse.getType());</div><div class="line">        System.out.println(<span class="string">"id:"</span> + indexResponse.getId());</div><div class="line">        System.out.println(<span class="string">"version:"</span> + indexResponse.getVersion());</div><div class="line">        System.out.println(<span class="string">"result:"</span> + indexResponse.getResult());</div><div class="line"></div><div class="line">        <span class="comment">// 4 关闭连接</span></div><div class="line">        client.close();</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="2-5、查询"><a href="#2-5、查询" class="headerlink" title="2.5、查询"></a>2.5、查询</h2><p>查询一条：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 查询一条信息</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//1.查询文档</span></div><div class="line">        GetResponse response = client.prepareGet(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"2"</span>).get();</div><div class="line"></div><div class="line">        <span class="comment">//2.打印搜索的结果</span></div><div class="line">        System.out.println(response.getSourceAsString());</div><div class="line"></div><div class="line">        <span class="comment">//3.关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>查询多条：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 查询多条信息</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMultiData</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.查询多个文档</span></div><div class="line">        MultiGetResponse responses = client.prepareMultiGet()</div><div class="line">                .add(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"3"</span>)</div><div class="line">                .add(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>).get();</div><div class="line"></div><div class="line">        <span class="comment">//2.遍历返回结果</span></div><div class="line">        <span class="keyword">for</span> (MultiGetItemResponse m : responses) &#123;</div><div class="line">            GetResponse response = m.getResponse();</div><div class="line"></div><div class="line">            <span class="comment">//判断结果是否存在</span></div><div class="line">            <span class="keyword">if</span> (response.isExists()) &#123;</div><div class="line">                String sourceAsString = response.getSourceAsString();</div><div class="line">                System.out.println(sourceAsString);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="2-6、更新"><a href="#2-6、更新" class="headerlink" title="2.6、更新"></a>2.6、更新</h2><p>法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 更新数据</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateData</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException, IOException </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.创建更新数据的请求对象</span></div><div class="line">        UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest();</div><div class="line">        updateRequest.index(<span class="string">"gakki"</span>);</div><div class="line">        updateRequest.type(<span class="string">"article"</span>);</div><div class="line">        updateRequest.id(<span class="string">"3"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//设置json字符串--法1--使用map集合</span></div><div class="line">        HashMap&lt;String, Object&gt; json1 = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        json1.put(<span class="string">"title"</span>, <span class="string">"基于Lucene的搜索服务器"</span>);</div><div class="line">        json1.put(<span class="string">"content"</span>, <span class="string">"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。大数据前景无限"</span>);</div><div class="line">        json1.put(<span class="string">"createDate"</span>, <span class="string">"2019-3-21"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//设置json字符串--法2--使用自带类</span></div><div class="line">        XContentBuilder json2 = XContentFactory.jsonBuilder().startObject()</div><div class="line">                .field(<span class="string">"title"</span>, <span class="string">"基于Lucene的搜索服务器"</span>)</div><div class="line">                .field(<span class="string">"content"</span>, <span class="string">"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。大数据前景无限,并且薪资水平高"</span>)</div><div class="line">                .field(<span class="string">"createDate"</span>, <span class="string">"2019-3-22"</span>).endObject();</div><div class="line"></div><div class="line">        <span class="comment">//添加</span></div><div class="line">        <span class="comment">//updateRequest.doc(json1);</span></div><div class="line">        updateRequest.doc(json2);</div><div class="line"></div><div class="line">        <span class="comment">//2.获取更新后的值</span></div><div class="line">        UpdateResponse indexResponse = client.update(updateRequest).get();</div><div class="line"></div><div class="line">        <span class="comment">//3.打印结果</span></div><div class="line">        System.out.println(<span class="string">"index:"</span> + indexResponse.getIndex());</div><div class="line">        System.out.println(<span class="string">"type:"</span> + indexResponse.getType());</div><div class="line">        System.out.println(<span class="string">"id:"</span> + indexResponse.getId());</div><div class="line">        System.out.println(<span class="string">"version:"</span> + indexResponse.getVersion());</div><div class="line">        System.out.println(<span class="string">"create:"</span> + indexResponse.getResult());</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 更新数据，倘若不存在则添加</div><div class="line">    */</div><div class="line">   <span class="meta">@Test</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdata</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ExecutionException, InterruptedException </span>&#123;</div><div class="line"></div><div class="line">       <span class="comment">//准备json</span></div><div class="line">       XContentBuilder json1 = XContentFactory.jsonBuilder().startObject()</div><div class="line">               .field(<span class="string">"title"</span>, <span class="string">"搜索服务器"</span>)</div><div class="line">               .field(<span class="string">"content"</span>,</div><div class="line">                       <span class="string">"它提供了一个分布式多用户能力的全文搜索引擎，"</span> +</div><div class="line">                               <span class="string">"基于RESTful web接口。Elasticsearch是用Java开发的，"</span> +</div><div class="line">                               <span class="string">"并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。"</span> +</div><div class="line">                               <span class="string">"设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。"</span>)</div><div class="line">               .endObject();</div><div class="line"></div><div class="line">       <span class="comment">//1.设置查询条件</span></div><div class="line">       IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"5"</span>).source(json1);</div><div class="line"></div><div class="line">       XContentBuilder json2 = XContentFactory.jsonBuilder().startObject()</div><div class="line">               .field(<span class="string">"user"</span>, <span class="string">"sean"</span>).endObject();</div><div class="line"></div><div class="line">       <span class="comment">//2.设置更新查找到更新下面的设置</span></div><div class="line">       UpdateRequest upsert = <span class="keyword">new</span> UpdateRequest(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"5"</span>)</div><div class="line">               .doc(json2).upsert(indexRequest);</div><div class="line"></div><div class="line">       client.update(upsert).get();</div><div class="line">       client.close();</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h2 id="2-7、删除数据"><a href="#2-7、删除数据" class="headerlink" title="2.7、删除数据"></a>2.7、删除数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 删除数据</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleeteData</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.删除文档数据</span></div><div class="line">        DeleteResponse indexResponse = client.prepareDelete(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"5"</span>).get();</div><div class="line"></div><div class="line">        <span class="comment">//2.打印结果</span></div><div class="line">        <span class="comment">// 2 打印返回的结果</span></div><div class="line">        System.out.println(<span class="string">"index:"</span> + indexResponse.getIndex());</div><div class="line">        System.out.println(<span class="string">"type:"</span> + indexResponse.getType());</div><div class="line">        System.out.println(<span class="string">"id:"</span> + indexResponse.getId());</div><div class="line">        System.out.println(<span class="string">"version:"</span> + indexResponse.getVersion());</div><div class="line">        System.out.println(<span class="string">"found:"</span> + indexResponse.getResult());</div><div class="line"></div><div class="line">        <span class="comment">// 3 关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="2-8查询"><a href="#2-8查询" class="headerlink" title="2.8查询"></a>2.8查询</h2><p>全表查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 全表查询--不推荐</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchAllQuery</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.执行查询</span></div><div class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"gakki"</span>)</div><div class="line">                .setTypes(<span class="string">"article"</span>)</div><div class="line">                .setQuery(QueryBuilders.matchAllQuery()).get();</div><div class="line"></div><div class="line">        <span class="comment">//2.打印查询结果</span></div><div class="line">        SearchHits hits = searchResponse.getHits();<span class="comment">//获取命中次数</span></div><div class="line">        System.out.println(<span class="string">"查询结果有："</span> + hits.getTotalHits());</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</div><div class="line">            <span class="comment">//打印信息</span></div><div class="line">            System.out.println(hit.getSourceAsString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>条件查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 条件查询</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.条件查询</span></div><div class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"gakki"</span>)</div><div class="line">                .setTypes(<span class="string">"article"</span>)</div><div class="line">                .setQuery(QueryBuilders.queryStringQuery(<span class="string">"大数据"</span>)).get();</div><div class="line"></div><div class="line">        <span class="comment">//2.打印查询结果</span></div><div class="line">        SearchHits hits = searchResponse.getHits();</div><div class="line">        System.out.println(<span class="string">"共有"</span> + hits.getTotalHits() + <span class="string">"条"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</div><div class="line">            System.out.println(hit.getSourceAsString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//3.关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>通配符查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 通配符查询</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wildcardQuery</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.通配符查询</span></div><div class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"gakki"</span>)</div><div class="line">                .setTypes(<span class="string">"article"</span>)</div><div class="line">                .setQuery(QueryBuilders.wildcardQuery(<span class="string">"content"</span>, <span class="string">"*全*"</span>)).get();</div><div class="line"></div><div class="line">        <span class="comment">//2.打印查询结果</span></div><div class="line">        SearchHits hits = searchResponse.getHits(); <span class="comment">// 获取命中次数，查询结果有多少对象</span></div><div class="line">        System.out.println(<span class="string">"查询结果有："</span> + hits.getTotalHits() + <span class="string">"条"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</div><div class="line">            System.out.println(hit.getSourceAsString());<span class="comment">// 打印出每条结果</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 3 关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>模糊查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 模糊查询</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fuzzy</span><span class="params">()</span> </span>&#123;</div><div class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"gakki"</span>)</div><div class="line">                .setTypes(<span class="string">"article"</span>)</div><div class="line">                .setQuery(QueryBuilders.fuzzyQuery(<span class="string">"title"</span>, <span class="string">"lucene"</span>)).get();</div><div class="line"></div><div class="line">        <span class="comment">// 2 打印查询结果</span></div><div class="line">        SearchHits hits = searchResponse.getHits(); <span class="comment">// 获取命中次数，查询结果有多少对象</span></div><div class="line">        System.out.println(<span class="string">"查询结果有："</span> + hits.getTotalHits() + <span class="string">"条"</span>);</div><div class="line"></div><div class="line">        Iterator&lt;SearchHit&gt; iterator = hits.iterator();</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            SearchHit searchHit = iterator.next(); <span class="comment">// 每个查询对象</span></div><div class="line">            System.out.println(searchHit.getSourceAsString()); <span class="comment">// 获取字符串格式打印</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 3 关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>精准查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 精准查询</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termQuery</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.设置查询</span></div><div class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"gakki"</span>)</div><div class="line">                .setTypes(<span class="string">"article"</span>)</div><div class="line">                .setQuery(QueryBuilders.termQuery(<span class="string">"content"</span>, <span class="string">"全文"</span>)).get();</div><div class="line"></div><div class="line">        <span class="comment">//2.打印信息</span></div><div class="line">        SearchHits hits = searchResponse.getHits(); <span class="comment">// 获取命中次数，查询结果有多少对象</span></div><div class="line">        System.out.println(<span class="string">"查询结果有："</span> + hits.getTotalHits() + <span class="string">"条"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</div><div class="line">            System.out.println(hit.getSourceAsString());<span class="comment">// 打印出每条结果</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 3 关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="2-9、创建mapping"><a href="#2-9、创建mapping" class="headerlink" title="2.9、创建mapping"></a>2.9、创建mapping</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 创建mapping</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createMapping</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 1设置mapping</span></div><div class="line">        XContentBuilder builder = XContentFactory.jsonBuilder().startObject().startObject(<span class="string">"article"</span>)</div><div class="line">                .startObject(<span class="string">"properties"</span>)</div><div class="line">                .startObject(<span class="string">"id1"</span>)</div><div class="line">                .field(<span class="string">"type"</span>, <span class="string">"text"</span>)</div><div class="line">                .field(<span class="string">"store"</span>, <span class="string">"true"</span>)</div><div class="line">                .endObject()</div><div class="line">                .startObject(<span class="string">"title2"</span>)</div><div class="line">                .field(<span class="string">"type"</span>, <span class="string">"text"</span>)</div><div class="line">                .field(<span class="string">"store"</span>, <span class="string">"false"</span>)</div><div class="line">                .endObject()</div><div class="line">                .startObject(<span class="string">"content"</span>)</div><div class="line">                .field(<span class="string">"type"</span>, <span class="string">"text"</span>)</div><div class="line">                .field(<span class="string">"store"</span>, <span class="string">"true"</span>)</div><div class="line">                .endObject()</div><div class="line">                .endObject()</div><div class="line">                .endObject()</div><div class="line">                .endObject();</div><div class="line"></div><div class="line">        <span class="comment">// 2 添加mapping</span></div><div class="line">        PutMappingRequest mapping = Requests.putMappingRequest(<span class="string">"jojo"</span>).type(<span class="string">"article"</span>).source(builder);</div><div class="line"></div><div class="line">        client.admin().indices().putMapping(mapping).get();</div><div class="line"></div><div class="line">        <span class="comment">// 3 关闭资源</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、环境准备&quot;&gt;&lt;a href=&quot;#1、环境准备&quot; class=&quot;headerlink&quot; title=&quot;1、环境准备&quot;&gt;&lt;/a&gt;1、环境准备&lt;/h1&gt;&lt;h2 id=&quot;1-1、新建maven工程，pom中添加如下&quot;&gt;&lt;a href=&quot;#1-1、新建maven工程，p
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="rabbitluluu.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
</feed>
