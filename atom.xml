<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sean</title>
  
  <subtitle>Keep looking.Don&#39;t settle</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="rabbitluluu.github.io/"/>
  <updated>2019-03-30T03:09:41.436Z</updated>
  <id>rabbitluluu.github.io/</id>
  
  <author>
    <name>刘生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scala进阶--高级特性</title>
    <link href="rabbitluluu.github.io/2019/03/30/Scala%E8%BF%9B%E9%98%B6-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>rabbitluluu.github.io/2019/03/30/Scala进阶-高级特性/</id>
    <published>2019-03-30T03:08:34.000Z</published>
    <updated>2019-03-30T03:09:41.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、泛型"><a href="#1、泛型" class="headerlink" title="1、泛型"></a>1、泛型</h2><p>1、泛型类：定义类的时候，可以带有一个泛型的参数</p><p>2、泛型函数：定义一个函数，可以带有一个泛型的参数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">mkIntArray</span></span>(elem:<span class="type">Int</span>*) = <span class="type">Array</span>[<span class="type">Int</span>](elem:_*)</div><div class="line">mkIntArray: (elem: <span class="type">Int</span>*)<span class="type">Array</span>[<span class="type">Int</span>]</div><div class="line"></div><div class="line">scala&gt; mkIntArray(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">res1: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line"></div><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">mkStringArray</span></span>(elem:<span class="type">String</span>*) = <span class="type">Array</span>[<span class="type">String</span>](elem:_*)</div><div class="line">mkStringArray: (elem: <span class="type">String</span>*)<span class="type">Array</span>[<span class="type">String</span>]</div><div class="line"></div><div class="line">scala&gt; mkStringArray(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>)</div><div class="line">res2: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(a, b, c)</div></pre></td></tr></table></figure><p>使用泛型：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">import</span> scala.reflect.<span class="type">ClassTag</span></div><div class="line"><span class="keyword">import</span> scala.reflect.<span class="type">ClassTag</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkArray</span></span>[<span class="type">T</span>:<span class="type">ClassTag</span>](elem:<span class="type">T</span>*) = <span class="type">Array</span>[<span class="type">T</span>](elem:_*)</div><div class="line">mkArray: [<span class="type">T</span>](elem: <span class="type">T</span>*)(<span class="keyword">implicit</span> evidence$<span class="number">1</span>: scala.reflect.<span class="type">ClassTag</span>[<span class="type">T</span>])<span class="type">Array</span>[<span class="type">T</span>]</div><div class="line"></div><div class="line">scala&gt; mkArray(<span class="string">"Hello"</span>,<span class="string">"World"</span>)</div><div class="line">res3: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(<span class="type">Hello</span>, <span class="type">World</span>)</div><div class="line"></div><div class="line">scala&gt; mkArray(<span class="string">"Hello"</span>,<span class="number">123</span>)</div><div class="line">res4: <span class="type">Array</span>[<span class="type">Any</span>] = <span class="type">Array</span>(<span class="type">Hello</span>, <span class="number">123</span>)</div></pre></td></tr></table></figure><p><code>ClassTag</code>： 表示scala在运行时候的状态信息，这里表示调用时候数据类型3\</p><p>3、上界和下界</p><p>规定整数Int x，规定x的取值范围  100 &lt;= x &lt;=1000        </p><p>泛型T的取值范围：类的继承关系  A —&gt; B  —&gt; C —&gt; D 箭头指向子类<br>定义T的取值范围   D   &lt;:     T     &lt;:  B   ，T 的 取值范围 就是 B C D<br><code>&lt;:</code> 就是上下界的表示方法<br>概念<br>上界  S  &lt;： T  规定了 S的类型必须是 T的子类或本身<br>下界  U  &gt;： T  规定了 U的类型必须是 T的父类或本身</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0327_my</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * 上界和下界</div><div class="line">  */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="comment">//函数：驾驶</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">drive</span></span>() = println(<span class="string">"driving"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">drive</span></span>(): <span class="type">Unit</span> = println(<span class="string">"Car Driving"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bike</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">drive</span></span>(): <span class="type">Unit</span> = println(<span class="string">"Bike Driving"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaUpperBound</span> </span>&#123;</div><div class="line">  <span class="comment">//定义驾驶佳通工具的函数,规定了上界</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">takeVehcli</span></span>[<span class="type">T</span> &lt;: <span class="type">Vehicle</span>](v: <span class="type">T</span>) = v.drive()</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//定义交通工具</span></div><div class="line">    <span class="keyword">var</span> v:<span class="type">Vehicle</span> = <span class="keyword">new</span> <span class="type">Vehicle</span></div><div class="line">    takeVehcli(v)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> c:<span class="type">Car</span> = <span class="keyword">new</span> <span class="type">Car</span></div><div class="line">    takeVehcli(c)</div><div class="line"></div><div class="line">    <span class="comment">//语法没错，运行时出错</span></div><div class="line">    <span class="keyword">var</span> b:<span class="type">Bike</span> = <span class="keyword">new</span> <span class="type">Bike</span></div><div class="line">    takeVehcli(b)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>4、视图界定</p><p>定义：上界和下界的扩展，除了接收上界和下界规定的类型以外，还可以接受通过隐式转换过去的类型，用<code>%</code>表示</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">addTwoString</span></span>[<span class="type">T</span> &lt;% <span class="type">String</span>](x:<span class="type">T</span>,y:<span class="type">T</span>) = x + <span class="string">"****"</span> + y</div><div class="line">addTwoString: [<span class="type">T</span>](x: <span class="type">T</span>, y: <span class="type">T</span>)(<span class="keyword">implicit</span> evidence$<span class="number">1</span>: <span class="type">T</span> =&gt; <span class="type">String</span>)<span class="type">String</span></div><div class="line"></div><div class="line">scala&gt; addTwoString(<span class="string">"hello"</span>,<span class="number">111</span>)</div><div class="line">&lt;console&gt;:<span class="number">13</span>: error: <span class="type">No</span> <span class="keyword">implicit</span> view available from <span class="type">Any</span> =&gt; <span class="type">String</span>.</div><div class="line">       addTwoString(<span class="string">"hello"</span>,<span class="number">111</span>)</div><div class="line">                   ^</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">intToString</span></span>(n:<span class="type">Int</span>):<span class="type">String</span> = n.toString</div><div class="line">warning: there was one feature warning; re-run <span class="keyword">with</span> -feature <span class="keyword">for</span> details</div><div class="line">intToString: (n: <span class="type">Int</span>)<span class="type">String</span></div><div class="line"></div><div class="line">scala&gt; addTwoString(<span class="number">222</span>,<span class="number">111</span>)</div><div class="line">res5: <span class="type">String</span> = <span class="number">222</span>****<span class="number">111</span></div></pre></td></tr></table></figure><p>​    隐式转换使用<code>implicit</code>关键字进行定义，一旦定义，后台一直运行，需要用的时候会自行调用，区别于上下界，隐式转换使用%,函数名任意取</p><p>执行过程：</p><ol><li>调用了intToString   将Int=&gt;String</li><li>addTwoString(“1”,”2”)</li></ol><p>5、协变和逆变(了解即可)</p><p>协变：表示在类型参数前面加上<code>+</code>,泛型变量的值，可以是本身类型或者其子类类型</p><p>逆变：表示在类型参数前面加上<code>-</code>,泛型变量的值，可以是本身类型或者其父类类型</p><p>协变：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0327_my</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sparrow</span> <span class="keyword">extends</span> <span class="title">Bird</span></span></div><div class="line"></div><div class="line"><span class="comment">//定义第四个类：吃东西的类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EatSomeSthing</span>[+<span class="type">T</span>](<span class="params">t:<span class="type">T</span></span>)</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo04</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</div><div class="line">  <span class="comment">//定义一个鸟吃东西的对象</span></div><div class="line">  <span class="keyword">var</span> c1:<span class="type">EatSomeSthing</span>[<span class="type">Bird</span>] = <span class="keyword">new</span> <span class="type">EatSomeSthing</span>[<span class="type">Bird</span>](<span class="keyword">new</span> <span class="type">Bird</span>)</div><div class="line"></div><div class="line">  <span class="comment">//定义动物吃东西的对象</span></div><div class="line">  <span class="keyword">var</span> c2:<span class="type">EatSomeSthing</span>[<span class="type">Animal</span>] = c1</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">    * 能否把c1赋给c2</div><div class="line">    * class EatSomeSthing[T](t:T)</div><div class="line">    * var c2:EatSomeSthing[Animal] = c1 报错</div><div class="line">    * 原因：EatSomeSthing[Bird]并没有继承EatSomeSthing[Animal]</div><div class="line">    * 修改为class EatSomeSthing[+T](t:T)</div><div class="line">    * 报错消失</div><div class="line">    */</div><div class="line"></div><div class="line">  <span class="keyword">var</span> c3:<span class="type">EatSomeSthing</span>[<span class="type">Sparrow</span>] = <span class="keyword">new</span> <span class="type">EatSomeSthing</span>[<span class="type">Sparrow</span>](<span class="keyword">new</span> <span class="type">Sparrow</span>)</div><div class="line">  <span class="keyword">var</span> c4:<span class="type">EatSomeSthing</span>[<span class="type">Animal</span>] = <span class="keyword">new</span> <span class="type">EatSomeSthing</span>[<span class="type">Animal</span>](<span class="keyword">new</span> <span class="type">Animal</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>逆变：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0327_my</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  *逆变实例</div><div class="line">  */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sparrow</span> <span class="keyword">extends</span> <span class="title">Bird</span></span></div><div class="line"></div><div class="line"><span class="comment">//定义第四个类：吃东西的类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EatSomeSthing</span>[-<span class="type">T</span>](<span class="params">t:<span class="type">T</span></span>)</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo05</span> <span class="keyword">extends</span> <span class="title">App</span></span>&#123;</div><div class="line">  <span class="comment">//定义一个鸟吃东西的对象</span></div><div class="line">  <span class="keyword">var</span> c1:<span class="type">EatSomeSthing</span>[<span class="type">Bird</span>] = <span class="keyword">new</span> <span class="type">EatSomeSthing</span>[<span class="type">Bird</span>](<span class="keyword">new</span> <span class="type">Bird</span>)</div><div class="line"></div><div class="line">  <span class="keyword">var</span> c2:<span class="type">EatSomeSthing</span>[<span class="type">Sparrow</span>] = c1</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="2、隐式转换"><a href="#2、隐式转换" class="headerlink" title="2、隐式转换"></a>2、隐式转换</h1><p>1、关键字<code>implicit</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0327_my</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * 隐式转换函数</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span>(<span class="params">name: <span class="type">String</span></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getFruitName</span></span>(): <span class="type">String</span> = name</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monkey</span>(<span class="params">f: <span class="type">Fruit</span></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">say</span></span>() = println(<span class="string">"Monkey like "</span> + f.getFruitName())</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImplicitDemo</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//定义一个水果对象</span></div><div class="line">    <span class="keyword">var</span> f: <span class="type">Fruit</span> = <span class="keyword">new</span> <span class="type">Fruit</span>(<span class="string">"Banana"</span>)</div><div class="line"></div><div class="line">    f.say()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//隐式转换</span></div><div class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">fruitToMonkey</span></span>(f: <span class="type">Fruit</span>): <span class="type">Monkey</span> = <span class="keyword">new</span> <span class="type">Monkey</span>(f)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>补充：隐式函数会在后台自行调用和检测</p><p>2、隐式参数：使用<code>implicit</code> 修饰的函数参数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">testPara</span></span>(<span class="keyword">implicit</span> name:<span class="type">String</span>) = println(<span class="string">"The value is "</span> + name)</div><div class="line">testPara: (<span class="keyword">implicit</span> name: <span class="type">String</span>)<span class="type">Unit</span></div><div class="line"></div><div class="line">scala&gt; testPara(<span class="string">"ssssssss"</span>)</div><div class="line"><span class="type">The</span> value is ssssssss</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">implicit</span> <span class="keyword">val</span> name:<span class="type">String</span> = <span class="string">"Gakki"</span></div><div class="line">name: <span class="type">String</span> = <span class="type">Gakki</span></div><div class="line"></div><div class="line">scala&gt; testPara(<span class="string">""</span>)</div><div class="line"><span class="type">The</span> value is</div><div class="line"></div><div class="line"><span class="comment">//不给参数，调用隐式参数</span></div><div class="line">scala&gt; testPara</div><div class="line"><span class="type">The</span> value is <span class="type">Gakki</span></div></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">smaller</span></span>[<span class="type">T</span>](a:<span class="type">T</span>,b:<span class="type">T</span>)(<span class="keyword">implicit</span> order : <span class="type">T</span> =&gt; <span class="type">Ordered</span>[<span class="type">T</span>]) = <span class="keyword">if</span> (a &lt; b) a <span class="keyword">else</span> b</div><div class="line">smaller: [<span class="type">T</span>](a: <span class="type">T</span>, b: <span class="type">T</span>)(<span class="keyword">implicit</span> prder: <span class="type">T</span> =&gt; <span class="type">Ordered</span>[<span class="type">T</span>])<span class="type">T</span></div><div class="line"></div><div class="line">scala&gt; smaller(<span class="string">"Hello"</span>,<span class="string">"ABC"</span>)</div><div class="line">res10: <span class="type">String</span> = <span class="type">ABC</span></div></pre></td></tr></table></figure><p>解释：order就是一个隐式参数，我们使用scala中的Ordered类，表示该值可以被排序，也就是可以被比较</p><p>作用：扩充了属性的功能</p><p>3、隐式类</p><p>在类名加<code>implicit</code>，作用是扩充类的功能</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0327_my</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * 隐式类</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo06</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//执行两个数字的求和</span></div><div class="line">    println(<span class="string">"两个数字的和是："</span> + <span class="number">1.</span>add(<span class="number">2</span>))</div><div class="line"></div><div class="line">     <span class="comment">//定义一个隐式类，来增强1的功能</span></div><div class="line">    <span class="keyword">implicit</span> <span class="class"><span class="keyword">class</span> <span class="title">Calc</span>(<span class="params">x: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">      <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(i: <span class="type">Int</span>): <span class="type">Int</span> = x + i</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>分析：   因为1是int类型，所以会被传递进来<br>执行过程：把1–&gt;Calc(x)执行 <code>var a = new Calc(1)</code>,最后调用了a.add方法，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、泛型&quot;&gt;&lt;a href=&quot;#1、泛型&quot; class=&quot;headerlink&quot; title=&quot;1、泛型&quot;&gt;&lt;/a&gt;1、泛型&lt;/h2&gt;&lt;p&gt;1、泛型类：定义类的时候，可以带有一个泛型的参数&lt;/p&gt;
&lt;p&gt;2、泛型函数：定义一个函数，可以带有一个泛型的参数&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Scala" scheme="rabbitluluu.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala进阶--模式匹配&amp;样本类</title>
    <link href="rabbitluluu.github.io/2019/03/30/Scala%E8%BF%9B%E9%98%B6-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D-%E6%A0%B7%E6%9C%AC%E7%B1%BB/"/>
    <id>rabbitluluu.github.io/2019/03/30/Scala进阶-模式匹配-样本类/</id>
    <published>2019-03-30T03:07:34.000Z</published>
    <updated>2019-03-30T03:09:13.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、模式匹配"><a href="#1、模式匹配" class="headerlink" title="1、模式匹配"></a>1、模式匹配</h1><p>情况1：相当于java的switch case</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo01</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> chi = '-'</div><div class="line">    <span class="keyword">var</span> sign = <span class="number">0</span></div><div class="line"></div><div class="line">    chi <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> '+' =&gt; sign = <span class="number">1</span></div><div class="line">      <span class="keyword">case</span> '-' =&gt; sign = <span class="number">-1</span></div><div class="line">      <span class="keyword">case</span> _ =&gt; sign = <span class="number">0</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    println(sign)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>情况2：使用了scala的守卫，形如<code>case _ if</code> 用来匹配某种类型的所有值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//情况2：匹配所有数字,</span></div><div class="line">   <span class="comment">// scala中的守卫: case _ if 匹配某种类型的所有值</span></div><div class="line">   <span class="keyword">var</span> ch2 = '<span class="number">6</span>'</div><div class="line">   <span class="keyword">var</span> result : <span class="type">Int</span> = <span class="number">-1</span></div><div class="line"></div><div class="line">   ch2 <span class="keyword">match</span> &#123;</div><div class="line">     <span class="keyword">case</span> '+' =&gt; println(<span class="string">"这是一个加号"</span>)</div><div class="line">     <span class="keyword">case</span> '-' =&gt; println(<span class="string">"这是一个减号"</span>)</div><div class="line">     <span class="keyword">case</span> _ <span class="keyword">if</span> <span class="type">Character</span>.isDigit(ch2) =&gt; result = <span class="type">Character</span>.digit(ch2,<span class="number">10</span>)</div><div class="line">     <span class="keyword">case</span> _ =&gt; println(<span class="string">"其他"</span>)</div><div class="line">   &#125;</div><div class="line">   println(result)</div></pre></td></tr></table></figure><p>情况3：在case中使用变量，如下<code>ch</code>是一个变量，代表传进来的变量值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//情况3：在模式匹配中使用变量</span></div><div class="line">   <span class="keyword">var</span> mystr = <span class="string">"Hello World"</span></div><div class="line"></div><div class="line">   mystr(<span class="number">7</span>) <span class="keyword">match</span> &#123;</div><div class="line">     <span class="keyword">case</span> '+' =&gt; println(<span class="string">"这是一个加号"</span>)</div><div class="line">     <span class="keyword">case</span> '-' =&gt; println(<span class="string">"这是一个减号"</span>)</div><div class="line">     <span class="keyword">case</span> ch =&gt; println(ch)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>情况4：类似于java的instance of  </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//情况4：匹配instance of</span></div><div class="line">   <span class="keyword">var</span> v4 : <span class="type">Any</span>= <span class="number">100</span></div><div class="line">   v4 <span class="keyword">match</span> &#123;</div><div class="line">     <span class="keyword">case</span> x : <span class="type">Int</span> =&gt; println(<span class="string">"这是一个整数"</span>)</div><div class="line">     <span class="keyword">case</span> s : <span class="type">String</span> =&gt; println(<span class="string">"这是一个字符串"</span>)</div><div class="line">     <span class="keyword">case</span> _ =&gt; println(<span class="string">"这是其他类型"</span>)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>情况5：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//情况5：匹配数组和列表，</span></div><div class="line">   <span class="keyword">var</span> myArray = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">   myArray <span class="keyword">match</span> &#123;</div><div class="line">     <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>) =&gt; println(<span class="string">"数组中只有一个0"</span>)</div><div class="line">     <span class="keyword">case</span> <span class="type">Array</span>(x,y) =&gt; println(<span class="string">"数组中包含两个元素"</span>)</div><div class="line">     <span class="keyword">case</span> <span class="type">Array</span>(x,y,z) =&gt; println(<span class="string">"数组包含是三个元素"</span>)</div><div class="line">     <span class="keyword">case</span> <span class="type">Array</span>(_*) =&gt; println(<span class="string">"这是一个有多个元素的数组"</span>)</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> myList = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">   myList <span class="keyword">match</span> &#123;</div><div class="line">     <span class="keyword">case</span> <span class="type">List</span>(<span class="number">0</span>) =&gt; println(<span class="string">"数组中只有一个0"</span>)</div><div class="line">     <span class="keyword">case</span> <span class="type">List</span>(x, y) =&gt; println(<span class="string">"数组中包含两个元素,和为："</span> + (x + y))</div><div class="line">     <span class="keyword">case</span> <span class="type">List</span>(x, y, z) =&gt; println(<span class="string">"数组包含是三个元素,和为："</span> + (x + y + z))</div><div class="line">     <span class="keyword">case</span> <span class="type">List</span>(_*) =&gt; println(<span class="string">"这是一个有多个元素的数组,和为："</span> + myList.sum)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h1 id="2、样本类"><a href="#2、样本类" class="headerlink" title="2、样本类"></a>2、样本类</h1><p>定义：case class</p><p>作用：</p><ol><li>支持模式匹配 instanceof</li><li>定一个Spark Sql中的schema：表结构</li></ol><p><strong>不用样本类的情况下：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span></div><div class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span></div><div class="line"></div><div class="line">scala&gt; <span class="class"><span class="keyword">class</span> <span class="title">Banana</span>(<span class="params">name:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Fruit</span></span></div><div class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">Banana</span></span></div><div class="line"></div><div class="line">scala&gt; <span class="class"><span class="keyword">class</span> <span class="title">Apple</span>(<span class="params">name:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Fruit</span></span></div><div class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="type">Apple</span>(<span class="string">"Apple"</span>)</div><div class="line">a: <span class="type">Apple</span> = <span class="type">Apple</span>@<span class="number">7e446</span>d92</div><div class="line"></div><div class="line"><span class="comment">//注意使用大括号</span></div><div class="line">scala&gt; println(a.isInstanceOf[<span class="type">Fruit</span>])</div><div class="line"><span class="literal">true</span></div><div class="line"></div><div class="line">scala&gt; println(a.isInstanceOf[<span class="type">Banana</span>])</div><div class="line">&lt;console&gt;:<span class="number">16</span>: warning: fruitless <span class="class"><span class="keyword">type</span> <span class="title">test</span></span>: a value of <span class="class"><span class="keyword">type</span> <span class="title">Apple</span> <span class="title">cannot</span> <span class="title">also</span> <span class="title">be</span> <span class="title">a</span> <span class="title">Banana</span></span></div><div class="line">println(a.isInstanceOf[<span class="type">Banana</span>])</div><div class="line">^</div><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure><p><strong>用样本类的情况：</strong></p><p>用case class来做模式匹配</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day_0327_my</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  *使用样本类</div><div class="line">  */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span></span></div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> (<span class="params">name : <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Vehicle</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Bike</span>(<span class="params">name : <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Vehicle</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo02OfCase</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">var</span> aCar : <span class="type">Vehicle</span> = <span class="keyword">new</span> <span class="type">Car</span>(<span class="string">"Car"</span>)</div><div class="line"></div><div class="line">    aCar <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="type">Car</span>(name) =&gt; println(<span class="string">"汽车---: "</span> + name)</div><div class="line">      <span class="keyword">case</span> <span class="type">Bike</span>(name) =&gt; println(<span class="string">"自行车---: "</span> + name)</div><div class="line">      <span class="keyword">case</span> _ =&gt; println(<span class="string">"嘛也不是"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="3、类型区分"><a href="#3、类型区分" class="headerlink" title="3、类型区分"></a>3、类型区分</h1><p><code>Any</code>：表示任何类型，相当于java中的Object</p><p><code>Unit</code>：表示没有值，void</p><p><code>Nothing</code>：在函数抛出异常时，返回值就是Nothing，是scala类层级中的最低端，他是任何其他类型的子类型</p><p><code>Null</code>：是所有引用类型的子类，值：null</p><p>特殊类型：</p><p><code>Option</code>：表示一个值是可选的（有/无值）</p><p><code>Some</code>：如果值存在，Option[T]就是一个Some</p><p><code>None</code>：如果值不存在，Option[T]就是None</p><p>四个N的区分：</p><p><code>None</code>：如果值不存在，Option[T]就是None</p><p><code>Nothing</code>：在函数抛出异常时，返回值就是Nothing</p><p><code>Null</code>：可以赋值给所有的引用类型，但不能赋值给值类型</p><p><code>Nil</code>：空的List</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、模式匹配&quot;&gt;&lt;a href=&quot;#1、模式匹配&quot; class=&quot;headerlink&quot; title=&quot;1、模式匹配&quot;&gt;&lt;/a&gt;1、模式匹配&lt;/h1&gt;&lt;p&gt;情况1：相当于java的switch case&lt;/p&gt;
&lt;figure class=&quot;highlight s
      
    
    </summary>
    
    
      <category term="Scala" scheme="rabbitluluu.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala进阶--集合</title>
    <link href="rabbitluluu.github.io/2019/03/27/Scala%E8%BF%9B%E9%98%B6-%E9%9B%86%E5%90%88/"/>
    <id>rabbitluluu.github.io/2019/03/27/Scala进阶-集合/</id>
    <published>2019-03-27T01:44:04.000Z</published>
    <updated>2019-03-27T01:45:26.886Z</updated>
    
    <content type="html"><![CDATA[<p>定位：类似于java集合</p><h2 id="1、可变集合和不可变集合（map）"><a href="#1、可变集合和不可变集合（map）" class="headerlink" title="1、可变集合和不可变集合（map）"></a>1、可变集合和不可变集合（map）</h2><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">math</span> </span>= scala.collection.immutable.<span class="type">Map</span>(<span class="string">"Gakki"</span> -&gt; <span class="number">80</span>, <span class="string">"Jojo"</span> -&gt; <span class="number">70</span>)</div><div class="line">math: scala.collection.immutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>]</div><div class="line"></div><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">math</span> </span>= scala.collection.mutable.<span class="type">Map</span>(<span class="string">"Gakki"</span> -&gt; <span class="number">80</span>, <span class="string">"Jojo"</span> -&gt; <span class="number">70</span>)</div><div class="line">math: scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>]</div></pre></td></tr></table></figure><p>操作：</p><ol><li><p>获取集合中操作</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">scala&gt; math(<span class="string">"Gakki"</span>)</div><div class="line">res1: <span class="type">Int</span> = <span class="number">80</span></div><div class="line"></div><div class="line">scala&gt; math.get(<span class="string">"Gakki"</span>)</div><div class="line">res2: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">Some</span>(<span class="number">80</span>)</div><div class="line"></div><div class="line">scala&gt; math.get(<span class="string">"Gakki111"</span>)</div><div class="line">res3: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">None</span></div><div class="line"></div><div class="line">scala&gt; math(<span class="string">"Gakki111"</span>)</div><div class="line">java.util.<span class="type">NoSuchElementException</span>: key not found: <span class="type">Gakki111</span></div><div class="line">  at scala.collection.<span class="type">MapLike</span>$<span class="class"><span class="keyword">class</span>.<span class="title">default</span>(<span class="params"><span class="type">MapLike</span>.scala:228</span>)</span></div><div class="line">  at scala.collection.<span class="type">AbstractMap</span>.<span class="keyword">default</span>(<span class="type">Map</span>.scala:<span class="number">59</span>)</div><div class="line">  at scala.collection.mutable.<span class="type">HashMap</span>.apply(<span class="type">HashMap</span>.scala:<span class="number">65</span>)</div><div class="line">  ... <span class="number">32</span> elided</div></pre></td></tr></table></figure></li><li><p>更新集合中的值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scala&gt; math(<span class="string">"Gakki"</span>) = <span class="number">99</span></div><div class="line"></div><div class="line">scala&gt; math</div><div class="line">res9: scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="type">Jojo</span> -&gt; <span class="number">70</span>, <span class="type">Gakki</span> -&gt; <span class="number">99</span>)</div></pre></td></tr></table></figure></li><li><p>添加元素</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; math += <span class="string">"Sean"</span> -&gt; <span class="number">99</span></div><div class="line">res10: scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="type">Sean</span> -&gt; <span class="number">99</span>, <span class="type">Jojo</span> -&gt; <span class="number">70</span>, <span class="type">Gakki</span> -&gt; <span class="number">80</span>)</div><div class="line"></div><div class="line">scala&gt; math</div><div class="line">res11: scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="type">Jojo</span> -&gt; <span class="number">70</span>, <span class="type">Gakki</span> -&gt; <span class="number">80</span>)</div></pre></td></tr></table></figure></li><li><p>移除元素</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; math -= <span class="string">"Sean"</span></div><div class="line">res12: scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="type">Jojo</span> -&gt; <span class="number">70</span>, <span class="type">Gakki</span> -&gt; <span class="number">80</span>)</div></pre></td></tr></table></figure></li></ol><h2 id="2、列表：可变列表，不可变列表"><a href="#2、列表：可变列表，不可变列表" class="headerlink" title="2、列表：可变列表，不可变列表"></a>2、列表：可变列表，不可变列表</h2><p><strong>不可变列表：</strong></p><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> myList  =  <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">myList: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">var</span> nullList : <span class="type">List</span>[<span class="type">Nothing</span>] = <span class="type">List</span>()</div><div class="line">nullList: <span class="type">List</span>[<span class="type">Nothing</span>] = <span class="type">List</span>()</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">var</span> dim : <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="type">List</span>(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</div><div class="line">dim: <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="type">List</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>))</div></pre></td></tr></table></figure><p>常见操作：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//首位元素</span></div><div class="line">scala&gt; myList.head</div><div class="line">res13: <span class="type">Int</span> = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">//除了第一个之外，其他的元素</span></div><div class="line">scala&gt; myList.tail</div><div class="line">res14: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div></pre></td></tr></table></figure><p><strong>可变列表：</strong>在<code>scala.collection.mutable</code>中</p><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> myList = scala.collection.mutable.<span class="type">LinkedList</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">warning: there was one deprecation warning; re-run <span class="keyword">with</span> -deprecation <span class="keyword">for</span> details</div><div class="line"></div><div class="line">myList: scala.collection.mutable.<span class="type">LinkedList</span>[<span class="type">Int</span>] = <span class="type">LinkedList</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure><p>操作：</p><p>将每个元素乘以2</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明指针</span></div><div class="line">scala&gt; <span class="keyword">var</span> cul = myList</div><div class="line">cul: scala.collection.mutable.<span class="type">LinkedList</span>[<span class="type">Int</span>] = <span class="type">LinkedList</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line"><span class="comment">//处理元素，Nil代表NULL，elem代表data，next是指向下一元素的指针</span></div><div class="line">scala&gt; <span class="keyword">while</span>(cul != <span class="type">Nil</span>)&#123;</div><div class="line">     | cul.elem *= <span class="number">2</span></div><div class="line">     | cul = cul.next</div><div class="line">     | &#125;</div><div class="line"></div><div class="line">scala&gt; myList</div><div class="line">res18: scala.collection.mutable.<span class="type">LinkedList</span>[<span class="type">Int</span>] = <span class="type">LinkedList</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>)</div></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用map，结合匿名函数进行运算</span></div><div class="line">scala&gt; myList.map(_ * <span class="number">2</span>)</div><div class="line">warning: there was one deprecation warning; re-run <span class="keyword">with</span> -deprecation <span class="keyword">for</span> details</div><div class="line"></div><div class="line">res19: scala.collection.mutable.<span class="type">LinkedList</span>[<span class="type">Int</span>] = <span class="type">LinkedList</span>(<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>)</div></pre></td></tr></table></figure><h2 id="3、序列"><a href="#3、序列" class="headerlink" title="3、序列"></a>3、序列</h2><h3 id="3-1、数据库数列：sequence-、-auto-increment"><a href="#3-1、数据库数列：sequence-、-auto-increment" class="headerlink" title="3,1、数据库数列：sequence 、 auto increment"></a>3,1、数据库数列：sequence 、 auto increment</h3><ul><li>作为主键，实现自动增长</li><li>提高性能，序列在Oracle是在内存中的</li></ul><h3 id="3-2、Vector和Range"><a href="#3-2、Vector和Range" class="headerlink" title="3.2、Vector和Range"></a>3.2、Vector和Range</h3><p><strong>Vector</strong> ：是一个带下标的序列，我们可以通过下标来访问Vector中的元素</p><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">v</span> </span>= <span class="type">Vector</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">v: scala.collection.immutable.<span class="type">Vector</span>[<span class="type">Int</span>]</div></pre></td></tr></table></figure><p><strong>Range</strong> ： 是一个整数的序列</p><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//含头不含尾</span></div><div class="line">scala&gt; <span class="type">Range</span>(<span class="number">0</span>,<span class="number">5</span>)</div><div class="line">res21: scala.collection.immutable.<span class="type">Range</span> = <span class="type">Range</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line">scala&gt; println(<span class="number">0</span> until <span class="number">5</span>)</div><div class="line"><span class="type">Range</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//包含头尾</span></div><div class="line">scala&gt; println(<span class="number">0</span> to <span class="number">5</span>)</div><div class="line"><span class="type">Range</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div></pre></td></tr></table></figure><p>Range可以相加：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; ('<span class="number">0</span>' to '<span class="number">9</span>') ++ ('<span class="type">A</span>' to '<span class="type">Z</span>')</div><div class="line">res22: scala.collection.immutable.<span class="type">IndexedSeq</span>[<span class="type">Char</span>] = <span class="type">Vector</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="type">A</span>, <span class="type">B</span>, <span class="type">C</span>, <span class="type">D</span>, <span class="type">E</span>, <span class="type">F</span>, <span class="type">G</span>, <span class="type">H</span>, <span class="type">I</span>, <span class="type">J</span>, <span class="type">K</span>, <span class="type">L</span>, <span class="type">M</span>, <span class="type">N</span>, <span class="type">O</span>, <span class="type">P</span>, <span class="type">Q</span>, <span class="type">R</span>, <span class="type">S</span>, <span class="type">T</span>, <span class="type">U</span>, <span class="type">V</span>, <span class="type">W</span>, <span class="type">X</span>, <span class="type">Y</span>, <span class="type">Z</span>)</div></pre></td></tr></table></figure><p>Range可以转换为List</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="number">1</span> to <span class="number">5</span> toList</div><div class="line">warning: there was one feature warning; re-run <span class="keyword">with</span> -feature <span class="keyword">for</span> details</div><div class="line">res23: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div></pre></td></tr></table></figure><h2 id="3、集（Set）"><a href="#3、集（Set）" class="headerlink" title="3、集（Set）"></a>3、集（Set）</h2><p><strong>Set：</strong></p><p>概念：不重复元素的集合，默认是HashSet，与java类似</p><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> s = <span class="type">Set</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>)</div><div class="line">s: scala.collection.mutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line">scala&gt; s + <span class="number">1</span></div><div class="line">res24: scala.collection.mutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line">scala&gt; s + <span class="number">2</span></div><div class="line">res25: scala.collection.mutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line">scala&gt; s</div><div class="line">res26: scala.collection.mutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure><p>运算后返回新的集，不改变原来集的元素</p><p><strong>SortedSet：</strong></p><p>概念：可排序的Set</p><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> s2 = scala.collection.mutable.<span class="type">SortedSet</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">8</span>)</div><div class="line">s2: scala.collection.mutable.<span class="type">SortedSet</span>[<span class="type">Int</span>] = <span class="type">TreeSet</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">10</span>)</div></pre></td></tr></table></figure><p>操作：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断元素是否存在</span></div><div class="line">scala&gt; s2.contains(<span class="number">1</span>)</div><div class="line">res53: <span class="type">Boolean</span> = <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">//定义两个Set</span></div><div class="line">scala&gt; <span class="keyword">var</span> s1 = <span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div><div class="line">s1: scala.collection.immutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">var</span> s2 = <span class="type">Set</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</div><div class="line">s2: scala.collection.immutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">8</span>)</div><div class="line"></div><div class="line"><span class="comment">//union操作：两个集相加</span></div><div class="line">scala&gt; s1 union s2</div><div class="line">res55: scala.collection.immutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>)</div><div class="line"><span class="comment">//intersect：交集</span></div><div class="line">scala&gt; s1 intersect s2</div><div class="line">res56: scala.collection.immutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">5</span>, <span class="number">6</span>)</div><div class="line"><span class="comment">//diff：差集</span></div><div class="line">scala&gt; s1 diff s2</div><div class="line">res57: scala.collection.immutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;定位：类似于java集合&lt;/p&gt;
&lt;h2 id=&quot;1、可变集合和不可变集合（map）&quot;&gt;&lt;a href=&quot;#1、可变集合和不可变集合（map）&quot; class=&quot;headerlink&quot; title=&quot;1、可变集合和不可变集合（map）&quot;&gt;&lt;/a&gt;1、可变集合和不可变集合（ma
      
    
    </summary>
    
    
      <category term="Scala" scheme="rabbitluluu.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala进阶--函数式编程</title>
    <link href="rabbitluluu.github.io/2019/03/27/Scala%E8%BF%9B%E9%98%B6-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>rabbitluluu.github.io/2019/03/27/Scala进阶-函数式编程/</id>
    <published>2019-03-27T01:43:52.000Z</published>
    <updated>2019-03-27T01:44:51.555Z</updated>
    
    <content type="html"><![CDATA[<p>多范式：面相对象，函数式编程（程序实现起来简单）</p><p>举例：wordcount</p><p>sc是SparkContext对象，非常重要！！</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = sc.textFile(<span class="string">"hdfs://xxxx//xxx/data.txt"</span>)</div><div class="line">.flatMap(_.split(<span class="string">" "</span>))</div><div class="line">.map((_,<span class="number">1</span>))</div><div class="line">.reduceByKey(_+_)</div><div class="line">.collect</div></pre></td></tr></table></figure><h1 id="1、匿名函数"><a href="#1、匿名函数" class="headerlink" title="1、匿名函数"></a>1、匿名函数</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> myarry = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">myarry: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">fun1</span></span>(x:<span class="type">Int</span>):<span class="type">Int</span> = x * <span class="number">3</span></div><div class="line">fun1: (x: <span class="type">Int</span>)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; (x:<span class="type">Int</span>) =&gt; x * <span class="number">3</span></div><div class="line">res0: <span class="type">Int</span> =&gt; <span class="type">Int</span> = &lt;function1&gt;</div><div class="line"></div><div class="line">scala&gt; myarry.map((x:<span class="type">Int</span>) =&gt; x * <span class="number">3</span>)</div><div class="line">res2: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>)</div></pre></td></tr></table></figure><p><code>(x:Int) =&gt; x * 3</code>作为参数，传到了另一个函数里面，同理<code>(_,1)</code>   <code>(_+_)</code>都是匿名函数</p><h1 id="2、高阶函数"><a href="#2、高阶函数" class="headerlink" title="2、高阶函数"></a>2、高阶函数</h1><p>定义：带有<strong>函数参数</strong>的<strong>函数</strong>，把一个函数作为另一个函数的参数值</p><p>如：定义一个高阶函数</p><p>对10做<strong>某种</strong>运算：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">someAction</span></span>(f:(<span class="type">Double</span>) =&gt; (<span class="type">Double</span>)) = f(<span class="number">10</span>)</div><div class="line">someAction: (f: <span class="type">Double</span> =&gt; <span class="type">Double</span>)<span class="type">Double</span></div><div class="line">scala&gt; <span class="keyword">import</span> scala.math._</div><div class="line"><span class="keyword">import</span> scala.math._</div><div class="line"></div><div class="line">scala&gt; someAction(sqrt)</div><div class="line">res3: <span class="type">Double</span> = <span class="number">3.1622776601683795</span></div><div class="line"></div><div class="line">scala&gt; someAction(sin)</div><div class="line">res4: <span class="type">Double</span> = <span class="number">-0.5440211108893698</span></div></pre></td></tr></table></figure><p><code>(Double) =&gt; (Double)</code>  代表f的类型，入参是double，返回值也是double</p><p><code>f(10)   ---&gt;  sqrt(10)</code></p><h2 id="2-1、高阶函数实例"><a href="#2-1、高阶函数实例" class="headerlink" title="2.1、高阶函数实例"></a>2.1、高阶函数实例</h2><p><strong>map：</strong>相当于一个循环，对某个集合中的每个元素都进行操作（接收一个函数），返回一个<strong>新的集合</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; var numbers = List(1,2,3,4,5,6,7,8)</div><div class="line">numbers: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8)</div><div class="line"></div><div class="line">scala&gt; numbers.map((i:Int) =&gt; i*2)</div><div class="line">res6: List[Int] = List(2, 4, 6, 8, 10, 12, 14, 16)</div><div class="line"></div><div class="line">scala&gt; numbers.map(_ * 2)</div><div class="line">res7: List[Int] = List(2, 4, 6, 8, 10, 12, 14, 16)</div></pre></td></tr></table></figure><ol><li><code>(i:Int) =&gt; i*2</code>  和  <code>_ * 2</code>   等价</li><li>两次结果相同，表名map操作并没有改变原来的值，而是返回了一个<strong>新的集合</strong>!!</li></ol><p><strong>foreach:</strong>相当于一个循环，对某个集合中的每个元素都进行操作（接收一个函数），不返回结果</p><p><strong>filter：</strong>过滤操作，选择满足的数据，返回bool值为true的数据</p><p>如下：查找能被2整除的</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; numbers.filter((i:<span class="type">Int</span>) =&gt; i%<span class="number">2</span> ==<span class="number">0</span>)</div><div class="line">res12: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>)</div></pre></td></tr></table></figure><p><strong>zip：</strong>合并数据，少的不合并</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).zip(<span class="type">List</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>))</div><div class="line">res13: <span class="type">List</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = <span class="type">List</span>((<span class="number">1</span>,<span class="number">5</span>), (<span class="number">2</span>,<span class="number">6</span>), (<span class="number">3</span>,<span class="number">7</span>))</div><div class="line"></div><div class="line">scala&gt; <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).zip(<span class="type">List</span>(<span class="number">5</span>,<span class="number">6</span>))</div><div class="line">res14: <span class="type">List</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = <span class="type">List</span>((<span class="number">1</span>,<span class="number">5</span>), (<span class="number">2</span>,<span class="number">6</span>))</div></pre></td></tr></table></figure><p><strong>partition：</strong>根据断言（就是<strong>某个条件</strong>，可以通过匿名函数来实现），来进行分区</p><p>如下：能被2整除的分成一个区，否则为另一个区</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; numbers.partition((i:<span class="type">Int</span>) =&gt; i%<span class="number">2</span> ==<span class="number">0</span>)</div><div class="line">res15: (<span class="type">List</span>[<span class="type">Int</span>], <span class="type">List</span>[<span class="type">Int</span>]) = (<span class="type">List</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>),<span class="type">List</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>))</div></pre></td></tr></table></figure><p><strong>find：</strong>查找第一个满足条件的元素</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; numbers.find(_%<span class="number">3</span> == <span class="number">0</span>)</div><div class="line">res16: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">Some</span>(<span class="number">3</span>)</div></pre></td></tr></table></figure><p><strong>flatten：</strong>把嵌套的结果展开</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="type">List</span>(<span class="type">List</span>(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>),<span class="type">List</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)).flatten</div><div class="line">res17: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</div></pre></td></tr></table></figure><p><strong>flatmap：</strong>相当于一个map+flatten</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> myList = <span class="type">List</span>(<span class="type">List</span>(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>),<span class="type">List</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>))</div><div class="line">myList: <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>(<span class="type">List</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>), <span class="type">List</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>))</div><div class="line"></div><div class="line">scala&gt; myList.flatMap(x =&gt; x.map(_*<span class="number">2</span>))</div><div class="line">res18: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">18</span>)</div><div class="line"></div><div class="line">scala&gt; myList.flatMap(_.map(_*<span class="number">2</span>))</div><div class="line">res4: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">18</span>)</div></pre></td></tr></table></figure><p>执行过程：</p><ol><li>将<code>List(List(2,4,6,8,10),List(1,3,5,7,9))</code>调用<code>map(_*2)</code>方法，x代表一个List</li><li>使用flatten来展开</li></ol><p>两者对比：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day03</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * 对比flatmap和map</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo02</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">    * .flatMap执行分析：</div><div class="line">    * x = 1 时，List(x * 2)  = List(2)</div><div class="line">    * x = 2 时，List(x * 2)  = List(4)</div><div class="line">    * x = 3 时，List('a', 'b')  = List('a', 'b')</div><div class="line">    *List(List(2),List(4),List('a', 'b')).flatmap ===&gt; List(2, 4, a, b)</div><div class="line">    * */</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">flatMap1</span></span>() = &#123;</div><div class="line">    <span class="keyword">val</span> li = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">    <span class="keyword">val</span> res = li.flatMap(x =&gt;</div><div class="line">      x <span class="keyword">match</span> &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span> =&gt; <span class="type">List</span>('a', 'b')</div><div class="line">        <span class="keyword">case</span> _ =&gt; <span class="type">List</span>(x * <span class="number">2</span>)</div><div class="line">      &#125;)</div><div class="line"></div><div class="line">    println(res)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">    * .map执行过程</div><div class="line">    * x = 1 时，x * 2  = 2 , List(2,2,3)</div><div class="line">    * x = 2 时，x * 2  = 4 , List(2,4,3)</div><div class="line">    * x = 3 时，List('a', 'b')  = List('a', 'b') , List(List(2), List(4), List(a, b))</div><div class="line">    * */</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">map1</span></span>() = &#123;</div><div class="line">    <span class="keyword">val</span> li = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">    <span class="keyword">val</span> res = li.map(x =&gt;</div><div class="line">      x <span class="keyword">match</span> &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span> =&gt; <span class="type">List</span>('a', 'b')</div><div class="line">        <span class="keyword">case</span> _ =&gt; <span class="type">List</span>(x * <span class="number">2</span>)</div><div class="line">      &#125;)</div><div class="line"></div><div class="line">    println(res)</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    flatMap1()</div><div class="line">    map1()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="3、闭包、柯里化"><a href="#3、闭包、柯里化" class="headerlink" title="3、闭包、柯里化"></a>3、闭包、柯里化</h1><ol><li>闭包：就是函数的嵌套，</li></ol><p>​    在一个函数里面，包含了另一个函数的定义</p><p>​    可以在内函数中访问外函数的变量</p><p>如：<code>def mulBy(factor:Double) = (x:Double) =&gt; x*factor</code></p><p>​                 外层                内层</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">mulBy</span></span>(factor:<span class="type">Double</span>) = (x:<span class="type">Double</span>) =&gt; x*factor</div><div class="line">mulBy: (factor: <span class="type">Double</span>)<span class="type">Double</span> =&gt; <span class="type">Double</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">var</span> triple = mulBy(<span class="number">3</span>)</div><div class="line">triple: <span class="type">Double</span> =&gt; <span class="type">Double</span> = &lt;function1&gt;</div><div class="line"></div><div class="line">scala&gt; triple(<span class="number">10</span>)</div><div class="line">res0: <span class="type">Double</span> = <span class="number">30.0</span></div><div class="line"></div><div class="line">scala&gt; triple(<span class="number">20</span>)</div><div class="line">res1: <span class="type">Double</span> = <span class="number">60.0</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">var</span> half = mulBy(<span class="number">0.5</span>)</div><div class="line">half: <span class="type">Double</span> =&gt; <span class="type">Double</span> = &lt;function1&gt;</div><div class="line"></div><div class="line">scala&gt; half(<span class="number">10</span>)</div><div class="line">res2: <span class="type">Double</span> = <span class="number">5.0</span></div><div class="line"></div><div class="line">scala&gt; mulBy(<span class="number">0.5</span>)(<span class="number">10</span>)</div><div class="line">res3: <span class="type">Double</span> = <span class="number">5.0</span></div></pre></td></tr></table></figure><ol><li>柯里化：具有多个参数的函数转化为一个函数链，每个节点上都是单一函数</li></ol><p>如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x:<span class="type">Int</span>,y:<span class="type">Int</span>) = x + y</div><div class="line">add: (x: <span class="type">Int</span>, y: <span class="type">Int</span>)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x:<span class="type">Int</span>)(y:<span class="type">Int</span>) = x + y</div><div class="line">add: (x: <span class="type">Int</span>)(y: <span class="type">Int</span>)<span class="type">Int</span></div></pre></td></tr></table></figure><p>转化过程如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原始：<span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x:<span class="type">Int</span>,y:<span class="type">Int</span>) = x+y</div><div class="line">闭包：<span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x:<span class="type">Int</span>) = (y:<span class="type">Int</span>) =&gt; x+y</div><div class="line">简写：<span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x:<span class="type">Int</span>)(y:<span class="type">Int</span>) = x+y</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多范式：面相对象，函数式编程（程序实现起来简单）&lt;/p&gt;
&lt;p&gt;举例：wordcount&lt;/p&gt;
&lt;p&gt;sc是SparkContext对象，非常重要！！&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
    
      <category term="Scala" scheme="rabbitluluu.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala进阶--面向对象</title>
    <link href="rabbitluluu.github.io/2019/03/25/Scala%E8%BF%9B%E9%98%B6-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>rabbitluluu.github.io/2019/03/25/Scala进阶-面向对象/</id>
    <published>2019-03-25T02:32:35.000Z</published>
    <updated>2019-03-27T01:43:08.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、面向对象"><a href="#1、面向对象" class="headerlink" title="1、面向对象"></a>1、面向对象</h1><p>概念：</p><ul><li>封装：把属性和操作属性的方法写在一起，定义为class</li><li>继承</li><li>多态</li></ul><p>java中面向对象的概念，适用于scala</p><h1 id="2、定义类"><a href="#2、定义类" class="headerlink" title="2、定义类"></a>2、定义类</h1><p>案例1：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student01</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//定义学生属性</span></div><div class="line">  <span class="keyword">private</span>  <span class="keyword">var</span> stuId:<span class="type">Int</span> = <span class="number">0</span></div><div class="line">  <span class="keyword">private</span>  <span class="keyword">var</span> stuAge:<span class="type">Int</span> = <span class="number">20</span></div><div class="line">  <span class="keyword">private</span>  <span class="keyword">var</span> stuName:<span class="type">String</span> = <span class="string">"Tom"</span></div><div class="line"></div><div class="line">  <span class="comment">//定义方法  set和get方法</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getStuName</span></span>():<span class="type">String</span> = stuName</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setStuName</span></span>(newName:<span class="type">String</span>) = <span class="keyword">this</span>.stuName = newName</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getStuAge</span></span>():<span class="type">Int</span> = stuAge</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setStuAge</span></span>(newAge:<span class="type">Int</span>) = <span class="keyword">this</span>.stuAge = newAge</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 注意:object 和 class  名字可以不一样</div><div class="line">  * 如果一样的话，这个object就叫做class的伴生对象</div><div class="line">  * 伴生对象时，可以直接访问类中的私有属性</div><div class="line">  * */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Student01</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//测试</span></div><div class="line">    <span class="comment">//创建学生独享</span></div><div class="line">    <span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="type">Student01</span></div><div class="line"></div><div class="line">    <span class="comment">//访问属性并输出</span></div><div class="line">    println(s1.getStuName() + <span class="string">"\t"</span> + s1.getStuAge())</div><div class="line"></div><div class="line">    <span class="comment">//访问set方法</span></div><div class="line">    s1.setStuName(<span class="string">"Gakki"</span>)</div><div class="line">    s1.setStuAge(<span class="number">18</span>)</div><div class="line">    println(s1.getStuName() + <span class="string">"\t"</span> + s1.getStuAge())</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">      * 直接访问私有属性</div><div class="line">      * */</div><div class="line">    println(<span class="string">"--------------访问私有属性---------------"</span>)</div><div class="line">    println(s1.stuName + <span class="string">"\t"</span> + s1.stuAge)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>说明：</p><p>为什么可以直接访问私有成员？</p><ol><li>当一个属性是private的时候，scala自动为其生成set和get方法，当进行<code>s1.stuName</code>或者<code>s1.stuAge</code>的时候默认调用了get方法，只不过恰好同名</li><li>如果只希望生成get方法不需要get方法—只需要将其定义为常量<code>val</code>即可</li><li>如果希望属性不能被外部访问  使用<code>private[this]</code>关键字</li></ol><h1 id="3、内部类（嵌套类）"><a href="#3、内部类（嵌套类）" class="headerlink" title="3、内部类（嵌套类）"></a>3、内部类（嵌套类）</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * 定义一个学生类，同时需要保存学生的成绩信息</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student02</span> </span>&#123;</div><div class="line">  <span class="comment">//定义学生的属性</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> stuName: <span class="type">String</span> = <span class="string">"Tom"</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> stuAge: <span class="type">Int</span> = <span class="number">20</span></div><div class="line"></div><div class="line">  <span class="comment">//定义数组保存课程成绩信息</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> courseList = <span class="keyword">new</span> <span class="type">ArrayBuffer</span>[<span class="type">Course</span>]()</div><div class="line"></div><div class="line">  <span class="comment">//定义一个函数，用来添加学生课程成绩</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">addNewCourse</span></span>(cname: <span class="type">String</span>, grade: <span class="type">Int</span>) = &#123;</div><div class="line">    <span class="comment">//创建课程成绩信息</span></div><div class="line">    <span class="keyword">var</span> c = <span class="keyword">new</span> <span class="type">Course</span>(cname, grade)</div><div class="line"></div><div class="line">    <span class="comment">//添加到学生对象中</span></div><div class="line">    courseList += c</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//定义课程类</span></div><div class="line">  <span class="comment">//括号里面写的就是定义的属性</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Course</span>(<span class="params">var courseName: <span class="type">String</span>, var grade: <span class="type">Int</span></span>) </span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Student02</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//创建学生对象</span></div><div class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="type">Student02</span>()</div><div class="line">    s.stuName = <span class="string">"Gakki"</span></div><div class="line">    s.stuAge = <span class="number">21</span></div><div class="line"></div><div class="line">    <span class="comment">//添加课程信息</span></div><div class="line">    s.addNewCourse(<span class="string">"chinese"</span>, <span class="number">70</span>)</div><div class="line">    s.addNewCourse(<span class="string">"Math"</span>, <span class="number">80</span>)</div><div class="line">    s.addNewCourse(<span class="string">"English"</span>, <span class="number">50</span>)</div><div class="line">println(<span class="string">"--------学生信息-------"</span>)</div><div class="line">    println(s.stuName + <span class="string">"\t"</span> + s.stuAge)</div><div class="line">    println(<span class="string">"--------课程信息-------"</span>)</div><div class="line">    <span class="keyword">for</span> (c &lt;- s.courseList) println(c.courseName + <span class="string">"\t"</span> + c.grade)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="4、类的构造器"><a href="#4、类的构造器" class="headerlink" title="4、类的构造器"></a>4、类的构造器</h1><p>主构造器：和类的声明在一起，并且一个类只能有一个主构造器</p><p><code>class Student03(var stuName: String, var age:Int){</code></p><p>辅助构造器：一个类可以有多个辅助构造器，通过this来实现</p><p><code>def this(age:Int){</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student03</span>(<span class="params">var stuName: <span class="type">String</span>, var age:<span class="type">Int</span></span>) </span>&#123;</div><div class="line">  <span class="comment">//定义辅助构造器---实质上就是一个函数，只不过名字叫this</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(age:<span class="type">Int</span>)&#123;</div><div class="line">    <span class="keyword">this</span>(<span class="string">"no name"</span>, age)</div><div class="line">    println(<span class="string">"这是辅助构造器"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Student03</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//使用主构造器创建一个对象--声明的时候按照参数列表给值</span></div><div class="line">    <span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="type">Student03</span>(<span class="string">"Gakki"</span>,<span class="number">20</span>)</div><div class="line">    println(s1.stuName + <span class="string">"\t"</span> + s1.age)</div><div class="line"></div><div class="line">    <span class="comment">//使用辅助构造器--根据给定参数自动推断使用哪一个辅助构造器</span></div><div class="line">    <span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="type">Student03</span>(<span class="number">25</span>)</div><div class="line">    println(s2.stuName + <span class="string">"\t"</span> + s2.age)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="5、object对象：相当于java的static"><a href="#5、object对象：相当于java的static" class="headerlink" title="5、object对象：相当于java的static"></a>5、object对象：相当于java的static</h1><p><strong>总结：</strong></p><ol><li>Object对象中的内容都是<strong>静态</strong></li><li>如果和类名相同，则称为<strong>伴生对象</strong></li><li>scala中没有static关键字</li></ol><p><strong>举例：</strong></p><ol><li><p>使用object来实现单例模式：一个类中只有一个对象</p><p>java中，把类的构造器定义成private，并提供一个getInstance,返回对象</p><p>scala中，使用object来实现</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 实现单例模式</div><div class="line">  **/</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">CreditCard</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//定义一个变量来保存信用卡卡号</span></div><div class="line">  <span class="keyword">private</span> [<span class="keyword">this</span>] <span class="keyword">var</span> creditCardNumber : <span class="type">Long</span> = <span class="number">0</span></div><div class="line"></div><div class="line">  <span class="comment">//定义函数来产生卡号</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generateNum</span></span>() : <span class="type">Long</span> = &#123;</div><div class="line">    creditCardNumber += <span class="number">1</span></div><div class="line">    creditCardNumber</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    println(<span class="type">CreditCard</span>.generateNum())</div><div class="line">    println(<span class="type">CreditCard</span>.generateNum())</div><div class="line">    println(<span class="type">CreditCard</span>.generateNum())</div><div class="line">    println(<span class="type">CreditCard</span>.generateNum())</div><div class="line">    println(<span class="type">CreditCard</span>.generateNum())</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>使用App对象：应用程序对象</p><p>好处：可以省略main方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</div><div class="line">  <span class="comment">//不需要main函数，直接能运行</span></div><div class="line">  println(<span class="string">"hello world"</span>)</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(args.length &gt; <span class="number">0</span>)&#123;</div><div class="line">    println(<span class="string">"有参数"</span>)</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    println(<span class="string">"无参数"</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/*  def main(args: Array[String]): Unit = &#123;</span></div><div class="line">      println("hello world")</div><div class="line">    &#125;*/</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h1 id="6、apply方法"><a href="#6、apply方法" class="headerlink" title="6、apply方法"></a>6、apply方法</h1><p>当使用<code>val t1 = Tuple(&quot;gakki&quot;,20)</code>时，并没有new关键字，实质为调用<strong>apply方法</strong>创建对象</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student04</span>(<span class="params">var stuName:<span class="type">String</span></span>)</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 定义student04的apply方法</div><div class="line">  * */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Student04</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(name:<span class="type">String</span>) = &#123;</div><div class="line">    println(<span class="string">"调用apply方法"</span>)</div><div class="line">    <span class="keyword">new</span> <span class="type">Student04</span>(name)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//通过主构造器来创建学生对象</span></div><div class="line">    <span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="type">Student04</span>(<span class="string">"Jojo"</span>)</div><div class="line">    println(s1.stuName)</div><div class="line"></div><div class="line">    <span class="comment">//通过apply方法创建学生对象，省略new</span></div><div class="line">    <span class="keyword">var</span> s2 = <span class="type">Student04</span>(<span class="string">"Gakki"</span>)</div><div class="line">    println(s2.stuName)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><font color="red"><strong>注意：apply方法必须写在伴生对象中，也就是object中</strong></font><h1 id="7、继承"><a href="#7、继承" class="headerlink" title="7、继承"></a>7、继承</h1><ol><li><p>使用<code>extends</code>关键字，和java类似</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02_my</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 定义父类和子类实现继承和重写</div><div class="line">  */</div><div class="line"></div><div class="line"><span class="comment">//定义父类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">val name: <span class="type">String</span>, val age: <span class="type">Int</span></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//定义函数</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span></span>(): <span class="type">String</span> = <span class="string">"Hello "</span> + name + <span class="string">" and the age is "</span> + age</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义子类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>(<span class="params">override val name: <span class="type">String</span>, override val age: <span class="type">Int</span>, val salary: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="comment">//重写父类方法</span></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span></span>(): <span class="type">String</span> = <span class="string">"子类中的sayHello"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ExtendsTest</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</div><div class="line">  <span class="comment">//定义父类对象</span></div><div class="line">  <span class="keyword">val</span> p1 : <span class="type">Person</span>= <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"Gakki"</span>,<span class="number">20</span>)</div><div class="line">  println(p1.name + <span class="string">"\t"</span> +p1.age)</div><div class="line">  println(p1.sayHello())</div><div class="line"></div><div class="line">  <span class="comment">//定义一个子类对象</span></div><div class="line">  <span class="keyword">val</span> p2 :<span class="type">Person</span> = <span class="keyword">new</span> <span class="type">Employee</span>(<span class="string">"Jojo"</span>,<span class="number">25</span>,<span class="number">1000</span>)</div><div class="line">  println(p2.sayHello())</div><div class="line"></div><div class="line">  <span class="comment">//匿名子类</span></div><div class="line">  <span class="keyword">val</span> p3 :<span class="type">Person</span> = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"Mary"</span>, <span class="number">23</span>)&#123;</div><div class="line">    <span class="comment">//匿名子类中重写sayhello方法</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span></span>(): <span class="type">String</span> = <span class="string">"匿名子类中重写sayhello方法"</span></div><div class="line">  &#125;</div><div class="line">  println(p3.sayHello())</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>抽象类和抽象字段</p><p>抽象类：只能用于继承的类，可以包含抽象方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"><span class="comment">//定义父类:交通工具</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span></span>&#123;</div><div class="line">  <span class="comment">//抽象方法</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">checkType</span></span>() : <span class="type">String</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//定义子类1：自行车</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span></span>&#123;</div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">checkType</span></span>(): <span class="type">String</span> = <span class="string">"I am a car"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义子类2：汽车</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bike</span> <span class="keyword">extends</span> <span class="title">Vehicle</span></span>&#123;</div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">checkType</span></span>(): <span class="type">String</span> = <span class="string">"I am a Bike"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo2</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">var</span> v1 : <span class="type">Vehicle</span> = <span class="keyword">new</span> <span class="type">Car</span></div><div class="line">    println(v1.checkType())</div><div class="line"></div><div class="line">    <span class="keyword">var</span> v2 : <span class="type">Vehicle</span> = <span class="keyword">new</span> <span class="type">Bike</span></div><div class="line">    println(v2.checkType())</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>抽象字段：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day02</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *抽象字段</div><div class="line">  * 定义：没有初始值的字段</div><div class="line">  */</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person1</span></span>&#123;</div><div class="line">  <span class="comment">//定义抽象字段</span></div><div class="line">  <span class="keyword">var</span> id : <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> name : <span class="type">String</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//方法1：如果不加abstract会报错</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee1</span> <span class="keyword">extends</span> <span class="title">Person1</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//方法2：如果不加abstract，可以将抽象字段放在主构造器中</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee2</span>(<span class="params">var id:<span class="type">Int</span>, var name:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Person1</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//方法3：也可以给抽象字段初始值</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee3</span> <span class="keyword">extends</span> <span class="title">Person1</span></span>&#123;</div><div class="line">  <span class="keyword">var</span> id : <span class="type">Int</span> = <span class="number">0</span></div><div class="line">  <span class="keyword">var</span> name : <span class="type">String</span> = <span class="string">""</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo3</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h1 id="8、特质：trait"><a href="#8、特质：trait" class="headerlink" title="8、特质：trait"></a>8、特质：trait</h1><p>本质：scala的一个<strong>抽象类</strong>,作用是用来多重继承</p><p>继承的时候使用with关键字，需要重写抽象方法和给抽象字段赋值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> day03</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * trait:可以实现多重继承</div><div class="line">  *</div><div class="line">  * 定义两个父类,两个trait</div><div class="line">  * 父类：人  动作</div><div class="line">  * 子类：学生</div><div class="line">  */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Human</span> </span>&#123;</div><div class="line">  <span class="comment">//抽象字段</span></div><div class="line">  <span class="keyword">val</span> id: <span class="type">Int</span></div><div class="line">  <span class="keyword">val</span> name: <span class="type">String</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Action</span></span>&#123;</div><div class="line">  <span class="comment">//抽象方法</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getActionName</span></span>():<span class="type">String</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 使用trait实现了多重继承</div><div class="line">* */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1</span>(<span class="params">val id:<span class="type">Int</span>,val name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Human</span> <span class="keyword">with</span> <span class="title">Action</span> </span>&#123;</div><div class="line">    <span class="comment">//抽象字段写入到主构造器，重写抽象方法</span></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getActionName</span></span>(): <span class="type">String</span> = <span class="string">"Action is running"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo01</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">//创建学生对象</span></div><div class="line">    <span class="keyword">val</span> s1 = <span class="keyword">new</span> <span class="type">Student1</span>(<span class="number">1011</span>, <span class="string">"Gakki"</span>)</div><div class="line">    println(s1.id + <span class="string">"\t"</span> + s1.name)</div><div class="line">    println(s1.getActionName())</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="9、包和包对象"><a href="#9、包和包对象" class="headerlink" title="9、包和包对象"></a>9、包和包对象</h1><p><strong>包</strong>：package，Scala中依然使用<strong>import</strong>作为引用包的关键字，引入包时下划线<code>_</code>和java中的<code>*</code>同义，并且import可以写在任意地方</p><p>​    包可以包含类、对象和特质，但不能包含函数或者变量的定义。很不幸，这是Java虚拟机的局限。</p><p>把工具函数或者常量添加到包而不是某个Utils对象，这是更加合理的做法。Scala中，包对象的出现正是为了解决这个局限。</p><p><strong>包对象</strong>：可以包含常量，变量，方法，类，对象，trait（特质）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、面向对象&quot;&gt;&lt;a href=&quot;#1、面向对象&quot; class=&quot;headerlink&quot; title=&quot;1、面向对象&quot;&gt;&lt;/a&gt;1、面向对象&lt;/h1&gt;&lt;p&gt;概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装：把属性和操作属性的方法写在一起，定义为class&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="Scala" scheme="rabbitluluu.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>初识Scala</title>
    <link href="rabbitluluu.github.io/2019/03/25/%E5%88%9D%E8%AF%86Scala/"/>
    <id>rabbitluluu.github.io/2019/03/25/初识Scala/</id>
    <published>2019-03-25T02:32:10.000Z</published>
    <updated>2019-03-25T07:04:55.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、数据类型和变量常量"><a href="#1、数据类型和变量常量" class="headerlink" title="1、数据类型和变量常量"></a>1、数据类型和变量常量</h1><ol><li><p>scala中所有的数据都是对象，如在java中1是int类型，scala中1是一个对象，有自己的方法</p></li><li><p>基本数据类型</p><p>Byte    8位有符号数字<br>Short    16位有符号数字<br>Int    …<br>Long<br>Float<br>Double         </p><p>字符串类型<br>String<br>字符<br>Char</p></li></ol><p>插值操作：</p><p>​    <code>var s1:String = &quot;hello&quot;</code></p><p>​    <code>s&quot;my name is ${s1}&quot;</code></p><p>加一个小s可以实现插值</p><ol><li><p>变量var和常量val</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; val s2 :String = &quot;Hello all&quot;</div><div class="line">s2: String = Hello all</div><div class="line">scala&gt; s2 = &quot;Hello everyone&quot;</div><div class="line">&lt;console&gt;:12: error: reassignment to val</div><div class="line">s2 = &quot;Hello everyone&quot;</div></pre></td></tr></table></figure></li><li><p>Unit类型和Nothing类型</p><p><strong>Unit</strong>：</p><p>Unit类型，就是java中的void，没有返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; val f = ()</div><div class="line">f: Unit = ()</div></pre></td></tr></table></figure><p>返回值 Unit类型</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">() 代表了一个函数，这个函数没有返回值</div></pre></td></tr></table></figure><p>   <strong>Nothing</strong>：</p><p>   Nothing类型，在执行过程中，产生了异常Exception</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; def myFun = throw new Exception(&quot;Some Error&quot;)</div><div class="line">myFun: Nothing</div></pre></td></tr></table></figure><h1 id="2、函数–头等公民"><a href="#2、函数–头等公民" class="headerlink" title="2、函数–头等公民"></a>2、函数–头等公民</h1><h2 id="2-1、scala内置函数"><a href="#2-1、scala内置函数" class="headerlink" title="2.1、scala内置函数"></a>2.1、scala内置函数</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">scala&gt; max(<span class="number">1</span>,<span class="number">5</span>)</div><div class="line">&lt;console&gt;:<span class="number">12</span>: error: not found: value max</div><div class="line">       max(<span class="number">1</span>,<span class="number">5</span>)</div><div class="line">       ^</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">import</span> scala.math._</div><div class="line"><span class="keyword">import</span> scala.math._</div><div class="line"></div><div class="line">scala&gt; max(<span class="number">1</span>,<span class="number">5</span>)</div><div class="line">res1: <span class="type">Int</span> = <span class="number">5</span></div></pre></td></tr></table></figure><p><strong>_ 就相当于java中的 * 代表包内所有东西</strong></p><p><strong>定义了一个变量 res1 ，接收了 max 函数的返回值。scala中支持类型的推导。</strong></p><h2 id="2-2、scala自定义函数"><a href="#2-2、scala自定义函数" class="headerlink" title="2.2、scala自定义函数"></a>2.2、scala自定义函数</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def 函数名称（[参数名称：参数类型]*） : 返回值类型 = &#123;</div><div class="line">函数的实现</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li><p>返回值类型可不写，scala支持类型推导</p></li><li><p>参数可以有多个</p></li><li><p>函数主体只有一行时，可以省略大括号</p></li></ol><p>案例1：</p><p>需求：求两int整数和</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(x:<span class="type">Int</span>, y:<span class="type">Int</span>):<span class="type">Int</span>=x+y</div><div class="line">sum: (x: <span class="type">Int</span>, y: <span class="type">Int</span>)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; sum(<span class="number">1</span>,<span class="number">5</span>)</div></pre></td></tr></table></figure><p>案例2：</p><p>需求：求x的阶乘</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">factorial</span></span>(x:<span class="type">Int</span>):<span class="type">Int</span>=&#123;</div><div class="line">     | <span class="keyword">if</span>(x &lt;=<span class="number">1</span> ) <span class="number">1</span></div><div class="line">     | <span class="keyword">else</span></div><div class="line">     | x * factorial(x - <span class="number">1</span>)</div><div class="line">     | &#125;</div><div class="line">factorial: (x: <span class="type">Int</span>)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; factorial(<span class="number">5</span>)</div><div class="line">res3: <span class="type">Int</span> = <span class="number">120</span></div></pre></td></tr></table></figure><font color="red">没有return，函数的最后一行就是返回值</font><p>案例3：</p><p>需求：求输入的年份是否是闰年</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">isLeapYear</span></span>(year : <span class="type">Int</span>)=&#123;</div><div class="line">     | <span class="keyword">if</span>((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">0</span>)) <span class="literal">true</span></div><div class="line">     | <span class="keyword">else</span> <span class="literal">false</span></div><div class="line">     | &#125;</div><div class="line">isLeapYear: (year: <span class="type">Int</span>)<span class="type">Boolean</span></div><div class="line"></div><div class="line">scala&gt; isLeapYear(<span class="number">2015</span>)</div><div class="line">res5: <span class="type">Boolean</span> = <span class="literal">false</span></div><div class="line"></div><div class="line">scala&gt; isLeapYear(<span class="number">2016</span>)</div><div class="line">res6: <span class="type">Boolean</span> = <span class="literal">true</span></div></pre></td></tr></table></figure><font color="red">可以不写返回值类型，支持类型推导</font><h1 id="3、循环语句"><a href="#3、循环语句" class="headerlink" title="3、循环语句"></a>3、循环语句</h1><ol><li>类似于java的用法，while、dowhile、for</li><li>foreach循环（spark算子）</li></ol><h2 id="3-1、for循环"><a href="#3-1、for循环" class="headerlink" title="3.1、for循环"></a>3.1、for循环</h2><p>提前创建list：</p><p><code>var list = List(&quot;Jojo&quot;, &quot;Sean&quot;, &quot;Gakki&quot;)</code></p><p><strong>法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">println(&quot;--------------for循环:法1----------------&quot;)</div><div class="line">for(s &lt;- list) println(s)</div></pre></td></tr></table></figure><p><strong>&lt;-    :scala中的提取符</strong></p><p><strong>法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">println(&quot;--------------for循环:法2----------------&quot;)</div><div class="line">for&#123;</div><div class="line">   s &lt;- list</div><div class="line">   if(s.length &gt; 3)</div><div class="line">&#125;println(s)</div></pre></td></tr></table></figure><p><strong>法3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">println(&quot;--------------for循环:法3----------------&quot;)</div><div class="line">    for (s &lt;- list if s.length &lt;= 4) println(s)</div></pre></td></tr></table></figure><p>对于第二种的进一步精简</p><p><strong>法4：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"--------------for循环:法3----------------"</span>)</div><div class="line">    <span class="comment">/*</span></div><div class="line">    * 1.把list中所有元素都变成大写</div><div class="line">    * 2.返回一个新的集合</div><div class="line">    * */</div><div class="line">    <span class="keyword">var</span> newList = <span class="keyword">for</span>&#123;</div><div class="line">      s &lt;- list</div><div class="line">      <span class="comment">//变成大写</span></div><div class="line">      s1 = s.toUpperCase</div><div class="line">      <span class="comment">//返回新集合</span></div><div class="line">    &#125;<span class="keyword">yield</span> (s1)</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(s &lt;- newList) println(s)</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h2 id="3-2、while循环"><a href="#3-2、while循环" class="headerlink" title="3.2、while循环"></a>3.2、while循环</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"--------------while循环----------------"</span>)</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> (i &lt; list.length)&#123;</div><div class="line">      println(list(i))</div><div class="line">      <span class="comment">//scala中没有自增i++</span></div><div class="line">      i += <span class="number">1</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="3-3、dowhile循环"><a href="#3-3、dowhile循环" class="headerlink" title="3.3、dowhile循环"></a>3.3、dowhile循环</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"--------------dowhile循环----------------"</span>)</div><div class="line">    <span class="keyword">var</span> j = <span class="number">0</span></div><div class="line">    do&#123;</div><div class="line">      println(list(j))</div><div class="line">      j += <span class="number">1</span></div><div class="line">    &#125;<span class="keyword">while</span>(j &lt; list.length)</div></pre></td></tr></table></figure><h2 id="3-4、foreach循环"><a href="#3-4、foreach循环" class="headerlink" title="3.4、foreach循环"></a>3.4、foreach循环</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"--------------for each循环----------------"</span>)</div><div class="line">   <span class="comment">/*</span></div><div class="line">   * scala和spark都会用for each循环</div><div class="line">   * 该循环没有返回值，但是map有返回值</div><div class="line">   * foreach是list的一个方法</div><div class="line">   * */</div><div class="line">   list.foreach(println)</div></pre></td></tr></table></figure><p>说明：foreach()参数也得是一个函数，如上的println</p><h2 id="3-4、循环案例"><a href="#3-4、循环案例" class="headerlink" title="3.4、循环案例"></a>3.4、循环案例</h2><h3 id="3-4-1、判断素数"><a href="#3-4-1、判断素数" class="headerlink" title="3.4.1、判断素数"></a>3.4.1、判断素数</h3><p>需求：判断101~200之间有多少素数</p><p>思路：当2~开根号的数都不能呗整除的时候，就是素数</p><p>代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"--------------案例一----------------"</span>)</div><div class="line">    <span class="keyword">var</span> count: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> index_outer = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> index_inner = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (index_outer &lt;- <span class="number">101</span> until <span class="number">200</span>) &#123;</div><div class="line"></div><div class="line">      <span class="keyword">var</span> temp = <span class="literal">false</span> <span class="comment">//标识是否能被整除</span></div><div class="line">      index_inner = <span class="number">2</span></div><div class="line"></div><div class="line">      breakable &#123;</div><div class="line">        <span class="keyword">while</span> (index_inner &lt;= sqrt(index_outer)) &#123;</div><div class="line">          <span class="keyword">if</span> (index_outer % index_inner == <span class="number">0</span>) &#123;</div><div class="line">            temp = <span class="literal">true</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">          &#125;</div><div class="line">          index_inner += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (!temp) count += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    println(<span class="string">"count:"</span> + count)</div></pre></td></tr></table></figure><h3 id="3-4-2、实现冒泡排序"><a href="#3-4-2、实现冒泡排序" class="headerlink" title="3.4.2、实现冒泡排序"></a>3.4.2、实现冒泡排序</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"--------------案例二----------------"</span>)</div><div class="line">    <span class="keyword">var</span> arry = <span class="type">Array</span>(<span class="number">4</span>, <span class="number">8</span>, <span class="number">21</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">24</span>, <span class="number">12</span>, <span class="number">3</span>)</div><div class="line">    </div><div class="line">    println(<span class="string">"--------------排序前----------------"</span>)</div><div class="line">    arry.foreach(println)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until arry.length) &#123;</div><div class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">0</span> until arry.length - i - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (arry(j) &gt; arry(j+<span class="number">1</span>)) &#123;</div><div class="line">          <span class="comment">//执行交换</span></div><div class="line">          <span class="keyword">var</span> temp = arry(j)</div><div class="line">          arry(j) = arry(j+<span class="number">1</span>)</div><div class="line">          arry(j+<span class="number">1</span>) = temp</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    println(<span class="string">"--------------排序后----------------"</span>)</div><div class="line">    arry.foreach(println)</div></pre></td></tr></table></figure><h1 id="4、scala的函数参数"><a href="#4、scala的函数参数" class="headerlink" title="4、scala的函数参数"></a>4、scala的函数参数</h1><h2 id="4-1、函数参数的求值策略"><a href="#4-1、函数参数的求值策略" class="headerlink" title="4.1、函数参数的求值策略"></a>4.1、函数参数的求值策略</h2><p>call by name      <code>:</code></p><p>对函数的实参求值</p><p>call by value       <code>: =&gt;</code></p><p>函数实参在函数内部用到的时候，才会被求值</p><p><strong>例1：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">test1</span></span>(x:<span class="type">Int</span>,y:<span class="type">Int</span>) = x + x</div><div class="line">test1: (x: <span class="type">Int</span>, y: <span class="type">Int</span>)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">test2</span></span>(x: =&gt; <span class="type">Int</span>,y: =&gt;<span class="type">Int</span>) = x + x</div><div class="line">test2: (x: =&gt; <span class="type">Int</span>, y: =&gt; <span class="type">Int</span>)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; test1(<span class="number">3</span>+<span class="number">4</span>,<span class="number">8</span>)</div><div class="line">res8: <span class="type">Int</span> = <span class="number">14</span></div><div class="line"></div><div class="line">scala&gt; test2(<span class="number">3</span>+<span class="number">4</span>,<span class="number">8</span>)</div><div class="line">res9: <span class="type">Int</span> = <span class="number">14</span></div></pre></td></tr></table></figure><p>解析：</p><p>test1使用的call by value，test2使用的call by name</p><p>运行结果一样，但是过程却不同</p><p>test1     —&gt;     test1(3+4,8)      —&gt;     test1(7,8)      —&gt;     7+7     —&gt;     14<br>test2     —&gt;     test2(3+4,8)      —&gt;     (3+4) + (3+4)      —&gt;     14</p><p><strong>例2：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">bar</span></span>(x:<span class="type">Int</span>,y : =&gt; <span class="type">Int</span>) : <span class="type">Int</span> = <span class="number">1</span></div><div class="line">bar: (x: <span class="type">Int</span>, y: =&gt; <span class="type">Int</span>)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">loop</span></span>() : <span class="type">Int</span> = loop</div><div class="line">loop: ()<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; bar(<span class="number">1</span>,loop)</div><div class="line">res11: <span class="type">Int</span> = <span class="number">1</span></div><div class="line"></div><div class="line">scala&gt; bar(loop,<span class="number">1</span>)</div><div class="line">程序卡死</div></pre></td></tr></table></figure><p>解析：</p><p>bar函数中，x使用的call by value，y使用的是call by name</p><ol><li>虽然 y 是 name, 每次调用的时候会被求值。但是，函数体内，没有调用到y，故不会产生死循环</li><li>x 是 value，对函数参数求值，并且只求一次。虽然后面没有用到x，但求值时产生了死循环。</li></ol><h2 id="4-2、scala函数参数的类型"><a href="#4-2、scala函数参数的类型" class="headerlink" title="4.2、scala函数参数的类型"></a>4.2、scala函数参数的类型</h2><ol><li><p>默认参数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">fun1</span></span>(x:<span class="type">String</span> = <span class="string">"Gakki"</span>) = x + <span class="string">" is a beautiful girl"</span></div><div class="line">fun1: (x: <span class="type">String</span>)<span class="type">String</span></div><div class="line"></div><div class="line">scala&gt; fun1()</div><div class="line">res4: <span class="type">String</span> = <span class="type">Gakki</span> is a beautiful girl</div><div class="line"></div><div class="line">scala&gt; fun1(<span class="string">"Sean"</span>)</div><div class="line">res5: <span class="type">String</span> = <span class="type">Sean</span> is a beautiful girl</div></pre></td></tr></table></figure><p>给变量一个默认值，在调用的时候空参，会调用默认值</p></li><li><p>代名参数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">fun2</span></span>(name:<span class="type">String</span> = <span class="string">"Gakki"</span>, age:<span class="type">Int</span> = <span class="number">20</span>) = <span class="string">"name is:"</span> + name + <span class="string">",age is:"</span> + age</div><div class="line">fun2: (name: <span class="type">String</span>, age: <span class="type">Int</span>)<span class="type">String</span></div><div class="line"></div><div class="line">scala&gt; fun2()</div><div class="line">res0: <span class="type">String</span> = name is:<span class="type">Gakki</span>,age is:<span class="number">20</span></div><div class="line"></div><div class="line">scala&gt; fun2(age = <span class="number">18</span>)</div><div class="line">res1: <span class="type">String</span> = name is:<span class="type">Gakki</span>,age is:<span class="number">18</span></div></pre></td></tr></table></figure><p>指定更改某个参数的值，没有被指定的参数继续使用默认值</p></li><li><p>可变参数</p><p>类似于java中的可变长参数…</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(args:<span class="type">Int</span>*)=&#123;</div><div class="line">     | <span class="keyword">var</span> result = <span class="number">0</span></div><div class="line">     | <span class="keyword">for</span>(s &lt;- args) result += s</div><div class="line">     | result</div><div class="line">     | &#125;</div><div class="line">sum: (args: <span class="type">Int</span>*)<span class="type">Int</span></div><div class="line"></div><div class="line">scala&gt; sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>)</div><div class="line">res2: <span class="type">Int</span> = <span class="number">45</span></div></pre></td></tr></table></figure></li></ol><h1 id="5、懒值（lazy）"><a href="#5、懒值（lazy）" class="headerlink" title="5、懒值（lazy）"></a>5、懒值（lazy）</h1><p>铺垫：spark的核心是RDD（数据集合），操作数据集合的数据，使用算子来操作RDD（函数、方法）</p><p>算子：</p><p>​    Transformation：延时加载，不会触发计算</p><p>​    Action：会立刻触发计算</p><p>懒值定义：常量如果是lazy的，他的初始化会被延迟，推迟到第一次使用该常量时</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> x:<span class="type">Int</span> = <span class="number">10</span></div><div class="line">x: <span class="type">Int</span> = <span class="number">10</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> y:<span class="type">Int</span> = x+<span class="number">1</span></div><div class="line">y: <span class="type">Int</span> = <span class="number">11</span>         <span class="comment">//定义后会立即进行计算</span></div><div class="line"></div><div class="line">scala&gt; <span class="keyword">lazy</span> <span class="keyword">val</span> z:<span class="type">Int</span> = x+<span class="number">1</span></div><div class="line">z: <span class="type">Int</span> = &lt;<span class="keyword">lazy</span>&gt;<span class="comment">//z的初始化会被延迟</span></div><div class="line"></div><div class="line">scala&gt; z</div><div class="line">res0: <span class="type">Int</span> = <span class="number">11</span>      <span class="comment">//此处才进行了计算</span></div></pre></td></tr></table></figure><p>在读文件时，加上lazy即便有错误也不会进行上报，初始化被延迟，只有在调用的时候才会报出</p><h1 id="6、例外：Exception"><a href="#6、例外：Exception" class="headerlink" title="6、例外：Exception"></a>6、例外：Exception</h1><p>情况1：</p><p>采用try catch finaly来捕获异常和处理异常</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo2</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">      * 1.采用try catch finaly来捕获异常和处理异常</div><div class="line">      **/</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">//try代码块里面写可能出现异常的函数</span></div><div class="line">      <span class="keyword">var</span> words = scala.io.<span class="type">Source</span>.fromFile(<span class="string">"H:\\stu.txt"</span>).mkString</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">      <span class="keyword">case</span> ex: <span class="type">FileNotFoundException</span> =&gt;</div><div class="line">        println(<span class="string">"File Not Found Exception"</span>)</div><div class="line"></div><div class="line">      <span class="keyword">case</span> ex: <span class="type">IllegalArgumentException</span> =&gt;</div><div class="line">        println(<span class="string">"Illegal Argument Exception"</span>)</div><div class="line"></div><div class="line">      <span class="keyword">case</span> _: <span class="type">Exception</span> =&gt; &#123;</div><div class="line">        println(<span class="string">"This is an Exception"</span>)</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      println(<span class="string">"this is finally"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>没有异常的时候，会执行finally中的内容</p><p>有异常的时候会处理对应的异常，并最终执行finally</p><p>情况2：</p><p>函数返回类型为nothing时，代表运行过程中产生了异常</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">demo</span></span>() = <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Exception</span>(<span class="string">"exception"</span>)</div><div class="line">demo: ()<span class="type">Nothing</span></div></pre></td></tr></table></figure><h1 id="7、数组"><a href="#7、数组" class="headerlink" title="7、数组"></a>7、数组</h1><h2 id="7-1、一维数组"><a href="#7-1、一维数组" class="headerlink" title="7.1、一维数组"></a>7.1、一维数组</h2><h3 id="7-1-1、数组类型"><a href="#7-1-1、数组类型" class="headerlink" title="7.1.1、数组类型"></a>7.1.1、数组类型</h3><ol><li>定长数组：Array</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//法1：</span></div><div class="line"><span class="keyword">val</span> a = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">String</span>](<span class="number">10</span>)</div><div class="line"><span class="comment">//法2：</span></div><div class="line"><span class="keyword">val</span> c:<span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(<span class="string">"Tom"</span>,<span class="string">"Gakki"</span>)</div><div class="line"><span class="comment">//不同添加不同类型的元素，如下是不被允许的</span></div><div class="line"><span class="comment">//var c:Array[String] = Array("Tom","Gakki",1)</span></div></pre></td></tr></table></figure><ol><li>变长数组</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引入</span></div><div class="line"><span class="keyword">import</span> scala.collection.mutable._</div><div class="line"><span class="comment">//声明</span></div><div class="line"><span class="keyword">val</span> d = <span class="type">ArrayBuffer</span>[<span class="type">Int</span>]()</div></pre></td></tr></table></figure><h3 id="7-1-2、数组操作"><a href="#7-1-2、数组操作" class="headerlink" title="7.1.2、数组操作"></a>7.1.2、数组操作</h3><p>添加元素：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; d += <span class="number">1</span></div><div class="line">res2: d.<span class="keyword">type</span> = <span class="type">ArrayBuffer</span>(<span class="number">1</span>)</div><div class="line"></div><div class="line">scala&gt; d += (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div><div class="line">res3: d.<span class="keyword">type</span> = <span class="type">ArrayBuffer</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div></pre></td></tr></table></figure><p>去除最后俩元素：<code>d.trimEnd(2)</code></p><ol><li><p>数组的<strong>遍历</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">for</span>(s &lt;- a)println(s)</div><div class="line">tom</div><div class="line">gakki</div><div class="line">jojo</div><div class="line"></div><div class="line">scala&gt; a.foreach(println)</div><div class="line">tom</div><div class="line">gakki</div><div class="line">jojo</div></pre></td></tr></table></figure></li><li><p>数值操作</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> myarray = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">5</span>)</div><div class="line">myarray: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">5</span>)</div><div class="line"></div><div class="line">scala&gt; myarray.max</div><div class="line">res11: <span class="type">Int</span> = <span class="number">10</span></div><div class="line"></div><div class="line">scala&gt; myarray.min</div><div class="line">res12: <span class="type">Int</span> = <span class="number">1</span></div><div class="line"></div><div class="line">scala&gt; myarray.sortWith(_&gt;_)</div><div class="line">res13: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)</div><div class="line"></div><div class="line">scala&gt; myarray.sortWith(_&lt;_)</div><div class="line">res14: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>)</div></pre></td></tr></table></figure><p>解释：<code>(_&gt;_)</code>是一个函数，传入两个参数，返回值是布尔型</p><p>完整：sortWith函数里面，参数也是一个函数–》高阶函数</p><p><code>(_&gt;_)</code>完整的情况：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span></span>(a:<span class="type">Int</span>, b:<span class="type">Int</span>) = &#123;<span class="keyword">if</span>(a&gt;b) <span class="literal">true</span> <span class="keyword">else</span> <span class="literal">false</span>&#125;</div><div class="line">(a,b) =&gt; &#123;<span class="keyword">if</span>(a&gt;b) <span class="literal">true</span> <span class="keyword">else</span> <span class="literal">false</span>&#125;</div><div class="line">(a,b) =&gt; &#123;<span class="keyword">if</span>(a&gt;b) <span class="literal">true</span> <span class="keyword">else</span> <span class="literal">false</span>&#125;    简化为：    _&gt;_</div></pre></td></tr></table></figure></li></ol><h2 id="7-2、多维数组"><a href="#7-2、多维数组" class="headerlink" title="7.2、多维数组"></a>7.2、多维数组</h2><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义一个3行4列的数组</span></div><div class="line">scala&gt; <span class="keyword">var</span> matrix = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">matrix: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</div></pre></td></tr></table></figure><p>修改值：<code>matrix(1)(2) = 10</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">res16: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</div></pre></td></tr></table></figure><p>例子：定义一个二维数组，其中每个元素是一个一维数组，并且长度不固定</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> triangle = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]](<span class="number">10</span>)</div><div class="line">triangle: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>)</div></pre></td></tr></table></figure><p>初始化：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">for</span>(i &lt;- <span class="number">0</span> until triangle.length)&#123;</div><div class="line">     | triangle(i) = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](i+<span class="number">1</span>)</div><div class="line">     | &#125;</div><div class="line"></div><div class="line">scala&gt; triangle</div><div class="line">res18: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(<span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</div></pre></td></tr></table></figure><p>二维数组如果使用上面方法声明时</p><ul><li>首先制定外层数组的长度</li><li>初始化内存数组时，在指定内层数组的长度</li></ul><h1 id="8、映射-Map"><a href="#8、映射-Map" class="headerlink" title="8、映射 Map"></a>8、映射<key,value> Map</key,value></h1><p>举例：</p><p>​    创建map保存学生成绩</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> scores = <span class="type">Map</span>(<span class="string">"Gakki"</span> -&gt; <span class="number">80</span>,<span class="string">"Jojo"</span> -&gt; <span class="number">90</span>)</div><div class="line">scores: scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="type">Jojo</span> -&gt; <span class="number">90</span>, <span class="type">Gakki</span> -&gt; <span class="number">80</span>)</div></pre></td></tr></table></figure><p>解释：</p><ul><li><p>Map[String,Int]       自动推导出类型：key  String    value Int</p></li><li><p>scala.collection.mutable   scala总映射有两种，一种可变map。一种不可变</p><p>scala.collection.mutable    ====》 可变</p><p>scala.collection.immutable    ====》 不可变</p><p><code>val scores = scala.collection.immutable.Map(&quot;Gakki&quot; -&gt; 80,&quot;Jojo&quot; -&gt; 90)</code></p></li></ul><ol><li><p>初始化映射:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> scores2 = <span class="type">Map</span>((<span class="string">"Gakki"</span>,<span class="number">50</span>),(<span class="string">"Jojo"</span>,<span class="number">90</span>))</div><div class="line">scala&gt; <span class="keyword">val</span> scores = <span class="type">Map</span>(<span class="string">"Gakki"</span> -&gt; <span class="number">80</span>,<span class="string">"Jojo"</span> -&gt; <span class="number">90</span>)</div></pre></td></tr></table></figure></li><li><p>映射操作：</p><ol><li>取值：</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">scala&gt; scores(<span class="string">"Jojo"</span>)</div><div class="line">res19: <span class="type">Int</span> = <span class="number">90</span></div><div class="line"></div><div class="line">scala&gt; scores.get(<span class="string">"Jojo"</span>)</div><div class="line">res20: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">Some</span>(<span class="number">90</span>)</div><div class="line"></div><div class="line">scala&gt; scores.get(<span class="string">"Jojoo"</span>)</div><div class="line">res21: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">None</span></div><div class="line"></div><div class="line">scala&gt; scores(<span class="string">"Jojoo"</span>)</div><div class="line">java.util.<span class="type">NoSuchElementException</span>: key not found: <span class="type">Jojoo</span></div><div class="line">  at scala.collection.<span class="type">MapLike</span>$<span class="class"><span class="keyword">class</span>.<span class="title">default</span>(<span class="params"><span class="type">MapLike</span>.scala:228</span>)</span></div><div class="line">  at scala.collection.<span class="type">AbstractMap</span>.<span class="keyword">default</span>(<span class="type">Map</span>.scala:<span class="number">59</span>)</div><div class="line">  at scala.collection.mutable.<span class="type">HashMap</span>.apply(<span class="type">HashMap</span>.scala:<span class="number">65</span>)</div><div class="line">  ... <span class="number">32</span> elided</div></pre></td></tr></table></figure><p>需求：判断key是否存在，若不存在，返回默认值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">if</span>(scores.contains(<span class="string">"sean"</span>))&#123;</div><div class="line">     | scores(<span class="string">"sean"</span>)</div><div class="line">     | &#125;<span class="keyword">else</span>&#123;</div><div class="line">     | <span class="number">-1</span>&#125;</div><div class="line">res10: <span class="type">Int</span> = <span class="number">-1</span></div><div class="line">     </div><div class="line"><span class="comment">//法2</span></div><div class="line">scala&gt; scores.getOrElse(<span class="string">"sean"</span>,<span class="number">-1</span>)</div></pre></td></tr></table></figure><ol><li><p>更新：</p><p>必须是可变映射才能更新数值</p></li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scala&gt; scores(<span class="string">"Gakki"</span>) = <span class="number">99</span></div><div class="line"></div><div class="line">scala&gt; scores</div><div class="line">res25: scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="type">Jojo</span> -&gt; <span class="number">90</span>, <span class="type">Gakki</span> -&gt; <span class="number">99</span>)</div></pre></td></tr></table></figure><ol><li>映射迭代</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">for</span>(s &lt;- scores) println(s)</div><div class="line">(<span class="type">Jojo</span>,<span class="number">90</span>)</div><div class="line">(<span class="type">Gakki</span>,<span class="number">99</span>)</div><div class="line"></div><div class="line">scala&gt; scores.foreach(println)</div><div class="line">(<span class="type">Jojo</span>,<span class="number">90</span>)</div><div class="line">(<span class="type">Gakki</span>,<span class="number">99</span>)</div></pre></td></tr></table></figure></li></ol><h1 id="9、元组：Tuple"><a href="#9、元组：Tuple" class="headerlink" title="9、元组：Tuple"></a>9、元组：Tuple</h1><p>定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> t1 = <span class="type">Tuple3</span>(<span class="string">"Tom"</span>,<span class="string">"gakki"</span>,<span class="number">1</span>)</div><div class="line">t1: (<span class="type">String</span>, <span class="type">String</span>, <span class="type">Int</span>) = (<span class="type">Tom</span>,gakki,<span class="number">1</span>)</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">val</span> t2 = (<span class="string">"Tom"</span>,<span class="string">"gakki"</span>,<span class="number">1</span>)</div><div class="line">t2: (<span class="type">String</span>, <span class="type">String</span>, <span class="type">Int</span>) = (<span class="type">Tom</span>,gakki,<span class="number">1</span>)</div></pre></td></tr></table></figure><p><code>Tuple3</code>代表有三个元素</p><p><strong>操作：</strong></p><p><strong>访问里面的元素：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">scala&gt; t1.</div><div class="line">_1   _3         copy     hashCode   productArity     productIterator   toString   zipped</div><div class="line">_2   canEqual   equals   invert     productElement   productPrefix     x</div><div class="line"></div><div class="line">scala&gt; t1._1</div><div class="line">res29: <span class="type">String</span> = <span class="type">Tom</span></div></pre></td></tr></table></figure><p><strong><em>下划线加下标表示该位置元素，从1开始</em></strong></p><p><strong>遍历：</strong></p><p>注意：Tuple并没有提供foreach函数，使用<code>productIterator</code>进行遍历</p><p>遍历分为两步：</p><ol><li><p>生成迭代器</p></li><li><p>调用foreach</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scala&gt; t1.productIterator.foreach(println)</div><div class="line"><span class="type">Tom</span></div><div class="line">gakki</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure></li></ol><h1 id="10、scala的文件操作"><a href="#10、scala的文件操作" class="headerlink" title="10、scala的文件操作"></a>10、scala的文件操作</h1><p>类似于java的io</p><p>需求：</p><ol><li><p>读取文件</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 将整个文件作为一个字符串输出</div><div class="line"> * */</div><div class="line">println(<span class="string">"------------mkString------------"</span>)</div><div class="line"><span class="comment">//println(source.mkString)</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">      * 将每一行读入并输出</div><div class="line">      * */</div><div class="line">println(<span class="string">"------------lines------------"</span>)</div><div class="line"><span class="keyword">var</span> lines = source.getLines()</div><div class="line"><span class="comment">//lines.foreach(println)</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">      * 读取字符</div><div class="line">      * */</div><div class="line">println(<span class="string">"------------lines------------"</span>)</div><div class="line"><span class="keyword">for</span>(c &lt;- source) println(c)</div></pre></td></tr></table></figure></li><li><p>读取二进制文件</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"------------Read Bytes------------"</span>)</div><div class="line"><span class="comment">/**</span></div><div class="line">* scala不支持直接读取二进制</div><div class="line">* 通过调用java的InputStream</div><div class="line">* */</div><div class="line"><span class="keyword">var</span> file = <span class="keyword">new</span> <span class="type">File</span>(<span class="string">"H:\\stu.txt"</span>)</div><div class="line"><span class="comment">//构造一个InputStream</span></div><div class="line"><span class="keyword">var</span> in = <span class="keyword">new</span> <span class="type">FileInputStream</span>(file)</div><div class="line"><span class="comment">//构造一个buffer</span></div><div class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Byte</span>](file.length().toInt)</div><div class="line"><span class="comment">//读取</span></div><div class="line">in.read(buffer)</div><div class="line">println(buffer.length)</div><div class="line"></div><div class="line"><span class="comment">//关闭</span></div><div class="line">in.close()</div></pre></td></tr></table></figure></li><li><p>从url中获取信息</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"------------URL------------"</span>)</div><div class="line"><span class="keyword">var</span> source2 = fromURL(<span class="string">"http://www.baidu.com"</span>,<span class="string">"UTF-8"</span>)</div><div class="line">println(source2.mkString)</div></pre></td></tr></table></figure></li><li><p>写入文件</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//写文件</span></div><div class="line"><span class="comment">//PrintWriter也是java中的io包中内容</span></div><div class="line"><span class="keyword">var</span> out = <span class="keyword">new</span> <span class="type">PrintWriter</span>(<span class="string">"H:\\insert.txt"</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i &lt;- <span class="number">0</span> until <span class="number">10</span>) out.println(i)</div><div class="line"></div><div class="line">out.close()</div></pre></td></tr></table></figure></li><li><p>scala去调用java的类库</p><p>2中用到的InputStream就是java类库</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、数据类型和变量常量&quot;&gt;&lt;a href=&quot;#1、数据类型和变量常量&quot; class=&quot;headerlink&quot; title=&quot;1、数据类型和变量常量&quot;&gt;&lt;/a&gt;1、数据类型和变量常量&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;scala中所有的数据都是对象，如在java中1是
      
    
    </summary>
    
    
      <category term="Scala" scheme="rabbitluluu.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>ELK之K--Kibana</title>
    <link href="rabbitluluu.github.io/2019/03/22/ELK%E4%B9%8BK-Kibana/"/>
    <id>rabbitluluu.github.io/2019/03/22/ELK之K-Kibana/</id>
    <published>2019-03-22T02:46:16.000Z</published>
    <updated>2019-03-22T02:51:16.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h1><p>​    Kibana是一个开源的分析和可视化平台，设计用于和Elasticsearch一起工作。</p><p>​    你用Kibana来搜索，查看，并和存储在Elasticsearch索引中的数据进行交互。</p><p>​    你可以轻松地执行高级数据分析，并且以各种图标、表格和地图的形式可视化数据。</p><p>​    Kibana使得理解大量数据变得很容易。它简单的、基于浏览器的界面使你能够快速创建和共享动态仪表板，实时显示Elasticsearch查询的变化。</p><h1 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h1><p>解压：tar -zxvf kibana-6.6.2-linux-x86_64.tar.gz</p><p>修改 kibana.yml 配置文件：</p><p>server.port: 5601</p><p>server.host: “node01”   ———-部署kinana服务器的ip</p><p>elasticsearch.hosts: [“<a href="http://node01:9200" target="_blank" rel="external">http://node01:9200</a>“]</p><p>kibana.index: “.kibana”</p><h1 id="3、问题排查"><a href="#3、问题排查" class="headerlink" title="3、问题排查"></a>3、问题排查</h1><ol><li><p>启动kibana，报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[error[plugin:remote_clusters@6.6.2] Status changed from red to red - X-Pack plugin is not installed on the [data] Elasticsearch cluster.</div></pre></td></tr></table></figure></li></ol><p>​    解决：卸载x-pack插件。</p><p>​    <code>elasticsearch-plugin remove x-pack</code></p><p>​    <code>kibana-plugin remove x-pack</code></p><ol><li><p>启动kibana，报错 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log   [09:53:07.332] error[plugin:elasticsearch@6.1.1] Status changed from yellow to red - This version of Kibana requires Elasticsearch v6.1.1 on all nodes. I found the following incompatible nodes in your cluster: v5.6.2 @ 192.168.10.202:9200 (192.168.10.202), v5.6.2 @ 192.168.10.201:9200 (192.168.10.201), v5.6.2 @ 192.168.10.204:9200 (192.168.10.204), v5.6.2 @ 192.168.10.203:9200 (192.168.10.203)</div></pre></td></tr></table></figure><p>解决：重装对应版本的kibana即可</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、概述&quot;&gt;&lt;a href=&quot;#1、概述&quot; class=&quot;headerlink&quot; title=&quot;1、概述&quot;&gt;&lt;/a&gt;1、概述&lt;/h1&gt;&lt;p&gt;​    Kibana是一个开源的分析和可视化平台，设计用于和Elasticsearch一起工作。&lt;/p&gt;
&lt;p&gt;​    
      
    
    </summary>
    
    
      <category term="Kibana" scheme="rabbitluluu.github.io/tags/Kibana/"/>
    
  </entry>
  
  <entry>
    <title>ELK之L--Logtash</title>
    <link href="rabbitluluu.github.io/2019/03/22/ELK%E4%B9%8BL-Logtash/"/>
    <id>rabbitluluu.github.io/2019/03/22/ELK之L-Logtash/</id>
    <published>2019-03-22T02:46:08.000Z</published>
    <updated>2019-03-22T02:50:58.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h1><p>​    logstash是一个数据分析软件，主要目的是分析log日志。整一套软件可以当作一个MVC模型，logstash是controller层，Elasticsearch是一个model层，kibana是view层。</p><p>​    首先将数据传给logstash，它将数据进行过滤和格式化（转成JSON格式），然后传给Elasticsearch进行存储、建搜索的索引，kibana提供前端的页面再进行搜索和图表可视化，它是调用Elasticsearch的接口返回的数据进行可视化。logstash和Elasticsearch是用Java写的，kibana使用node.js框架。</p><p>常用架构：L–&gt;redis/kafka–&gt;L–&gt;E–&gt;K</p><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/Logtash.png" alt=""></p><h1 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h1><ol><li>解压缩</li><li>直接用</li></ol><font color="red"><strong>注意：比较消耗资源，注意资源的分配</strong></font><p>内存过低会有如下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c5330000, 986513408, 0) failed; error='Cannot allocate memory' (errno=12)</div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span> There is insufficient memory for the Java Runtime Environment to continue.</div><div class="line"><span class="meta">#</span> Native memory allocation (mmap) failed to map 986513408 bytes for committing reserved memory.</div><div class="line"><span class="meta">#</span> An error report file with more information is saved as:</div><div class="line"><span class="meta">#</span> /usr/local/logstash-6.6.2/confs_test/hs_err_pid3910.log</div></pre></td></tr></table></figure><ol><li><p>测试</p><p><code>bin/logstash -e &#39;input{stdin{}}output{stdout{codec=&gt;rubydebug}}&#39;</code></p><p>机器性能各异，个别可能会启动较慢，耐心等待即可</p></li></ol><h1 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h1><h2 id="3-1、Input"><a href="#3-1、Input" class="headerlink" title="3.1、Input"></a>3.1、Input</h2><ol><li><p>监听文件(File)</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; ["/opt/modules/logstash-6.6.2/data_test/message"]</div><div class="line">        type =&gt; "system"</div><div class="line">        start_position =&gt; "beginning"</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">output&#123;stdout&#123;codec=&gt;rubydebug&#125;&#125;</div></pre></td></tr></table></figure><p>有一些比较有用的配置项，可以用来指定 FileWatch 库的行为：</p><ul><li><p>discover_interval</p><p>logstash 每隔多久去检查一次被监听的 path 下是否有新文件。默认值是 15 秒。</p></li><li><p>exclude</p><p>不想被监听的文件可以排除出去，这里跟 path 一样支持 glob 展开。</p></li><li><p>close_older</p><p>一个已经监听中的文件，如果超过这个值的时间内没有更新内容，就关闭监听它的文件句柄。默认是 3600 秒，即一小时 </p></li><li><p>ignore_older</p><p>在每次检查文件列表的时候，如果一个文件的最后修改时间超过这个值，就忽略这个文件。默认是 86400 秒，即一天。</p></li><li><p>sincedb_path</p><p>如果你不想用默认的 $HOME/.sincedb(Windows 平台上在 C:\Windows\System32\config\systemprofile.sincedb)，可以通过这个配置定义 sincedb 文件到其他位置。 </p></li><li><p>sincedb_write_interval</p><p>logstash 每隔多久写一次 sincedb 文件，默认是 15 秒。</p></li><li><p>stat_interval</p><p>logstash 每隔多久检查一次被监听文件状态（是否有更新），默认是 1 秒。</p></li><li><p>start_position</p><p>logstash 从什么位置开始读取文件数据，默认是结束位置，也就是说 logstash 进程会以类似 tail -F 的形式运行。如果你是要导入原有数据，把这个设定改成 “beginning”，logstash 进程就从头开始读取，类似 less +F 的形式运行。</p></li></ul></li><li><p>标准输入/输出(Stdin)</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">        add_field =&gt; &#123;"key" =&gt; "value"&#125;</div><div class="line">        codec =&gt; "plain"</div><div class="line">        tags =&gt; ["add"]</div><div class="line">        type =&gt; "std"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output&#123;stdout&#123;codec=&gt;rubydebug&#125;&#125;</div></pre></td></tr></table></figure><p>​    type 和 tags 是 logstash 事件中两个特殊的字段。通常来说我们会在输入区段中通过 type 来标记事件类型。而 tags 则是在数据处理过程中，由具体的插件来添加或者删除的。</p><p>常常有以下用法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">        type =&gt; "web"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">    if [type] == "web" &#123;</div><div class="line">        grok &#123;</div><div class="line">            match =&gt; ["message", %&#123;COMBINEDAPACHELOG&#125;]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">    if "_grokparsefailure" in [tags] &#123;</div><div class="line">        nagios_nsca &#123;</div><div class="line">            nagios_status =&gt; "1"</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        elasticsearch &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h2 id="3-2、Codec"><a href="#3-2、Codec" class="headerlink" title="3.2、Codec"></a>3.2、Codec</h2><p>​    Codec 是 logstash 从 1.3.0 版开始新引入的概念(Codec 来自 Coder/decoder 两个单词的首字母缩写)。</p><p>在此之前，logstash 只支持纯文本形式输入，然后以过滤器处理它。但现在，我们可以在输入期处理不同类型的数据，这全是因为有了 codec 设置。所以，这里需要纠正之前的一个概念。Logstash 不只是一个input | filter | output 的数据流，而是一个 <strong>input | decode | filter | encode | output</strong> 的数据流！codec 就是用来 decode、encode 事件的。codec 的引入，使得 logstash 可以更好更方便的与其他有自定义数据格式的运维产品共存，比如 graphite、fluent、netflow、collectd，以及使用 msgpack、json、edn 等通用数据格式的其他产品等。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">        add_field =&gt; &#123;"key" =&gt; "value"&#125;</div><div class="line">        codec =&gt; "json"</div><div class="line">        type =&gt; "std"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output&#123;stdout&#123;codec=&gt;rubydebug&#125;&#125;</div></pre></td></tr></table></figure><p>输入测试</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"simCar"</span>:<span class="number">18074045598</span>,<span class="attr">"validityPeriod"</span>:<span class="string">"1996-12-06"</span>,<span class="attr">"unitPrice"</span>:<span class="number">9</span>,<span class="attr">"quantity"</span>:<span class="number">19</span>,<span class="attr">"amount"</span>:<span class="number">35</span>,<span class="attr">"imei"</span>:<span class="number">887540376467915</span>,<span class="attr">"user"</span>:<span class="string">"test"</span>&#125;</div></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        "@timestamp" =&gt; 2019-03-21T07:11:22.457Z,</div><div class="line">              "imei" =&gt; 887540376467915,</div><div class="line">    "validityPeriod" =&gt; "1996-12-06",</div><div class="line">              "user" =&gt; "test",</div><div class="line">              "host" =&gt; "node01",</div><div class="line">            "amount" =&gt; 35,</div><div class="line">               "key" =&gt; "value",</div><div class="line">            "simCar" =&gt; 18074045598,</div><div class="line">         "unitPrice" =&gt; 9,</div><div class="line">          "quantity" =&gt; 19,</div><div class="line">              "type" =&gt; "std",</div><div class="line">          "@version" =&gt; "1"</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-3、Filter"><a href="#3-3、Filter" class="headerlink" title="3.3、Filter"></a>3.3、Filter</h2><h3 id="3-3-1、Grok插件"><a href="#3-3-1、Grok插件" class="headerlink" title="3.3.1、Grok插件"></a>3.3.1、Grok插件</h3><p>​    logstash拥有丰富的filter插件,它们扩展了进入过滤器的原始数据，进行复杂的逻辑处理，甚至可以无中生有的添加新的 logstash 事件到后续的流程中去！Grok 是 Logstash 最重要的插件之一。也是迄今为止使蹩脚的、无结构的日志结构化和可查询的最好方式。Grok在解析 syslog logs、apache and other webserver logs、mysql logs等任意格式的文件上表现完美。</p><p>​    这个工具非常适用于系统日志，Apache和其他网络服务器日志，MySQL日志等。</p><p>测试：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">        type =&gt; "std"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    match=&gt;&#123;"message"=&gt; "%&#123;IP:client&#125; %&#123;WORD:method&#125; %&#123;URIPATHPARAM:request&#125; %&#123;NUMBER:bytes&#125; %&#123;NUMBER:duration&#125;" &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">output&#123;stdout&#123;codec=&gt;rubydebug&#125;&#125;</div></pre></td></tr></table></figure><p>输入：</p><p><code>55.3.244.1 GET /index.html 15824 0.043</code></p><p>输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "@timestamp" =&gt; 2019-03-21T07:18:44.268Z,</div><div class="line">       "request" =&gt; "/index.html",</div><div class="line">         "bytes" =&gt; "15824",</div><div class="line">      "duration" =&gt; "0.043",</div><div class="line">          "host" =&gt; "node01",</div><div class="line">        "method" =&gt; "GET",</div><div class="line">        "client" =&gt; "55.3.244.1",</div><div class="line">       "message" =&gt; "55.3.244.1 GET /index.html 15824 0.043",</div><div class="line">      "@version" =&gt; "1",</div><div class="line">          "type" =&gt; "std"</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-3-2、Grok语法"><a href="#3-3-2、Grok语法" class="headerlink" title="3.3.2、Grok语法"></a>3.3.2、Grok语法</h3><p>grok模式的语法如下：</p><p><code>%{SYNTAX:SEMANTIC}</code></p><p><strong>SYNTAX</strong>：代表匹配值的类型,例如3.44可以用NUMBER类型所匹配,127.0.0.1可以使用IP类型匹配。</p><p><strong>SEMANTIC</strong>：代表存储该值的一个变量名称,例如 3.44 可能是一个事件的持续时间,127.0.0.1可能是请求的client地址。所以这两个值可以用 %{NUMBER:duration} %{IP:client} 来匹配。</p><p>​    你也可以选择将数据类型转换添加到Grok模式。默认情况下，所有语义都保存为字符串。如果您希望转换语义的数据类型，例如将字符串更改为整数，则将其后缀为目标数据类型。例如%{NUMBER:num:int}将num语义从一个字符串转换为一个整数。目前唯一支持的转换是int和float。</p><p>​    Logstash附带约120个模式。你可以在这里找到它们<a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns" target="_blank" rel="external">https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns</a></p><h3 id="3-3-3、自定义Grok模式"><a href="#3-3-3、自定义Grok模式" class="headerlink" title="3.3.3、自定义Grok模式"></a>3.3.3、自定义Grok模式</h3><p>​    更多时候logstash grok没办法提供你所需要的匹配类型，这个时候我们可以使用自定义。</p><p>创建自定义 patterns 文件。</p><ol><li><p>创建一个名为patterns其中创建一个文件postfix （文件名无关紧要,随便起）,在该文件中，将需要的模式写为模式名称，空格，然后是该模式的正则表达式。例如：</p><p><code>POSTFIX_QUEUEID [0-9A-F]{10,11}</code></p></li><li><p>然后使用这个插件中的patterns_dir设置告诉logstash目录是你的自定义模式。</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">        type =&gt; "std"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    patterns_dir =&gt; ["./patterns"]</div><div class="line">    match =&gt; &#123; "message" =&gt; "%&#123;SYSLOGBASE&#125; %&#123;POSTFIX_QUEUEID:queue_id&#125;: %&#123;GREEDYDATA:syslog_message&#125;" &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">output&#123;stdout&#123;codec=&gt;rubydebug&#125;&#125;</div></pre></td></tr></table></figure><p>输入：</p><p><code>Jan 1 06:25:43 mailserver14 postfix/cleanup[21403]: BEF25A72965:message-id=&lt;20130101142543.5828399CCAF@mailserver1</code></p><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">          "queue_id" =&gt; "BEF25A72965",</div><div class="line">           "message" =&gt; "Jan  1 06:25:43 mailserver14 postfix/cleanup[21403]: BEF25A72965: message-id=&lt;20130101142543.5828399CCAF@mailserver1",</div><div class="line">               "pid" =&gt; "21403",</div><div class="line">           "program" =&gt; "postfix/cleanup",</div><div class="line">          "@version" =&gt; "1",</div><div class="line">              "type" =&gt; "std",</div><div class="line">         "logsource" =&gt; "mailserver14",</div><div class="line">              "host" =&gt; "zzc-203",</div><div class="line">         "timestamp" =&gt; "Jan  1 06:25:43",</div><div class="line">    "syslog_message" =&gt; "message-id=&lt;20130101142543.5828399CCAF@mailserver1",</div><div class="line">        "@timestamp" =&gt; 2019-03-19T05:31:37.405Z</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-3-GeoIP"><a href="#3-3-GeoIP" class="headerlink" title="3.3.GeoIP"></a>3.3.GeoIP</h3><p>​    GeoIP 是最常见的免费 IP 地址归类查询库，同时也有收费版可以采购。GeoIP 库可以根据 IP 地址提供对应的地域信息，包括国别，省市，经纬度等，对于可视化地图和区域统计非常有用。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">        type =&gt; "std"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">    geoip &#123;</div><div class="line">        source =&gt; "message"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output&#123;stdout&#123;codec=&gt;rubydebug&#125;&#125;</div></pre></td></tr></table></figure><p>输入：</p><p><code>39.65.228.148</code></p><p>输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">       "message" =&gt; "39.65.228.148",</div><div class="line">          "host" =&gt; "node01",</div><div class="line">          "type" =&gt; "std",</div><div class="line">         "geoip" =&gt; &#123;</div><div class="line">              "location" =&gt; &#123;</div><div class="line">            "lon" =&gt; 116.9972,</div><div class="line">            "lat" =&gt; 36.6683</div><div class="line">        &#125;,</div><div class="line">                    "ip" =&gt; "39.65.228.148",</div><div class="line">         "country_code3" =&gt; "CN",</div><div class="line">             "longitude" =&gt; 116.9972,</div><div class="line">         "country_code2" =&gt; "CN",</div><div class="line">           "region_name" =&gt; "Shandong",</div><div class="line">           "region_code" =&gt; "37",</div><div class="line">              "timezone" =&gt; "Asia/Shanghai",</div><div class="line">          "country_name" =&gt; "China",</div><div class="line">              "latitude" =&gt; 36.6683,</div><div class="line">        "continent_code" =&gt; "AS",</div><div class="line">             "city_name" =&gt; "Jinan"</div><div class="line">    &#125;,</div><div class="line">    "@timestamp" =&gt; 2019-03-21T08:16:10.813Z,</div><div class="line">      "@version" =&gt; "1"</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-4、Output"><a href="#3-4、Output" class="headerlink" title="3.4、Output"></a>3.4、Output</h2><h3 id="3-4-1、保存成本地文件"><a href="#3-4-1、保存成本地文件" class="headerlink" title="3.4.1、保存成本地文件"></a>3.4.1、保存成本地文件</h3><p>配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">        type =&gt; "std"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; "../data_test/%&#123;+yyyy&#125;/%&#123;+MM&#125;/%&#123;+dd&#125;/%&#123;host&#125;.log"</div><div class="line">        codec =&gt; line &#123; format =&gt; "custom format: %&#123;message&#125;"&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输入：</p><p><code>Gakki真漂亮</code></p><p>输出到：<code>/opt/modules/logstash-6.6.2/data_test/2019/03/21</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[sean@node01 21]$ cat node01.log </div><div class="line">custom format: Gakki真漂亮`</div></pre></td></tr></table></figure><h3 id="3-4-2、服务器间传文件"><a href="#3-4-2、服务器间传文件" class="headerlink" title="3.4.2、服务器间传文件"></a>3.4.2、服务器间传文件</h3><p>发送端</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">input&#123;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; ["/opt/modules/logstash-6.6.2/data_test/send.log"]</div><div class="line">        type =&gt; "ecolog"</div><div class="line">        start_position =&gt; "beginning"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">    if [type] =~ /^ecolog/ &#123;</div><div class="line">        ruby &#123;</div><div class="line">            code =&gt; "file_name = event.get('path').split('/')[-1]</div><div class="line">                                         event.set('file_name',file_name)</div><div class="line">                                         event.set('servip','客户端IP')"</div><div class="line">        &#125;</div><div class="line">        mutate &#123;</div><div class="line">            rename =&gt; &#123;"file_name" =&gt; "filename"&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">        tcp &#123;</div><div class="line">        host  =&gt; "node01"</div><div class="line">        port  =&gt; 9600</div><div class="line">        codec =&gt; json_lines</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接收端</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  tcp &#123;</div><div class="line">        mode =&gt; "server"</div><div class="line">        port =&gt; 9600</div><div class="line">        ssl_enable =&gt; false</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">    json &#123;</div><div class="line">        source =&gt; "message"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; "/opt/modules/logstash-6.6.2/data_test/%&#123;+YYYY-MM-dd&#125;/%&#123;servip&#125;-%&#123;filename&#125;"</div><div class="line">        codec =&gt; line &#123; format =&gt; "%&#123;message&#125;"&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-4-3、写入到es"><a href="#3-4-3、写入到es" class="headerlink" title="3.4.3、写入到es"></a>3.4.3、写入到es</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; ["/opt/modules/logstash-6.6.2/data_test/run_error.log"]</div><div class="line">        type =&gt; "error"</div><div class="line">        start_position =&gt; "beginning"</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">    elasticsearch &#123;</div><div class="line">        hosts =&gt; ["node01:9200"]</div><div class="line">        index =&gt; "logstash-%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;"</div><div class="line">        document_type =&gt; "%&#123;type&#125;"</div><div class="line">        sniffing =&gt; true</div><div class="line">        template_overwrite =&gt; true</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>sniffing ：寻找其他es节点，建议打开</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、概述&quot;&gt;&lt;a href=&quot;#1、概述&quot; class=&quot;headerlink&quot; title=&quot;1、概述&quot;&gt;&lt;/a&gt;1、概述&lt;/h1&gt;&lt;p&gt;​    logstash是一个数据分析软件，主要目的是分析log日志。整一套软件可以当作一个MVC模型，logstash是
      
    
    </summary>
    
    
      <category term="Logtash" scheme="rabbitluluu.github.io/tags/Logtash/"/>
    
  </entry>
  
  <entry>
    <title>IK分词器</title>
    <link href="rabbitluluu.github.io/2019/03/22/IK%E5%88%86%E8%AF%8D%E5%99%A8/"/>
    <id>rabbitluluu.github.io/2019/03/22/IK分词器/</id>
    <published>2019-03-22T02:46:00.000Z</published>
    <updated>2019-03-22T02:50:29.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h1><h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><ol><li><p>下载</p><p><code>https://github.com/medcl/elasticsearch-analysis-ik</code>找到对应es的版本下载zip包</p></li><li><p>安装</p><ol><li><p>cp elasticsearch-analysis-ik-6.1.1.zip ./elasticsearch-6.1.1/plugins/</p><p>unzip elasticsearch-analysis-ik-6.1.1.zip -d ik-analyzer</p><p>推荐使用</p></li><li><p>./elasticsearch-plugin<br>install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.1.1/elasticsearch-analysis-ik-6.1.1.zip" target="_blank" rel="external">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.1.1/elasticsearch-analysis-ik-6.1.1.zip</a></p><p>不推荐此法</p></li><li><p>elasticsearch-plugin install -f<br>file:///usr/local/elasticsearch-analysis-ik-6.1.1.zip</p></li></ol><font color="red"><strong>注意：不能有内层目录，否则启动报错</strong></font></li><li><p>测试</p><p><code>curl -XGET &#39;http://node01:9200/_analyze?pretty&amp;analyzer=standard&#39; -d &#39;Gakki真是一个可爱的女孩子&#39;</code></p></li></ol><h2 id="2、模式介绍"><a href="#2、模式介绍" class="headerlink" title="2、模式介绍"></a>2、模式介绍</h2><p><strong>ik_smart模式</strong></p><p>测试：</p><p><code>curl -XGET &#39;http://node01:9200/_analyze?pretty&amp;analyzer=ik_smart&#39; -d &#39;Gakki真是一个可爱的女孩子&#39;</code></p><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"tokens"</span> : [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"gakki"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">5</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"ENGLISH"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"真是"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">5</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">7</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"一个"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">7</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">9</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">2</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"可爱"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">9</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">11</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">3</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"的"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">11</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">12</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_CHAR"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">4</span></div><div class="line">    &#125;,</div><div class="line">&#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"女孩子"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">12</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">15</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">5</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>ik_max_word模式</strong></p><p><code>curl -XGET &#39;http://node01:9200/_analyze?pretty&amp;analyzer=ik_max_word&#39; -d &#39;Gakki真是一个可爱的女孩子&#39;</code></p><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"tokens"</span> : [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"gakki"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">5</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"ENGLISH"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"真是"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">5</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">7</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"一个"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">7</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">9</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">2</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"一"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">7</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">8</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"TYPE_CNUM"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">3</span></div><div class="line">    &#125;,</div><div class="line">&#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"个"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">8</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">9</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"COUNT"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">4</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"可爱"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">9</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">11</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">5</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"的"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">11</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">12</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_CHAR"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">6</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"女孩子"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">12</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">15</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">7</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"女孩"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">12</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">14</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">8</span></div><div class="line">    &#125;,</div><div class="line">&#123;</div><div class="line">      <span class="attr">"token"</span> : <span class="string">"孩子"</span>,</div><div class="line">      <span class="attr">"start_offset"</span> : <span class="number">13</span>,</div><div class="line">      <span class="attr">"end_offset"</span> : <span class="number">15</span>,</div><div class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="attr">"position"</span> : <span class="number">9</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>区别：</p><p><code>ik_max_word</code>分词更为细腻，会重复使用句子中的字，将所有可能的结果都会分出来</p><p><code>ik_smart</code>则每个字只使用一次，不会重复使用</p><h2 id="3、API使用"><a href="#3、API使用" class="headerlink" title="3、API使用"></a>3、API使用</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IK分词器&quot;&gt;&lt;a href=&quot;#IK分词器&quot; class=&quot;headerlink&quot; title=&quot;IK分词器&quot;&gt;&lt;/a&gt;IK分词器&lt;/h1&gt;&lt;h2 id=&quot;1、安装&quot;&gt;&lt;a href=&quot;#1、安装&quot; class=&quot;headerlink&quot; title=&quot;1、安装&quot;
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="rabbitluluu.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ELK之E--Elasticsearch的API使用</title>
    <link href="rabbitluluu.github.io/2019/03/22/ELK%E4%B9%8BE-Elasticsearch%E7%9A%84API%E4%BD%BF%E7%94%A8/"/>
    <id>rabbitluluu.github.io/2019/03/22/ELK之E-Elasticsearch的API使用/</id>
    <published>2019-03-22T02:45:50.000Z</published>
    <updated>2019-03-22T03:19:45.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h1><h2 id="1-1、新建maven工程，pom中添加如下"><a href="#1-1、新建maven工程，pom中添加如下" class="headerlink" title="1.1、新建maven工程，pom中添加如下"></a>1.1、新建maven工程，pom中添加如下</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;4.1&lt;/version&gt;</div><div class="line">&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;5.6.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;transport&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;5.6.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;2.9.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure><h2 id="1-2、添加log4j2-xml文件"><a href="#1-2、添加log4j2-xml文件" class="headerlink" title="1.2、添加log4j2.xml文件"></a>1.2、添加log4j2.xml文件</h2><p>在sources中添加文件名为<code>log4j2.xml</code>的文件，加入如下内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;Configuration status="warn"&gt;</div><div class="line">    &lt;Appenders&gt;</div><div class="line">        &lt;Console name="Console" target="SYSTEM_OUT"&gt;</div><div class="line">            &lt;PatternLayout pattern="%m%n"/&gt;</div><div class="line">        &lt;/Console&gt;</div><div class="line">    &lt;/Appenders&gt;</div><div class="line">    &lt;Loggers&gt;</div><div class="line">        &lt;Root level="INFO"&gt;</div><div class="line">            &lt;AppenderRef ref="Console"/&gt;</div><div class="line">        &lt;/Root&gt;</div><div class="line">    &lt;/Loggers&gt;</div><div class="line">&lt;/Configuration&gt;</div></pre></td></tr></table></figure><h1 id="2、代码实现"><a href="#2、代码实现" class="headerlink" title="2、代码实现"></a>2、代码实现</h1><h2 id="3-1、声明客户端"><a href="#3-1、声明客户端" class="headerlink" title="3.1、声明客户端"></a>3.1、声明客户端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明客户端</span></div><div class="line"><span class="keyword">private</span> TransportClient client;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 初始化连接</div><div class="line"> */</div><div class="line"><span class="meta">@Before</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getClient</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</div><div class="line">    <span class="comment">//1.设置连接的集群名称</span></div><div class="line">    Settings settings = Settings.builder().</div><div class="line">            put(<span class="string">"cluster.name"</span>, <span class="string">"my-application"</span>).</div><div class="line">            build();</div><div class="line"></div><div class="line">    <span class="comment">//2.连接集群</span></div><div class="line">    client = <span class="keyword">new</span> PreBuiltTransportClient(settings);</div><div class="line">    client.addTransportAddress(</div><div class="line">            <span class="keyword">new</span> InetSocketTransportAddress(</div><div class="line">                    InetAddress.getByName(<span class="string">"node01"</span>), <span class="number">9300</span>));</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-2、创建索引"><a href="#2-2、创建索引" class="headerlink" title="2.2、创建索引"></a>2.2、创建索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 创建索引--名字只能用小写</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//1.创建索引</span></div><div class="line">        client.admin().indices().prepareCreate(<span class="string">"jojo"</span>).get();</div><div class="line"></div><div class="line">        <span class="comment">//关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="2-3、删除索引"><a href="#2-3、删除索引" class="headerlink" title="2.3、删除索引"></a>2.3、删除索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 删除索引</div><div class="line">    */</div><div class="line">   <span class="meta">@Test</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">//1.删除索引</span></div><div class="line">       client.admin().indices().prepareDelete(<span class="string">"gakki"</span>).get();</div><div class="line"></div><div class="line">       <span class="comment">//2.关闭连接</span></div><div class="line">       client.close();</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h2 id="2-4、新建文档"><a href="#2-4、新建文档" class="headerlink" title="2.4、新建文档"></a>2.4、新建文档</h2><p>法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 新建文档--方式1：源数据json串</div><div class="line">     * (不推荐)</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndexByJson</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//1.文档数据准备</span></div><div class="line">        String json = <span class="string">"&#123;"</span> + <span class="string">"\"id\":\"1\","</span> + <span class="string">"\"title\":\"基于Lucene的搜索服务器\","</span></div><div class="line">                + <span class="string">"\"content\":\"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口\""</span> + <span class="string">"&#125;"</span>;</div><div class="line"></div><div class="line">        <span class="comment">//2.创建文档</span></div><div class="line">        IndexResponse indexResponse = client.prepareIndex(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"1"</span>)</div><div class="line">                .setSource(json)</div><div class="line">                .execute()</div><div class="line">                .actionGet();</div><div class="line"></div><div class="line">        <span class="comment">//3.打印结果</span></div><div class="line">        System.out.println(<span class="string">"index:"</span> + indexResponse.getIndex());</div><div class="line">        System.out.println(<span class="string">"type:"</span> + indexResponse.getType());</div><div class="line">        System.out.println(<span class="string">"id:"</span> + indexResponse.getId());</div><div class="line">        System.out.println(<span class="string">"version:"</span> + indexResponse.getVersion());</div><div class="line">        System.out.println(<span class="string">"result:"</span> + indexResponse.getResult());</div><div class="line"></div><div class="line">        <span class="comment">//4.关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 创建文档--方式2：源数据map方式添加json</div><div class="line">    */</div><div class="line">   <span class="meta">@Test</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndexByMap</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">//1.文档数据准备</span></div><div class="line">       HashMap&lt;String, Object&gt; json = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">       json.put(<span class="string">"id"</span>, <span class="number">2</span>);</div><div class="line">       json.put(<span class="string">"title"</span>, <span class="string">"基于Lucene的搜索服务器"</span>);</div><div class="line">       json.put(<span class="string">"content"</span>, <span class="string">"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口"</span>);</div><div class="line"></div><div class="line">       <span class="comment">//2.创建文档</span></div><div class="line">       IndexResponse indexResponse = client.prepareIndex(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"2"</span>).setSource(json).execute().actionGet();</div><div class="line"></div><div class="line">       <span class="comment">// 3 打印返回的结果</span></div><div class="line">       System.out.println(<span class="string">"index:"</span> + indexResponse.getIndex());</div><div class="line">       System.out.println(<span class="string">"type:"</span> + indexResponse.getType());</div><div class="line">       System.out.println(<span class="string">"id:"</span> + indexResponse.getId());</div><div class="line">       System.out.println(<span class="string">"version:"</span> + indexResponse.getVersion());</div><div class="line">       System.out.println(<span class="string">"result:"</span> + indexResponse.getResult());</div><div class="line"></div><div class="line">       <span class="comment">// 4 关闭连接</span></div><div class="line">       client.close();</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>法三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 创建文档--方式3：源数据es构建器添加json</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndexByEs</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">//1.通过es自带的帮助类，构建json数据</span></div><div class="line">        XContentBuilder builder = XContentFactory.jsonBuilder().startObject()</div><div class="line">                .field(<span class="string">"id"</span>, <span class="number">3</span>)</div><div class="line">                .field(<span class="string">"title"</span>, <span class="string">"基于Lucene的搜索服务器"</span>)</div><div class="line">                .field(<span class="string">"content"</span>, <span class="string">"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。"</span>)</div><div class="line">                .endObject();</div><div class="line"></div><div class="line">        <span class="comment">// 2 创建文档</span></div><div class="line">        IndexResponse indexResponse = client.prepareIndex(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"3"</span>).setSource(builder).get();</div><div class="line"></div><div class="line">        <span class="comment">// 3 打印返回的结果</span></div><div class="line">        System.out.println(<span class="string">"index:"</span> + indexResponse.getIndex());</div><div class="line">        System.out.println(<span class="string">"type:"</span> + indexResponse.getType());</div><div class="line">        System.out.println(<span class="string">"id:"</span> + indexResponse.getId());</div><div class="line">        System.out.println(<span class="string">"version:"</span> + indexResponse.getVersion());</div><div class="line">        System.out.println(<span class="string">"result:"</span> + indexResponse.getResult());</div><div class="line"></div><div class="line">        <span class="comment">// 4 关闭连接</span></div><div class="line">        client.close();</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="2-5、查询"><a href="#2-5、查询" class="headerlink" title="2.5、查询"></a>2.5、查询</h2><p>查询一条：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 查询一条信息</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//1.查询文档</span></div><div class="line">        GetResponse response = client.prepareGet(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"2"</span>).get();</div><div class="line"></div><div class="line">        <span class="comment">//2.打印搜索的结果</span></div><div class="line">        System.out.println(response.getSourceAsString());</div><div class="line"></div><div class="line">        <span class="comment">//3.关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>查询多条：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 查询多条信息</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMultiData</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.查询多个文档</span></div><div class="line">        MultiGetResponse responses = client.prepareMultiGet()</div><div class="line">                .add(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"3"</span>)</div><div class="line">                .add(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>).get();</div><div class="line"></div><div class="line">        <span class="comment">//2.遍历返回结果</span></div><div class="line">        <span class="keyword">for</span> (MultiGetItemResponse m : responses) &#123;</div><div class="line">            GetResponse response = m.getResponse();</div><div class="line"></div><div class="line">            <span class="comment">//判断结果是否存在</span></div><div class="line">            <span class="keyword">if</span> (response.isExists()) &#123;</div><div class="line">                String sourceAsString = response.getSourceAsString();</div><div class="line">                System.out.println(sourceAsString);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="2-6、更新"><a href="#2-6、更新" class="headerlink" title="2.6、更新"></a>2.6、更新</h2><p>法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 更新数据</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateData</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException, IOException </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.创建更新数据的请求对象</span></div><div class="line">        UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest();</div><div class="line">        updateRequest.index(<span class="string">"gakki"</span>);</div><div class="line">        updateRequest.type(<span class="string">"article"</span>);</div><div class="line">        updateRequest.id(<span class="string">"3"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//设置json字符串--法1--使用map集合</span></div><div class="line">        HashMap&lt;String, Object&gt; json1 = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        json1.put(<span class="string">"title"</span>, <span class="string">"基于Lucene的搜索服务器"</span>);</div><div class="line">        json1.put(<span class="string">"content"</span>, <span class="string">"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。大数据前景无限"</span>);</div><div class="line">        json1.put(<span class="string">"createDate"</span>, <span class="string">"2019-3-21"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//设置json字符串--法2--使用自带类</span></div><div class="line">        XContentBuilder json2 = XContentFactory.jsonBuilder().startObject()</div><div class="line">                .field(<span class="string">"title"</span>, <span class="string">"基于Lucene的搜索服务器"</span>)</div><div class="line">                .field(<span class="string">"content"</span>, <span class="string">"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。大数据前景无限,并且薪资水平高"</span>)</div><div class="line">                .field(<span class="string">"createDate"</span>, <span class="string">"2019-3-22"</span>).endObject();</div><div class="line"></div><div class="line">        <span class="comment">//添加</span></div><div class="line">        <span class="comment">//updateRequest.doc(json1);</span></div><div class="line">        updateRequest.doc(json2);</div><div class="line"></div><div class="line">        <span class="comment">//2.获取更新后的值</span></div><div class="line">        UpdateResponse indexResponse = client.update(updateRequest).get();</div><div class="line"></div><div class="line">        <span class="comment">//3.打印结果</span></div><div class="line">        System.out.println(<span class="string">"index:"</span> + indexResponse.getIndex());</div><div class="line">        System.out.println(<span class="string">"type:"</span> + indexResponse.getType());</div><div class="line">        System.out.println(<span class="string">"id:"</span> + indexResponse.getId());</div><div class="line">        System.out.println(<span class="string">"version:"</span> + indexResponse.getVersion());</div><div class="line">        System.out.println(<span class="string">"create:"</span> + indexResponse.getResult());</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 更新数据，倘若不存在则添加</div><div class="line">    */</div><div class="line">   <span class="meta">@Test</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdata</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ExecutionException, InterruptedException </span>&#123;</div><div class="line"></div><div class="line">       <span class="comment">//准备json</span></div><div class="line">       XContentBuilder json1 = XContentFactory.jsonBuilder().startObject()</div><div class="line">               .field(<span class="string">"title"</span>, <span class="string">"搜索服务器"</span>)</div><div class="line">               .field(<span class="string">"content"</span>,</div><div class="line">                       <span class="string">"它提供了一个分布式多用户能力的全文搜索引擎，"</span> +</div><div class="line">                               <span class="string">"基于RESTful web接口。Elasticsearch是用Java开发的，"</span> +</div><div class="line">                               <span class="string">"并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。"</span> +</div><div class="line">                               <span class="string">"设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。"</span>)</div><div class="line">               .endObject();</div><div class="line"></div><div class="line">       <span class="comment">//1.设置查询条件</span></div><div class="line">       IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"5"</span>).source(json1);</div><div class="line"></div><div class="line">       XContentBuilder json2 = XContentFactory.jsonBuilder().startObject()</div><div class="line">               .field(<span class="string">"user"</span>, <span class="string">"sean"</span>).endObject();</div><div class="line"></div><div class="line">       <span class="comment">//2.设置更新查找到更新下面的设置</span></div><div class="line">       UpdateRequest upsert = <span class="keyword">new</span> UpdateRequest(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"5"</span>)</div><div class="line">               .doc(json2).upsert(indexRequest);</div><div class="line"></div><div class="line">       client.update(upsert).get();</div><div class="line">       client.close();</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h2 id="2-7、删除数据"><a href="#2-7、删除数据" class="headerlink" title="2.7、删除数据"></a>2.7、删除数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 删除数据</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleeteData</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.删除文档数据</span></div><div class="line">        DeleteResponse indexResponse = client.prepareDelete(<span class="string">"gakki"</span>, <span class="string">"article"</span>, <span class="string">"5"</span>).get();</div><div class="line"></div><div class="line">        <span class="comment">//2.打印结果</span></div><div class="line">        <span class="comment">// 2 打印返回的结果</span></div><div class="line">        System.out.println(<span class="string">"index:"</span> + indexResponse.getIndex());</div><div class="line">        System.out.println(<span class="string">"type:"</span> + indexResponse.getType());</div><div class="line">        System.out.println(<span class="string">"id:"</span> + indexResponse.getId());</div><div class="line">        System.out.println(<span class="string">"version:"</span> + indexResponse.getVersion());</div><div class="line">        System.out.println(<span class="string">"found:"</span> + indexResponse.getResult());</div><div class="line"></div><div class="line">        <span class="comment">// 3 关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="2-8查询"><a href="#2-8查询" class="headerlink" title="2.8查询"></a>2.8查询</h2><p>全表查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 全表查询--不推荐</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchAllQuery</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.执行查询</span></div><div class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"gakki"</span>)</div><div class="line">                .setTypes(<span class="string">"article"</span>)</div><div class="line">                .setQuery(QueryBuilders.matchAllQuery()).get();</div><div class="line"></div><div class="line">        <span class="comment">//2.打印查询结果</span></div><div class="line">        SearchHits hits = searchResponse.getHits();<span class="comment">//获取命中次数</span></div><div class="line">        System.out.println(<span class="string">"查询结果有："</span> + hits.getTotalHits());</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</div><div class="line">            <span class="comment">//打印信息</span></div><div class="line">            System.out.println(hit.getSourceAsString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>条件查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 条件查询</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.条件查询</span></div><div class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"gakki"</span>)</div><div class="line">                .setTypes(<span class="string">"article"</span>)</div><div class="line">                .setQuery(QueryBuilders.queryStringQuery(<span class="string">"大数据"</span>)).get();</div><div class="line"></div><div class="line">        <span class="comment">//2.打印查询结果</span></div><div class="line">        SearchHits hits = searchResponse.getHits();</div><div class="line">        System.out.println(<span class="string">"共有"</span> + hits.getTotalHits() + <span class="string">"条"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</div><div class="line">            System.out.println(hit.getSourceAsString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//3.关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>通配符查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 通配符查询</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wildcardQuery</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.通配符查询</span></div><div class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"gakki"</span>)</div><div class="line">                .setTypes(<span class="string">"article"</span>)</div><div class="line">                .setQuery(QueryBuilders.wildcardQuery(<span class="string">"content"</span>, <span class="string">"*全*"</span>)).get();</div><div class="line"></div><div class="line">        <span class="comment">//2.打印查询结果</span></div><div class="line">        SearchHits hits = searchResponse.getHits(); <span class="comment">// 获取命中次数，查询结果有多少对象</span></div><div class="line">        System.out.println(<span class="string">"查询结果有："</span> + hits.getTotalHits() + <span class="string">"条"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</div><div class="line">            System.out.println(hit.getSourceAsString());<span class="comment">// 打印出每条结果</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 3 关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>模糊查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 模糊查询</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fuzzy</span><span class="params">()</span> </span>&#123;</div><div class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"gakki"</span>)</div><div class="line">                .setTypes(<span class="string">"article"</span>)</div><div class="line">                .setQuery(QueryBuilders.fuzzyQuery(<span class="string">"title"</span>, <span class="string">"lucene"</span>)).get();</div><div class="line"></div><div class="line">        <span class="comment">// 2 打印查询结果</span></div><div class="line">        SearchHits hits = searchResponse.getHits(); <span class="comment">// 获取命中次数，查询结果有多少对象</span></div><div class="line">        System.out.println(<span class="string">"查询结果有："</span> + hits.getTotalHits() + <span class="string">"条"</span>);</div><div class="line"></div><div class="line">        Iterator&lt;SearchHit&gt; iterator = hits.iterator();</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            SearchHit searchHit = iterator.next(); <span class="comment">// 每个查询对象</span></div><div class="line">            System.out.println(searchHit.getSourceAsString()); <span class="comment">// 获取字符串格式打印</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 3 关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>精准查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 精准查询</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termQuery</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.设置查询</span></div><div class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"gakki"</span>)</div><div class="line">                .setTypes(<span class="string">"article"</span>)</div><div class="line">                .setQuery(QueryBuilders.termQuery(<span class="string">"content"</span>, <span class="string">"全文"</span>)).get();</div><div class="line"></div><div class="line">        <span class="comment">//2.打印信息</span></div><div class="line">        SearchHits hits = searchResponse.getHits(); <span class="comment">// 获取命中次数，查询结果有多少对象</span></div><div class="line">        System.out.println(<span class="string">"查询结果有："</span> + hits.getTotalHits() + <span class="string">"条"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</div><div class="line">            System.out.println(hit.getSourceAsString());<span class="comment">// 打印出每条结果</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 3 关闭连接</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="2-9、创建mapping"><a href="#2-9、创建mapping" class="headerlink" title="2.9、创建mapping"></a>2.9、创建mapping</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 创建mapping</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createMapping</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 1设置mapping</span></div><div class="line">        XContentBuilder builder = XContentFactory.jsonBuilder().startObject().startObject(<span class="string">"article"</span>)</div><div class="line">                .startObject(<span class="string">"properties"</span>)</div><div class="line">                .startObject(<span class="string">"id1"</span>)</div><div class="line">                .field(<span class="string">"type"</span>, <span class="string">"text"</span>)</div><div class="line">                .field(<span class="string">"store"</span>, <span class="string">"true"</span>)</div><div class="line">                .endObject()</div><div class="line">                .startObject(<span class="string">"title2"</span>)</div><div class="line">                .field(<span class="string">"type"</span>, <span class="string">"text"</span>)</div><div class="line">                .field(<span class="string">"store"</span>, <span class="string">"false"</span>)</div><div class="line">                .endObject()</div><div class="line">                .startObject(<span class="string">"content"</span>)</div><div class="line">                .field(<span class="string">"type"</span>, <span class="string">"text"</span>)</div><div class="line">                .field(<span class="string">"store"</span>, <span class="string">"true"</span>)</div><div class="line">                .endObject()</div><div class="line">                .endObject()</div><div class="line">                .endObject()</div><div class="line">                .endObject();</div><div class="line"></div><div class="line">        <span class="comment">// 2 添加mapping</span></div><div class="line">        PutMappingRequest mapping = Requests.putMappingRequest(<span class="string">"jojo"</span>).type(<span class="string">"article"</span>).source(builder);</div><div class="line"></div><div class="line">        client.admin().indices().putMapping(mapping).get();</div><div class="line"></div><div class="line">        <span class="comment">// 3 关闭资源</span></div><div class="line">        client.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、环境准备&quot;&gt;&lt;a href=&quot;#1、环境准备&quot; class=&quot;headerlink&quot; title=&quot;1、环境准备&quot;&gt;&lt;/a&gt;1、环境准备&lt;/h1&gt;&lt;h2 id=&quot;1-1、新建maven工程，pom中添加如下&quot;&gt;&lt;a href=&quot;#1-1、新建maven工程，p
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="rabbitluluu.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ELK之E--Elasticsearch安装和配置</title>
    <link href="rabbitluluu.github.io/2019/03/22/ELK%E4%B9%8BE-Elasticsearch%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>rabbitluluu.github.io/2019/03/22/ELK之E-Elasticsearch安装和配置/</id>
    <published>2019-03-22T02:45:26.000Z</published>
    <updated>2019-03-22T02:48:57.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h1><p>​    Elasticsearch，基于lucene，隐藏复杂性，提供简单易用的restful api接口、java api接口（还有其他语言的api接口）。</p><p>​    关于elasticsearch的一个传说，有一个程序员失业了，陪着自己老婆去英国伦敦学习厨师课程。程序员在失业期间想给老婆写一个菜谱搜索引擎，觉得lucene实在太复杂了，就开发了一个封装了lucene的开源项目，compass。后来程序员找到了工作，是做分布式的高性能项目的，觉得compass不够，就写了elasticsearch，让lucene变成分布式的系统。</p><p>​    Elasticsearch是一个实时分布式搜索和分析引擎。它用于全文搜索、结构化搜索、分析。</p><h1 id="2、概念区分"><a href="#2、概念区分" class="headerlink" title="2、概念区分"></a>2、概念区分</h1><ol><li><p>近实时</p><p>近实时，两个意思，从写入数据到数据可以被搜索到有一个小延迟（大概1秒）；基于es执行搜索和分析可以达到秒级。</p></li><li><p>Cluster（集群）</p><p>集群包含多个节点，每个节点属于哪个集群是通过一个配置（集群名称，默认是elasticsearch）来决定的，对于中小型应用来说，刚开始一个集群就一个节点很正常。</p></li><li><p>Node（节点）</p><p>集群中的一个节点，节点也有一个名称（默认是随机分配的），节点名称很重要（在执行运维管理操作的时候），默认节点会去加入一个名称为“elasticsearch”的集群，如果直接启动一堆节点，那么它们会自动组成一个elasticsearch集群，当然一个节点也可以组成一个elasticsearch集群。</p></li><li><p>Index（索引-数据库）</p><p>索引包含一堆有相似结构的文档数据，比如可以有一个客户索引，商品分类索引，订单索引，索引有一个名称。一个index包含很多document，一个index就代表了一类类似的或者相同的document。比如说建立一个product index，商品索引，里面可能就存放了所有的商品数据，所有的商品document。</p></li><li><p>Type（类型-表）</p><p>每个索引里都可以有一个或多个type，type是index中的一个逻辑数据分类，一个type下的document，都有相同的field，比如博客系统，有一个索引，可以定义用户数据type，博客数据type，评论数据type。</p></li><li><p>Document（文档-行）</p><p>文档是es中的最小数据单元，一个document可以是一条客户数据，一条商品分类数据，一条订单数据，通常用JSON数据结构表示，每个index下的type中，都可以去存储多个document。</p></li><li><p>Field（字段-列）</p><p>Field是Elasticsearch的最小单位。一个document里面有多个field，每个field就是一个数据字段</p></li><li><p>mapping（映射-约束）</p><p>数据如何存放到索引对象上，需要有一个映射配置，包括：数据类型、是否存储、是否分词等。</p></li></ol><p><strong>elasticsearch与数据库的类比:</strong></p><table><thead><tr><th style="text-align:center">关系型数据库（比如Mysql）</th><th style="text-align:center">非关系型数据库（Elasticsearch）</th></tr></thead><tbody><tr><td style="text-align:center">数据库Database</td><td style="text-align:center">索引Index</td></tr><tr><td style="text-align:center">表Table</td><td style="text-align:center">类型Type</td></tr><tr><td style="text-align:center">数据行Row</td><td style="text-align:center">文档Document</td></tr><tr><td style="text-align:center">数据列Column</td><td style="text-align:center">字段Field</td></tr><tr><td style="text-align:center">约束 Schema</td><td style="text-align:center">映射Mapping</td></tr></tbody></table><h1 id="3、存数据和搜索机制"><a href="#3、存数据和搜索机制" class="headerlink" title="3、存数据和搜索机制"></a>3、存数据和搜索机制</h1><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/ES%E5%AD%98%E6%95%B0%E6%8D%AE%E5%92%8C%E6%90%9C%E7%B4%A2%E6%9C%BA%E5%88%B6.png" alt=""></p><h1 id="4、安装"><a href="#4、安装" class="headerlink" title="4、安装"></a>4、安装</h1><p><strong>单节点安装：</strong></p><ol><li><p>下载</p></li><li><p>解压</p></li><li><p>修改配置文件<code>elasticsearch.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># ---------------------------------- Cluster -------------------------------------</div><div class="line">cluster.name: my-application</div><div class="line"># ------------------------------------ Node --------------------------------------</div><div class="line">node.name: node-1</div><div class="line"># ----------------------------------- Paths ---------------------------------------</div><div class="line">path.data: /opt/modules/elasticsearch-5.6.1/data</div><div class="line">path.logs: /opt/modules/elasticsearch-5.6.1/logs</div><div class="line"># ----------------------------------- Memory -----------------------------------</div><div class="line">bootstrap.memory_lock: false</div><div class="line">bootstrap.system_call_filter: false</div><div class="line"># ---------------------------------- Network ------------------------------------</div><div class="line">network.host: 192.168.10.201 </div><div class="line"># --------------------------------- Discovery ------------------------------------</div><div class="line">discovery.zen.ping.unicast.hosts: [&quot;node01&quot;]</div></pre></td></tr></table></figure><p>注意事项：</p><ol><li>cluster.name</li></ol><p>如果要配置集群需要两个节点上的elasticsearch配置的cluster.name相同，都启动可以自动组成集群，这里如果不改cluster.name则默认是cluster.name=my-application，</p><ol><li>nodename随意取但是集群内的各节点不能相同</li><li>修改后的每行前面不能有空格，修改后的“：”后面必须有一个空格</li></ol></li><li><p>修改服务器相关配置</p><ol><li><p><code>/etc/security/limits.conf</code>中添加如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* soft nofile 65536</div><div class="line">* hard nofile 131072</div><div class="line">* soft nproc 4096</div><div class="line">* hard nproc 4096</div></pre></td></tr></table></figure></li><li><p><code>/etc/security/limits.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* soft nproc 4096</div></pre></td></tr></table></figure></li><li><p><code>/etc/sysctl.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vm.max_map_count=655360</div></pre></td></tr></table></figure><p>添加完后运行<code>sudo sysctl -p</code>查看是否生效</p></li></ol></li><li><p>安装web监控端</p><p>谷歌浏览器添加<code>elasticsearch-head.crx</code>即可</p></li><li><p>启动</p><p><code>bin/elasticsearch</code></p></li></ol><p><strong>集群安装：</strong></p><p>将安装包scp到其他机器</p><p>再在主节点配置中添加如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node.master: true</div><div class="line">node.data: true</div></pre></td></tr></table></figure><p>其他节点配置中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node.master: false</div><div class="line">node.data: true</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、概述&quot;&gt;&lt;a href=&quot;#1、概述&quot; class=&quot;headerlink&quot; title=&quot;1、概述&quot;&gt;&lt;/a&gt;1、概述&lt;/h1&gt;&lt;p&gt;​    Elasticsearch，基于lucene，隐藏复杂性，提供简单易用的restful api接口、java ap
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="rabbitluluu.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Kafka的API及其使用</title>
    <link href="rabbitluluu.github.io/2019/03/22/Kafka%E7%9A%84API%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/"/>
    <id>rabbitluluu.github.io/2019/03/22/Kafka的API及其使用/</id>
    <published>2019-03-22T02:45:13.000Z</published>
    <updated>2019-03-22T02:48:00.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、命令行操作"><a href="#1、命令行操作" class="headerlink" title="1、命令行操作"></a>1、命令行操作</h1><ol><li><p>查看当前集群中已存在的主题topic<br><code>bin/kafka-topics.sh --zookeeper node01:2181 --list</code></p></li><li><p>创建topic<br><code>bin/kafka-topics.sh --zookeeper node01:2181 --create --replication-factor 3 --partitions 1 --topic gakki</code></p><p>–zookeeper 连接zk集群<br>–create 创建<br>–replication-factor 副本<br>–partitions 分区<br>–topic 主题名</p></li><li><p>删除主题<br><code>bin/kafka-topics.sh --zookeeper node01:2181 --delete --topic gakki</code></p></li><li><p>发送消息<br>生产者启动：<br><code>bin/kafka-console-producer.sh --broker-list node01:9092 --topic gakki</code><br>消费者启动：<br><code>bin/kafka-console-consumer.sh --bootstrap-server node01:9092 --topic gakki --from-beginning</code><br>5）查看主题详细信息<br><code>bin/kafka-topics.sh --zookeeper node01:2181 --describe --topic gakki</code></p></li></ol><h1 id="2、API操作"><a href="#2、API操作" class="headerlink" title="2、API操作"></a>2、API操作</h1><h2 id="2-1、Producer"><a href="#2-1、Producer" class="headerlink" title="2.1、Producer"></a>2.1、Producer</h2><p>写法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xyz.llsean.kafka_producer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</div><div class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span>: Sean</div><div class="line"> * <span class="doctag">@date</span>: 2019/3/18/10:13</div><div class="line"> * <span class="doctag">@version</span>: 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.配置生产者属性（指定多个参数）</span></div><div class="line">        Properties prpo = <span class="keyword">new</span> Properties();</div><div class="line"></div><div class="line">        <span class="comment">//参数配置</span></div><div class="line">        <span class="comment">//kafka节点的地址</span></div><div class="line">        prpo.put(<span class="string">"bootstrap.servers"</span>,<span class="string">"node01:9092"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 可选项</div><div class="line">         * */</div><div class="line">        <span class="comment">//发送消息是否等待应答</span></div><div class="line">        prpo.put(<span class="string">"acks"</span>,<span class="string">"all"</span>);</div><div class="line">        <span class="comment">//配置发送消息失败重试</span></div><div class="line">        prpo.put(<span class="string">"retries"</span>,<span class="string">"0"</span>);</div><div class="line">        <span class="comment">//配置批量处理消息大小</span></div><div class="line">        prpo.put(<span class="string">"batch.size"</span>,<span class="string">"10241"</span>);</div><div class="line">        <span class="comment">//配置批量处理数据延迟--ms</span></div><div class="line">        prpo.put(<span class="string">"linger.ms"</span>,<span class="string">"5"</span>);</div><div class="line">        <span class="comment">//配置内存缓冲大小</span></div><div class="line">        prpo.put(<span class="string">"buffer.memory"</span>,<span class="string">"123412"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//消息在发送前必须序列化</span></div><div class="line">        prpo.put(<span class="string">"key.serializer"</span>,<span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</div><div class="line">        prpo.put(<span class="string">"value.serializer"</span>,<span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//2.实例化producer</span></div><div class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(prpo);</div><div class="line"></div><div class="line">        <span class="comment">//3.发送消息</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">99</span>; i++) &#123;</div><div class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">"jojo"</span>,<span class="string">"sean's love"</span> + i));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//4.释放资源</span></div><div class="line">        producer.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>写法二：</p><p>接口回调，可以在idea控制台直接看到运行信息，便于管理者查看任务运行的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xyz.llsean.kafka_producer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.Callback;</div><div class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</div><div class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</div><div class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.RecordMetadata;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span>: Sean</div><div class="line"> * <span class="doctag">@date</span>: 2019/3/18/10:13</div><div class="line"> * <span class="doctag">@version</span>: 1.0</div><div class="line"> * 接口回调--用来监控当前的运行状态</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.配置生产者属性（指定多个参数）</span></div><div class="line">        Properties prpo = <span class="keyword">new</span> Properties();</div><div class="line"></div><div class="line">        <span class="comment">//参数配置</span></div><div class="line">        <span class="comment">//kafka节点的地址</span></div><div class="line">        prpo.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"node01:9092"</span>);</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 可选项</div><div class="line">         * */</div><div class="line">        <span class="comment">//发送消息是否等待应答</span></div><div class="line">        prpo.put(<span class="string">"acks"</span>, <span class="string">"all"</span>);</div><div class="line">        <span class="comment">//配置发送消息失败重试</span></div><div class="line">        prpo.put(<span class="string">"retries"</span>, <span class="string">"0"</span>);</div><div class="line">        <span class="comment">//配置批量处理消息大小</span></div><div class="line">        prpo.put(<span class="string">"batch.size"</span>, <span class="string">"10241"</span>);</div><div class="line">        <span class="comment">//配置批量处理数据延迟--ms</span></div><div class="line">        prpo.put(<span class="string">"linger.ms"</span>, <span class="string">"5"</span>);</div><div class="line">        <span class="comment">//配置内存缓冲大小</span></div><div class="line">        prpo.put(<span class="string">"buffer.memory"</span>, <span class="string">"123412"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//消息在发送前必须序列化</span></div><div class="line">        prpo.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</div><div class="line">        prpo.put(<span class="string">"value.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</div><div class="line">        <span class="comment">//加载分区逻辑</span></div><div class="line">        <span class="comment">//prpo.put("partitioner.class","xyz.llsean.kafka_producer.Partition");</span></div><div class="line"></div><div class="line">        <span class="comment">//2.实例化producer</span></div><div class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(prpo);</div><div class="line"></div><div class="line">        <span class="comment">//3.发送消息</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">99</span>; i++) &#123;</div><div class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">"llsean"</span>, <span class="string">"sean's love emmm"</span> + i),</div><div class="line">                    <span class="keyword">new</span> Callback() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata metadata, Exception e)</span> </span>&#123;</div><div class="line">                            <span class="comment">//如果有metadata不为null 拿到当前的数据偏移量和分区</span></div><div class="line">                            <span class="keyword">if</span> (metadata != <span class="keyword">null</span>) &#123;</div><div class="line">                                System.out.println(metadata.topic() + <span class="string">"-----"</span> +</div><div class="line">                                        metadata.offset() + <span class="string">"-----"</span> + metadata.partition());</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//4.释放资源</span></div><div class="line">        producer.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>设置加载自定义分区：</p><p>实现Partitioner接口，重写方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xyz.llsean.kafka_producer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.Partitioner;</div><div class="line"><span class="keyword">import</span> org.apache.kafka.common.Cluster;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span>: Sean</div><div class="line"> * <span class="doctag">@date</span>: 2019/3/18/10:56</div><div class="line"> * <span class="doctag">@version</span>: 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Partition</span> <span class="keyword">implements</span> <span class="title">Partitioner</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//设置</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; map)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//分区逻辑</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String s, Object o, <span class="keyword">byte</span>[] bytes, Object o1, <span class="keyword">byte</span>[] bytes1, Cluster cluster)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//释放资源</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-2、Consumer"><a href="#2-2、Consumer" class="headerlink" title="2.2、Consumer"></a>2.2、Consumer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xyz.llsean.kafka_consumer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</div><div class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</div><div class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span>: Sean</div><div class="line"> * <span class="doctag">@date</span>: 2019/3/18/11:16</div><div class="line"> * <span class="doctag">@version</span>: 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//1.配置消费者属性</span></div><div class="line">        Properties prpo = <span class="keyword">new</span> Properties();</div><div class="line"></div><div class="line">        <span class="comment">//配置属性</span></div><div class="line">        <span class="comment">//服务器地址</span></div><div class="line">        prpo.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"node01:9092"</span>);</div><div class="line">        <span class="comment">//配置消费者组</span></div><div class="line">        prpo.put(<span class="string">"group.id"</span>,<span class="string">"g1"</span>);</div><div class="line">        <span class="comment">//配置是否自动确认offset</span></div><div class="line">        prpo.put(<span class="string">"enable.auto.commit"</span>,<span class="string">"true"</span>);</div><div class="line">        <span class="comment">//序列化和反序列化</span></div><div class="line">        prpo.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</div><div class="line">        prpo.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//2.实例化消费者</span></div><div class="line">        <span class="keyword">final</span> KafkaConsumer consumer = <span class="keyword">new</span> KafkaConsumer&lt;String,String&gt;(prpo);</div><div class="line"></div><div class="line">        <span class="comment">//4.释放资源</span></div><div class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (consumer != <span class="keyword">null</span>)&#123;</div><div class="line">                    consumer.close();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;));</div><div class="line"></div><div class="line">        <span class="comment">//订阅消息主题</span></div><div class="line">        consumer.subscribe(Arrays.asList(<span class="string">"jojo"</span>));</div><div class="line"></div><div class="line">        <span class="comment">//3.拉取消息</span></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">            ConsumerRecords&lt;String,String&gt; record = consumer.poll(<span class="number">500</span>);</div><div class="line">            <span class="comment">//遍历消息</span></div><div class="line">            <span class="keyword">for</span>(ConsumerRecord&lt;String,String&gt; c:record)&#123;</div><div class="line">                System.out.println(c.topic()+<span class="string">"---"</span>+c.value());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、命令行操作&quot;&gt;&lt;a href=&quot;#1、命令行操作&quot; class=&quot;headerlink&quot; title=&quot;1、命令行操作&quot;&gt;&lt;/a&gt;1、命令行操作&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看当前集群中已存在的主题topic&lt;br&gt;&lt;code&gt;bin/kafka-top
      
    
    </summary>
    
    
      <category term="Kafka" scheme="rabbitluluu.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka概述和安装</title>
    <link href="rabbitluluu.github.io/2019/03/22/kafka%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/"/>
    <id>rabbitluluu.github.io/2019/03/22/kafka概述和安装/</id>
    <published>2019-03-22T02:45:02.000Z</published>
    <updated>2019-03-22T02:48:25.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、kafka概述"><a href="#1、kafka概述" class="headerlink" title="1、kafka概述"></a>1、kafka概述</h1><h2 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h2><p>官网：<br><a href="http://kafka.apache.org/" target="_blank" rel="external">http://kafka.apache.org/</a><br>ApacheKafka®是一个分布式流媒体平台<br>流媒体平台有三个关键功能：</p><ul><li>发布和订阅记录流，类似于消息队列或企业消息传递系统。</li><li>以容错的持久方式存储记录流。</li><li>记录发生时处理流</li></ul><p>Kafka通常用于两大类应用：</p><ul><li>构建可在系统或应用程序之间可靠获取数据的实时流数据管道</li><li>构建转换或响应数据流的实时流应用程序</li></ul><p>在流计算中，kafka主要功能是用来缓存数据，storm可以通过消费kafka中的数据进行流计算。<br>是一套开源的消息系统，由scala写成。支持javaAPI的。<br>kafka最初由LinkedIn公司开发，2011年开源。<br>是一个<strong>分布式消息队列</strong>，kafka读消息保存采用Topic进行归类。</p><h2 id="1-2、角色组成"><a href="#1-2、角色组成" class="headerlink" title="1.2、角色组成"></a>1.2、角色组成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">发送消息：Producer(生产者)</div><div class="line">接收消息：Consumer(消费者)</div></pre></td></tr></table></figure><h2 id="1-3、作用"><a href="#1-3、作用" class="headerlink" title="1.3、作用"></a>1.3、作用</h2><ul><li>解耦<br>为了避免出现问题，一个组件专业做一件事</li><li>拓展性<br>可增加处理过程</li><li>灵活<br>面对访问量剧增，不会因为超负荷请求而完全瘫痪。</li><li>可恢复<br>一部分组件失效，不会影响整个系统。可以进行恢复。</li><li>缓冲<br>控制数据流经过系统的速度。</li><li>顺序保证<br>对消息进行有序处理。</li><li>异步通信<br>akka,消息队列提供了异步处理的机制。允许用户把消息放到队列，不立刻处理。</li></ul><h1 id="2、架构"><a href="#2、架构" class="headerlink" title="2、架构"></a>2、架构</h1><h1 id="3、安装部署"><a href="#3、安装部署" class="headerlink" title="3、安装部署"></a>3、安装部署</h1><p>提前准备：搭建kafka集群要先搭建zookeeper集群</p><ol><li><p>官网下载安装包</p></li><li><p>上传安装包</p></li><li><p>解压安装包</p></li><li><p>重命名</p></li><li><p>修改配置文件<br><code>config/server.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">broker.id=0 #每台机器的id不同即可</div><div class="line">delete.topic.enable=true #是否允许删除主题</div><div class="line">log.dirs=/root/hd/kafka/logs #运行日志保存位置</div><div class="line">zookeeper.connect=hd09-01:2181,hd09-02:2181,</div></pre></td></tr></table></figure></li><li><p>启动集群<br><code>bin/kafka-server-start.sh config/server.properties &amp;</code></p></li><li><p>关闭<br><code>bin/kafka-server-stop.sh</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、kafka概述&quot;&gt;&lt;a href=&quot;#1、kafka概述&quot; class=&quot;headerlink&quot; title=&quot;1、kafka概述&quot;&gt;&lt;/a&gt;1、kafka概述&lt;/h1&gt;&lt;h2 id=&quot;1-1、概述&quot;&gt;&lt;a href=&quot;#1-1、概述&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="kafka" scheme="rabbitluluu.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Hbase调优</title>
    <link href="rabbitluluu.github.io/2019/03/22/Hbase%E8%B0%83%E4%BC%98/"/>
    <id>rabbitluluu.github.io/2019/03/22/Hbase调优/</id>
    <published>2019-03-22T02:44:48.000Z</published>
    <updated>2019-03-22T02:47:33.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hbase优化技巧"><a href="#Hbase优化技巧" class="headerlink" title="Hbase优化技巧"></a>Hbase优化技巧</h1><ol><li><p>预分区问题</p><p>region分片的原因，表十分大</p><p>region存储数据，如果有多个region，每个region负责维护一部分的rowkey{startrowkey，endrowkey}</p><p>分多少片？提前规划，有效提高hbase性能，进行存储数据前做好rowkey的预分区优化hbase</p><p>实际操作：</p><p>​    <code>create &#39;user_pp&#39;,&#39;info&#39;,partition&#39;,SPLITS =&gt;[&#39;201&#39;,&#39;202&#39;,&#39;203&#39;,&#39;204&#39;]</code></p><p>添加上列族名，便于添加数据，下者同理</p><p>提前将分区信息写入文件，</p><p>​    <code>create &#39;user_ppp&#39;,&#39;partition&#39;,SPLITS_FILE=&gt;&#39;/root/temp/partitions.txt&#39;</code></p></li></ol><ol><li><p>rowkey如何设计？</p><p>rowkey是数据的唯一标识，这条数据存储在哪个分区由预分区范围决定</p><p>合理设计rowkey：一份数据分为5个region存储，但是我们需要尽可能的保证每个region中数据量差不多</p><p>尽可能的打散数据，平均分配到每个region中即可</p><p>解决方案：</p><p>​    生成随机数、Hash/散列值、字符串拼接/反转</p><p>如：原来的rowkey是201，hash后104526607，</p><p>​                    202，hash后104526606，</p><p>​    字符串拼接：20190316_dsa1  20190316_gdss</p><p>​    字符串反转：20190316-&gt;61309102</p></li></ol><ol><li><p>hbase基础优化</p><p>因为hbase用的hdfs存储，datanode允许最大文件打开数，默认是4096，将其<strong>调大</strong>，修改<code>hdfs-site.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dfs.datanode.max.transfer.threads</div></pre></td></tr></table></figure><p>优化等待时间,默认60000毫秒，将数值<strong>调大</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dfs.image.transfer.timeout</div></pre></td></tr></table></figure><p>内存优化：修改<code>hadoop-env.sh</code>设置内存的堆大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export HADOOP_PORTMAP_OPTS=&apos;-Xmx512m $HADOOP_PORTMAP_OPTS&apos;</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hbase优化技巧&quot;&gt;&lt;a href=&quot;#Hbase优化技巧&quot; class=&quot;headerlink&quot; title=&quot;Hbase优化技巧&quot;&gt;&lt;/a&gt;Hbase优化技巧&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;预分区问题&lt;/p&gt;
&lt;p&gt;region分片的原因，表十分大&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Hbase" scheme="rabbitluluu.github.io/tags/Hbase/"/>
    
  </entry>
  
  <entry>
    <title>Hbase的API和MR实例</title>
    <link href="rabbitluluu.github.io/2019/03/22/Hbase%E7%9A%84API%E5%92%8CMR%E5%AE%9E%E4%BE%8B/"/>
    <id>rabbitluluu.github.io/2019/03/22/Hbase的API和MR实例/</id>
    <published>2019-03-22T02:44:34.000Z</published>
    <updated>2019-03-22T02:47:12.659Z</updated>
    
    <content type="html"><![CDATA[<p>package xyz.llsean.HbaseMR2_;</p><p>import org.apache.hadoop.conf.Configuration;<br>import org.apache.hadoop.fs.Path;<br>import org.apache.hadoop.hbase.HBaseConfiguration;<br>import org.apache.hadoop.hbase.client.Put;<br>import org.apache.hadoop.hbase.io.ImmutableBytesWritable;<br>import org.apache.hadoop.hbase.mapreduce.TableMapReduceUtil;<br>import org.apache.hadoop.mapreduce.Job;<br>import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br>import org.apache.hadoop.util.Tool;<br>import org.apache.hadoop.util.ToolRunner;</p><p>/**</p><ul><li>@author: Sean</li><li>@date: 2019/3/17/9:54</li><li><p>@version: 1.0<br> */<br> public class ReadHdfsDriver implements Tool{<br> private Configuration conf;</p><p> @Override<br> public void setConf(Configuration conf) {</p><pre><code>this.conf = HBaseConfiguration.create(conf);</code></pre><p> }</p><p> @Override<br> public Configuration getConf() {</p><pre><code>return this.conf;</code></pre><p> }</p><p> @Override<br> public int run(String[] args) throws Exception {</p><pre><code>//1.创建jobJob job = Job.getInstance(conf);job.setJarByClass(ReadHdfsDriver.class);//2.设置Mapperjob.setMapperClass(ReadHdfsMapper_.class);job.setMapOutputKeyClass(ImmutableBytesWritable.class);job.setMapOutputValueClass(Put.class);//3.设置ReducerTableMapReduceUtil.initTableReducerJob(&quot;user_hdfs&quot;,        WriterHdfsReducer_.class,        job);//4.输入配置FileInputFormat.addInputPath(job,new Path(&quot;/temp/love.txt&quot;));boolean rs = job.waitForCompletion(true);return rs?0:1;</code></pre><p> }</p><p> public static void main(String[] args) {</p><pre><code>try {    int run = ToolRunner.run(new ReadHdfsDriver(), args);    System.exit(run);} catch (Exception e) {    e.printStackTrace();}</code></pre><p> }<br> }</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;package xyz.llsean.HbaseMR2_;&lt;/p&gt;
&lt;p&gt;import org.apache.hadoop.conf.Configuration;&lt;br&gt;import org.apache.hadoop.fs.Path;&lt;br&gt;import org.apac
      
    
    </summary>
    
    
      <category term="Hbase" scheme="rabbitluluu.github.io/tags/Hbase/"/>
    
  </entry>
  
  <entry>
    <title>Hbase的Shell操作以及读写过程解析</title>
    <link href="rabbitluluu.github.io/2019/03/15/Hbase%E7%9A%84Shell%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E8%AF%BB%E5%86%99%E8%BF%87%E7%A8%8B%E8%A7%A3%E6%9E%90/"/>
    <id>rabbitluluu.github.io/2019/03/15/Hbase的Shell操作以及读写过程解析/</id>
    <published>2019-03-15T04:50:15.000Z</published>
    <updated>2019-03-15T04:50:50.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、基本操作"><a href="#1、基本操作" class="headerlink" title="1、基本操作"></a>1、基本操作</h1><ol><li><p>启动终端</p><p><code>bin/hbase shell</code></p></li><li><p>显示所有表</p><p><code>list</code></p></li><li><p>显示命令介绍</p><p><code>help</code></p></li><li><p>显示当前的服务器状态</p><p><code>status &#39;node01&#39;</code></p><p><code>1 active master, 0 backup masters, 4 servers, 0 dead, 0.5000 average load</code></p><p>1 active master：一个存活的master</p><p>0 backup masters：0个备份master</p><p>4 servers：4个regionserver</p><p>0 dead：0个宕机</p><p>0.5000 average load：平均加载</p></li><li><p>显示当前用户</p><p><code>whoami</code></p></li><li><p>创建表</p><p><code>create &#39;user&#39;,&#39;info1&#39;,&#39;info2&#39;</code></p></li><li><p>全表扫描</p><p><code>scan &#39;user&#39;</code></p></li><li><p>存入数据(put ‘表名’，’Rowkey’，’列族:列名’，’值’)</p><p><code>put &#39;user&#39;,&#39;1001&#39;,&#39;info1:name&#39;,&#39;sean&#39;</code></p><p><code>put &#39;user&#39;,&#39;1001&#39;,&#39;info1:age&#39;,&#39;22&#39;</code></p></li><li><p>覆盖(hbase中无修改)</p><p><code>put &#39;user&#39;,&#39;1001&#39;,&#39;info2:id&#39;,&#39;112&#39;</code></p><p>一步一步深入，对应上表名，Rowkey，列族，列即可</p></li><li><p>查看表结构</p><p><code>describe &#39;user&#39;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Table user is ENABLED                                                                   </div><div class="line">user                                                                                             </div><div class="line">COLUMN FAMILIES DESCRIPTION                                                                       </div><div class="line">&#123;NAME =&gt; &apos;info1&apos;, BLOOMFILTER =&gt; &apos;ROW&apos;, VERSIONS =&gt; &apos;1&apos;, IN_MEMORY =&gt; &apos;false&apos;, KEEP_DELETED_CELLS </div><div class="line">=&gt; &apos;FALSE&apos;, DATA_BLOCK_ENCODING =&gt; &apos;NONE&apos;, TTL =&gt; &apos;FOREVER&apos;, COMPRESSION =&gt; &apos;NONE&apos;, MIN_VERSIONS =</div><div class="line">&gt; &apos;0&apos;, BLOCKCACHE =&gt; &apos;true&apos;, BLOCKSIZE =&gt; &apos;65536&apos;, REPLICATION_SCOPE =&gt; &apos;0&apos;&#125;                      </div><div class="line">&#123;NAME =&gt; &apos;info2&apos;, BLOOMFILTER =&gt; &apos;ROW&apos;, VERSIONS =&gt; &apos;1&apos;, IN_MEMORY =&gt; &apos;false&apos;, KEEP_DELETED_CELLS </div><div class="line">=&gt; &apos;FALSE&apos;, DATA_BLOCK_ENCODING =&gt; &apos;NONE&apos;, TTL =&gt; &apos;FOREVER&apos;, COMPRESSION =&gt; &apos;NONE&apos;, MIN_VERSIONS =</div><div class="line">&gt; &apos;0&apos;, BLOCKCACHE =&gt; &apos;true&apos;, BLOCKSIZE =&gt; &apos;65536&apos;, REPLICATION_SCOPE =&gt; &apos;0&apos;&#125;                      </div><div class="line">2 row(s) in 0.1500 seconds</div></pre></td></tr></table></figure></li><li><p>变更表结构信息</p><p><code>alter &#39;user&#39;,{NAME =&gt; &#39;info1&#39;,VERSIONS =&gt; &#39;5&#39;}</code></p><p>需要指定列族，再指定到版本才能修改</p></li><li><p>过滤信息(get ‘表名’,’Rowkey’)</p><p><code>get &#39;user&#39;,&#39;1001&#39;</code></p><p><code>get &#39;user&#39;,&#39;1001&#39;,&#39;info2:id&#39;</code></p></li><li><p>清空数据</p><p><code>truncate &#39;user&#39;</code></p></li><li><p>删除表</p><p><code>drop &#39;user&#39;</code></p><p>但是返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ERROR: Table user is enabled. Disable it first.</div><div class="line"></div><div class="line">Here is some help for this command:</div><div class="line">Drop the named table. Table must first be disabled:</div><div class="line">  hbase&gt; drop &apos;t1&apos;</div><div class="line">  hbase&gt; drop &apos;ns1:t1&apos;</div></pre></td></tr></table></figure><p>正确步骤为：</p><p><code>disable &#39;user&#39;</code>：指定表不可用</p><p><code>drop &#39;user&#39;</code>：删除</p></li><li><p>扫描指定rowkey范围</p><p><code>scan &#39;user&#39;,{STARTROW=&gt;&#39;2202&#39;}</code></p><p>含头不含尾:</p><p><code>scan &#39;user&#39;,{STARTROW=&gt;&#39;2202&#39;,STOPROW=&gt;&#39;2202&#39;}</code></p></li><li><p>统计行数</p><p><code>count &#39;user&#39;</code></p></li></ol><h1 id="2、文件读写具体流程"><a href="#2、文件读写具体流程" class="headerlink" title="2、文件读写具体流程"></a>2、文件读写具体流程</h1><p>客户端访问zk,返回root表元数据位置，根据元数据信息去查找对应regionserver，根据root表去查找到META表，再根据meta表元数据查找region，返回元数据给客户端</p><h2 id="2-1、Hbase读取数据-总体"><a href="#2-1、Hbase读取数据-总体" class="headerlink" title="2.1、Hbase读取数据(总体)"></a>2.1、Hbase读取数据(总体)</h2><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/Hbase%E8%AF%BB%E5%8F%96%E6%B5%81%E7%A8%8B%EF%BC%88%E6%80%BB%E4%BD%93%EF%BC%89.png" alt="流程"></p><p>过程梳理：</p><ol><li>客户端访问zk，发出请求</li><li>zk返回-ROOT表位置元数据信息</li><li>根据zk返回信息找到具体的HRegionserver，获取到-ROOT表</li><li>根据-ROOT表元数据信息找到.META表</li><li>根据.META表中存储的Region元数据信息找到具体的Region</li><li>返回所需要读取的信息</li></ol><h2 id="2-2、Hbase读取数据-局部"><a href="#2-2、Hbase读取数据-局部" class="headerlink" title="2.2、Hbase读取数据(局部)"></a>2.2、Hbase读取数据(局部)</h2><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/Hbase%E5%85%B7%E4%BD%93%E8%AF%BB%E5%8F%96%E6%B5%81%E7%A8%8B.png" alt="Hbase读取数据(局部)"></p><p>过程梳理：</p><ol><li>client从memstore中读取数据</li><li>如果所需要的数据恰好在memstore中，那么直接返回到客户端</li><li>memstore没有找到则会在blockcache中查找</li><li>倘若blockcache中还没找到，那么将通过hdfs客户端对Hfile进行查找</li><li>将读取到的数据缓存到blockcache并返回</li><li>数据返回客户端</li></ol><h2 id="2-3、Hbase写数据过程"><a href="#2-3、Hbase写数据过程" class="headerlink" title="2.3、Hbase写数据过程"></a>2.3、Hbase写数据过程</h2><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/Hbase%E5%86%99%E6%95%B0%E6%8D%AE%E8%BF%87%E7%A8%8B.png" alt="写数据过程"></p><p>过程梳理：</p><ol><li>发出请求给zk</li><li>返回元数据信息</li><li>查找到对应的RegionServer(此处省略掉-ROOT，.META的嵌套查询过程)</li><li>找到对应的Region，同时将操作写入到Hlog</li><li>将数据写入到memstore中</li><li>满后溢写数据到StoreFile中，生成Hfile</li><li>hdfs客户端将Hfile写入到集群</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、基本操作&quot;&gt;&lt;a href=&quot;#1、基本操作&quot; class=&quot;headerlink&quot; title=&quot;1、基本操作&quot;&gt;&lt;/a&gt;1、基本操作&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;启动终端&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bin/hbase shell&lt;/code&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Hbase" scheme="rabbitluluu.github.io/tags/Hbase/"/>
    
  </entry>
  
  <entry>
    <title>Hbase概述和部署</title>
    <link href="rabbitluluu.github.io/2019/03/14/Hbase%E6%A6%82%E8%BF%B0%E5%92%8C%E9%83%A8%E7%BD%B2/"/>
    <id>rabbitluluu.github.io/2019/03/14/Hbase概述和部署/</id>
    <published>2019-03-14T09:27:57.000Z</published>
    <updated>2019-03-14T09:28:35.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h1><p><a href="http://www.apache.org/" target="_blank" rel="external">Apache</a> HBase™是<a href="http://hadoop.apache.org/" target="_blank" rel="external">Hadoop</a>数据库，是一个分布式，可扩展的大数据存储。</p><p>​    当需要对大数据进行随机，实时读/写访问时，请使用Apache HBase™。该项目的目标是托管非常大的表 - 数十亿行X百万列 - 在商品硬件集群上。Apache HBase是一个开源的，分布式的，版本化的非关系数据库，模仿Google的<a href="http://research.google.com/archive/bigtable.html" target="_blank" rel="external">Bigtable：</a> Chang等人的<a href="http://research.google.com/archive/bigtable.html" target="_blank" rel="external">结构化数据分布式存储系统</a>。正如Bigtable利用Google文件系统提供的分布式数据存储一样，Apache HBase在Hadoop和HDFS之上提供类似Bigtable的功能。</p><h1 id="2、集群角色"><a href="#2、集群角色" class="headerlink" title="2、集群角色"></a>2、集群角色</h1><p>hdfs：Namenode + DataNode</p><p>yarn：ResourceManager + NodeManger</p><p>hbase：HMaser + Regionserver</p><p>HMaser作用：</p><ul><li>对Regionserver监控</li><li>处理一些元数据的变更</li><li>对Regionserver进行故障转移</li><li>空闲时对数据进行负载均衡</li><li>对region进行管理</li><li>发布位置到客户端</li></ul><p>Regionserver作用：</p><ul><li>存储hbase的实际数据</li><li>刷新缓存数据到hdfs</li><li>处理Region</li><li>可以进行压缩</li><li>对Hlog进行维护</li><li>对region进行分片</li></ul><h1 id="3、集群安装"><a href="#3、集群安装" class="headerlink" title="3、集群安装"></a>3、集群安装</h1><ol><li><p>安装好zookeeper集群</p></li><li><p>安装好hadoop集群</p></li><li><p>解压，修改配置<code>hbase-env.sh</code> 和 <code>hbase-site.xml</code></p><p>hbase-env.sh:</p><p>export JAVA_HOME=/opt/modules/jdk1.8.0_141</p><p>export HBASE_MANAGES_ZK=false</p><p>hbase-site.xml:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">   &lt;property&gt;</div><div class="line">&lt;name&gt;hbase.rootdir&lt;/name&gt;</div><div class="line">&lt;value&gt;hdfs://node01:9000/hbase&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">   </div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</div><div class="line">&lt;value&gt;true&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">   </div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;hbase.master.port&lt;/name&gt;</div><div class="line">&lt;value&gt;16000&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">   </div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</div><div class="line">&lt;value&gt;node01:2181,node02:2181,node03:2181,node04:2181&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">   </div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</div><div class="line">&lt;value&gt;/opt/modules/zookeeper-3.4.10/zkData&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure><ol><li>拷贝core-site.xml 和 hdfs-site.xml 到conf下，或者制作软连接<br><code>ln -s /opt/modules/hadoop-2.8.4/etc/hadoop/core-site.xml</code></li></ol><p>​       <code>ln -s /opt/modules/hadoop-2.8.4/etc/hadoop/hdfs-site.xml</code></p><ol><li><p>拷贝安装包到其他机器</p></li><li><p>启动测试：</p><p>​    启动Hmaster：bin/hbase-daemon.sh start master</p><p>​    启动Regionserver：bin/hbase-daemon.sh start regionserver</p><p>操作后查看进程出现hmaster和regionserver，且在webUI（端口16010）中可以查看到节点即配置成功</p><font color="red">特别注意：hmaster启动指令中不叫Hmaster！！！！！！</font></li></ol><h1 id="4、集群架构解析"><a href="#4、集群架构解析" class="headerlink" title="4、集群架构解析"></a>4、集群架构解析</h1><p>架构图：</p><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/%E5%9B%BE%E7%89%872%EF%BC%9AHbase%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="hbase架构"></p></li></ol><p>名词解释：</p><p>​    HLog：预写入日志，记录hbase修改记录，倘若系统故障，可以通过log文件进行重建，进行数据恢复。</p><p>​    HRegion：表的分片，根据Rowkey（行键）进行划分</p><p>​    Store：一个store对应hbase中的一个列族</p><p>​    StoreFile和HFile：HFile是真正的物理存储文件，StoreFile是逻辑概念</p><p>​    MemStore：接受来自HLog的数据，相当于内存，满了之后数据存到HFile，可以有效的提高查询效率</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、概述&quot;&gt;&lt;a href=&quot;#1、概述&quot; class=&quot;headerlink&quot; title=&quot;1、概述&quot;&gt;&lt;/a&gt;1、概述&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external
      
    
    </summary>
    
    
      <category term="Hbase" scheme="rabbitluluu.github.io/tags/Hbase/"/>
    
  </entry>
  
  <entry>
    <title>Azkaban概述和使用</title>
    <link href="rabbitluluu.github.io/2019/03/13/Azkaban%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>rabbitluluu.github.io/2019/03/13/Azkaban概述和使用/</id>
    <published>2019-03-13T01:58:11.000Z</published>
    <updated>2019-03-13T02:09:22.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、-Azkaban概述"><a href="#1、-Azkaban概述" class="headerlink" title="1、 Azkaban概述"></a>1、 Azkaban概述</h1><p><strong>Azkaban</strong>是在LinkedIn上创建的批处理工作流作业调度程序，用于运行Hadoop作业。Azkaban通过作业<strong>依赖</strong>性解决订单，并提供易于使用的Web用户界面来维护和跟踪您的工作流程。</p><p>工作流作业：</p><p>flume-&gt;hdfs-&gt;mr-&gt;hive建表-&gt;导入load data脚本</p><p><strong>自动化</strong>调度</p><h1 id="2、-环境搭建"><a href="#2、-环境搭建" class="headerlink" title="2、 环境搭建"></a>2、 环境搭建</h1><ol><li>创建相关mysql库并导入脚本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">create database azkaban;</div><div class="line">use azkaban;</div><div class="line">source /root/hd/azkaban/azkaban-2.5.0/create-all-sql-2.5.0.sql;</div></pre></td></tr></table></figure><ol><li><p>生成证书</p><p><code>keytool -keystore keystore -alias jetty -genkey -keyalg RSA</code></p><p>牢记密码后续要用</p><p>并将其拷贝到server中</p></li><li><p>时间同步配置</p><p>开启发送指令到所有窗口，保证集群时间同步，任务调度，所以和本地时间保持一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo date -s &apos;当前时间&apos;</div><div class="line">hwclock -w</div></pre></td></tr></table></figure></li><li><p>修改server配置文件<code>azkaban.properties</code>和<code>azkaban-users.xml</code></p><p>前者修改mysql相关配置和时区</p><p>后者添加账户密码<code>&lt;user username=&quot;admin&quot; password=&quot;admin&quot; roles=&quot;admin,metrics&quot;/&gt;</code>权限为管理员</p></li><li><p>修改excutor端配置文件<code>azkaban.properties</code>时区设置和mysql相关配置</p></li></ol><h1 id="3、azkaban实例"><a href="#3、azkaban实例" class="headerlink" title="3、azkaban实例"></a>3、azkaban实例</h1><font color="red">注意1，启动时需在主目录下，否则会有如下错误</font><p><code>Exception in thread &quot;main&quot; java.io.FileNotFoundException: conf/global.properties (No such file or directory)</code></p><font color="red">注意2，打包只能打成zip包，否则会无法识别</font><font color="red">注意3，指令写一行，不换行</font><font color="red">注意4，脚本不识别环境变量，需要将其启动脚本的绝对路径写全</font><ol><li><p>实例1：启动yarn集群</p><p><code>type=commandcommand=/opt/modules/hadoop-2.8.4/sbin/start-yarn.sh</code></p></li><li><p>实例2：启动mr程序</p><p><code>type=commandcommand=/opt/modules/hadoop-2.8.4/bin/hadoop jar /opt/modules/hadoop-2.8.4/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.8.4.jar wordcount /input/wc /output/wc2</code></p></li><li><p>实例3：设置任务依赖</p><p><strong>job_a.job:</strong></p><p><code>type=commandcommand=echo &#39;gakki&#39;</code></p><p><strong>job_b.job:</strong></p><p><code>type=commanddependencies=job_a.jobcommand=echo &#39;is my love&#39;</code></p></li><li><p>实例4：创建hive表并从本地导入数据</p><p><strong>hive.sql：</strong></p><p><code>use default;create table azhive(id int, name string, int num) row format delimited fields terminated by &#39;\t&#39;;load data inpath &#39;/temp/dept.txt&#39; into table azhive;</code></p><p><strong>hive-f.job：</strong></p><p><code>type=commandcommand=//opt/modules/hive/bin/hive -f &quot;hive.sql&quot;</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、-Azkaban概述&quot;&gt;&lt;a href=&quot;#1、-Azkaban概述&quot; class=&quot;headerlink&quot; title=&quot;1、 Azkaban概述&quot;&gt;&lt;/a&gt;1、 Azkaban概述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Azkaban&lt;/strong&gt;是在Link
      
    
    </summary>
    
    
      <category term="Azkaban" scheme="rabbitluluu.github.io/tags/Azkaban/"/>
    
  </entry>
  
  <entry>
    <title>Sqoop概述和使用</title>
    <link href="rabbitluluu.github.io/2019/03/13/Sqoop%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>rabbitluluu.github.io/2019/03/13/Sqoop概述和使用/</id>
    <published>2019-03-13T01:57:57.000Z</published>
    <updated>2019-03-13T01:58:43.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、sqoop概述"><a href="#1、sqoop概述" class="headerlink" title="1、sqoop概述"></a>1、sqoop概述</h1><p>flume数据采集 采集日志数据</p><p>sqoop数据迁移 hdfs–&gt;mysql</p><p>azkaban任务调度</p><p>流程：flume–&gt;hdfs–&gt;shell–&gt;hive–&gt;sql–&gt;BI</p><p>sqoop数据迁移==mapreduce，处理离线数据</p><p>整个过程就是数据导入处理导出过程，直接使用map清洗</p><p>方法介绍：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">codegen            Generate code to interact with database records</div><div class="line">create-hive-table  Import a table definition into Hive</div><div class="line">eval               Evaluate a SQL statement and display the results</div><div class="line">export             Export an HDFS directory to a database table</div><div class="line">help               List available commands</div><div class="line">import             Import a table from a database to HDFS</div><div class="line">import-all-tables  Import tables from a database to HDFS</div><div class="line">import-mainframe   Import datasets from a mainframe server to HDFS</div><div class="line">job                Work with saved jobs</div><div class="line">list-databases     List available databases on a server</div><div class="line">list-tables        List available tables in a database</div><div class="line">merge              Merge results of incremental imports</div><div class="line">metastore          Run a standalone Sqoop metastore</div><div class="line">version            Display version information</div></pre></td></tr></table></figure><h1 id="2、-安装部署"><a href="#2、-安装部署" class="headerlink" title="2、 安装部署"></a>2、 安装部署</h1><ol><li><p>上传</p></li><li><p>下载</p></li><li><p>解压</p></li><li><p>重命名配置文件模板</p><p><code>mv sqoop-env-template.sh  sqoop-env.sh</code></p></li><li><p>修改配置文件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>Set path to where bin/hadoop is available</div><div class="line">set HADOOP_COMMON_HOME=</div><div class="line"><span class="meta"></span></div><div class="line">#Set path to where hadoop-*-core.jar is available</div><div class="line">set HADOOP_MAPRED_HOME=</div><div class="line"><span class="meta"></span></div><div class="line">#set the path to where bin/hbase is available</div><div class="line"><span class="meta">#</span>set HBASE_HOME=</div><div class="line"><span class="meta"></span></div><div class="line">#Set the path to where bin/hive is available</div><div class="line">set HIVE_HOME=</div><div class="line"><span class="meta"></span></div><div class="line">#Set the path for where zookeper config dir is</div><div class="line">set ZOOCFGDIR=</div></pre></td></tr></table></figure><h1 id="3、-指令使用"><a href="#3、-指令使用" class="headerlink" title="3、 指令使用"></a>3、 指令使用</h1><p>import带入：mysql–&gt;hdfs</p><p>export导出：hdfs–&gt;mysql</p><h2 id="3-1、使用示例1：从mysql导入hdfs"><a href="#3-1、使用示例1：从mysql导入hdfs" class="headerlink" title="3.1、使用示例1：从mysql导入hdfs"></a>3.1、使用示例1：从mysql导入hdfs</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">bin/sqoop import </div><div class="line">--connect jdbc:mysql://node01:3306/sqoop  //指定mysql地址和数据库名</div><div class="line">--username root   //指定用户名</div><div class="line">--password root   //指定密码</div><div class="line">--table emp   //指定表名</div><div class="line">--target-dir /sqoop/data   //指定hdfs路径</div><div class="line">--num-mappers 1   //启动的map个数</div><div class="line">--fields-terminated-by "\t"          //设置数据的切分格式</div></pre></td></tr></table></figure><h2 id="3-2-、使用示例2：使用query对数据进行过滤"><a href="#3-2-、使用示例2：使用query对数据进行过滤" class="headerlink" title="3.2 、使用示例2：使用query对数据进行过滤"></a>3.2 、使用示例2：使用query对数据进行过滤</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">bin/sqoop import </div><div class="line">--connect jdbc:mysql://node01:3306/sqoop </div><div class="line">--username root </div><div class="line">--password root </div><div class="line">--target-dir /sqoop/selectimport </div><div class="line">--num-mappers 1 </div><div class="line">--fields-terminated-by "\t" </div><div class="line">--query 'select * from emp where deptno &gt;= 20 and $CONDITIONS'</div></pre></td></tr></table></figure><p>检索deptno大于等于20的信息写入hdfs，此时运行一个map程序</p><p><code>$CONDITIONS</code>关键字起到索引作用，让map数据处理时不会重复</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">bin/sqoop import </div><div class="line">--connect jdbc:mysql://node01:3306/sqoop </div><div class="line">--username root --password root </div><div class="line">--target-dir /sqoop/selectimport </div><div class="line">--num-mappers 2 </div><div class="line">--fields-terminated-by "\t" </div><div class="line">--query 'select * from emp where deptno &gt;= 20 and $CONDITIONS' </div><div class="line">--split-by empno</div></pre></td></tr></table></figure><p>设置两个map程序，但需要指明按照哪一项进行切分–split-by </p><h2 id="3-3-、使用示例3：导入到hive"><a href="#3-3-、使用示例3：导入到hive" class="headerlink" title="3.3 、使用示例3：导入到hive"></a>3.3 、使用示例3：导入到hive</h2><font color="red">倘若遇到报错import failed错误，可以通过添加环境变量来解决</font><p>解决办法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:/opt/modules/hive/lib/*</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">bin/sqoop import </div><div class="line">--connect jdbc:mysql://node01:3306/sqoop </div><div class="line">--username root </div><div class="line">--password root </div><div class="line">--table user </div><div class="line">--num-mappers 1 </div><div class="line">--hive-import </div><div class="line">--fields-terminated-by "\t" </div><div class="line">--hive-overwrite </div><div class="line">--hive-table user_sqoop</div></pre></td></tr></table></figure><h2 id="3-4、-使用示例4：hive导出mysql"><a href="#3-4、-使用示例4：hive导出mysql" class="headerlink" title="3.4、 使用示例4：hive导出mysql"></a>3.4、 使用示例4：hive导出mysql</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">bin/sqoop export </div><div class="line">--connect jdbc:mysql://node01:3306/sqoop </div><div class="line">--username root</div><div class="line">--password root </div><div class="line">--table user </div><div class="line">--num-mappers 1 </div><div class="line">--export-dir /user/hive/warehouse/user_sqoop </div><div class="line">--input-fields-terminated-by "\t";</div></pre></td></tr></table></figure><p>常用参数：</p><p>import：导入数据到集群</p><p>export：从集群导出数据</p><p>create-hive-table：创建hive表</p><p>import-all-tables：导入所有库中表到hdfs集群</p><p>list-databases：列出所有数据库</p><p>list-tables：列出所有数据库表</p><p>merge：合并hdfs中的不同文件</p><p>codegen：获取某张表数据生成JavaBean并打包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">bin/sqoop codegen </div><div class="line">--connect jdbc:mysql://node01:3306/sqoop </div><div class="line">--username root </div><div class="line">--password root </div><div class="line">--table user </div><div class="line">--bindir /root/sqoopjar/userBean </div><div class="line">--class-name UserBean </div><div class="line">--fields-terminated-by "\t"</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bin/sqoop merge </div><div class="line">--new-data /testmerge/new </div><div class="line">--onto /testmerge/old </div><div class="line">--target-dir /testmerge/merged </div><div class="line">--jar-file /root/sqoopjar/userBean/UserBean.jar </div><div class="line">--class-name UserBean </div><div class="line">--merge-key id</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、sqoop概述&quot;&gt;&lt;a href=&quot;#1、sqoop概述&quot; class=&quot;headerlink&quot; title=&quot;1、sqoop概述&quot;&gt;&lt;/a&gt;1、sqoop概述&lt;/h1&gt;&lt;p&gt;flume数据采集 采集日志数据&lt;/p&gt;
&lt;p&gt;sqoop数据迁移 hdfs–&amp;gt
      
    
    </summary>
    
    
      <category term="Sqoop" scheme="rabbitluluu.github.io/tags/Sqoop/"/>
    
  </entry>
  
  <entry>
    <title>Flume安装及使用</title>
    <link href="rabbitluluu.github.io/2019/03/08/Flume%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>rabbitluluu.github.io/2019/03/08/Flume安装及使用/</id>
    <published>2019-03-08T10:10:14.000Z</published>
    <updated>2019-03-13T01:57:05.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h1><p>​    Flume是一种分布式，可靠且可用的服务，用于有效地收集，聚合和移动大量日<br>志数据。它具有基于流数据流的简单灵活的架构。它具有可靠的可靠性机制和许多故障<br>转移和恢复机制，具有强大的容错性。它使用简单的可扩展数据模型，允许在线分析应<br>用程序。</p><ol><li>数据采集（爬虫\日志数据\flume）</li><li>数据存储（hdfs/hive/hbase(nosql)）</li><li>数据计算（mapreduce/hive/sparkSQL/sparkStreaming/flink）</li><li>数据可视化(BI)</li></ol><h1 id="2、角色"><a href="#2、角色" class="headerlink" title="2、角色"></a>2、角色</h1><ol><li>source<br>数据源，用户采集数据，source产生数据流，同时会把产生的数据流传输到channel。</li><li>channel<br>传输通道，用于桥接source和sink</li><li>sink<br>下沉，用于收集channel传输的数据，将数据源传递到目标源</li><li>event<br>在flume中使用事件作为传输的基本单元</li></ol><p>图示：</p><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/DevGuide_image00.png" alt="架构"></p><h1 id="3、-安装"><a href="#3、-安装" class="headerlink" title="3、 安装"></a>3、 安装</h1><ol><li>下载</li><li>上传到linux</li><li>解压<br>tar -zxvf flume.jar</li><li>重命名<br>mv apache-flume-1.6.0-bin/ flume<br>mv flume-env.sh.template flume-env.sh</li><li>修改配置<br>vi flume-env.sh<br>export JAVA_HOME=/opt/modules/jdk1.8.0_141</li></ol><h1 id="4、使用案例"><a href="#4、使用案例" class="headerlink" title="4、使用案例"></a>4、使用案例</h1><h2 id="4-1、-官方案例：监听端口"><a href="#4-1、-官方案例：监听端口" class="headerlink" title="4.1、 官方案例：监听端口"></a>4.1、 官方案例：监听端口</h2><p>配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>smple.conf: A single-node Flume configuration</div><div class="line"><span class="meta"></span></div><div class="line"># Name the components on this agent 定义变量方便调用 加s可以有多个此角色</div><div class="line">a1.sources = r1</div><div class="line">a1.sinks = k1</div><div class="line">a1.channels = c1</div><div class="line"><span class="meta"></span></div><div class="line"># Describe/configure the source 描述source角色 进行内容定制</div><div class="line"><span class="meta">#</span> 此配置属于tcp source 必须是netcat类型</div><div class="line">a1.sources.r1.type = netcat </div><div class="line">a1.sources.r1.bind = localhost</div><div class="line">a1.sources.r1.port = 44444</div><div class="line"><span class="meta"></span></div><div class="line"># Describe the sink 输出日志文件</div><div class="line">a1.sinks.k1.type = logger</div><div class="line"><span class="meta"></span></div><div class="line"># Use a channel which buffers events in memory（file） 使用内存 总大小1000 每次传输100</div><div class="line">a1.channels.c1.type = memory</div><div class="line">a1.channels.c1.capacity = 1000</div><div class="line">a1.channels.c1.transactionCapacity = 100</div><div class="line"><span class="meta"></span></div><div class="line"># Bind the source and sink to the channel 一个source可以绑定多个channel </div><div class="line"><span class="meta">#</span> 一个sinks可以只能绑定一个channel  使用的是图二的模型</div><div class="line">a1.sources.r1.channels = c1</div><div class="line">a1.sinks.k1.channel = c1</div></pre></td></tr></table></figure><p>启动指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bin/flume-ng agent 使用ng启动agent</div><div class="line">--conf conf/ 指定配置所在的文件夹</div><div class="line">--name a1 指定的agent别名</div><div class="line">--conf-file conf/flumejob_telnet.conf 文件</div><div class="line">-Dflume.root.logger=INFO,console 日志级别</div></pre></td></tr></table></figure><h2 id="4-2、案例二：监控hive日志，实时同步到hdfs"><a href="#4-2、案例二：监控hive日志，实时同步到hdfs" class="headerlink" title="4.2、案例二：监控hive日志，实时同步到hdfs"></a>4.2、案例二：监控hive日志，实时同步到hdfs</h2><p>配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Name the components on this agent agent别名设置</div><div class="line">a1.sources = r1</div><div class="line">a1.sinks = k1</div><div class="line">a1.channels = c1</div><div class="line"><span class="meta"></span></div><div class="line"># Describe/configure the source  设置数据源监听本地文件配置</div><div class="line"><span class="meta">#</span> exec 执行一个命令的方式去查看文件 tail -F 实时查看</div><div class="line">a1.sources.r1.type = exec</div><div class="line"><span class="meta">#</span> 要执行的脚本command tail -F 默认10行 man tail  查看帮助</div><div class="line">a1.sources.r1.command = tail -F /tmp/root/hive.log</div><div class="line"><span class="meta">#</span> 执行这个command使用的是哪个脚本 -c 指定使用什么命令</div><div class="line"><span class="meta">#</span> whereis bash</div><div class="line"><span class="meta">#</span> bash: /usr/bin/bash /usr/share/man/man1/bash.1.gz </div><div class="line">a1.sources.r1.shell = /usr/bin/bash -c</div><div class="line"><span class="meta"></span></div><div class="line"># Describe the sink </div><div class="line">a1.sinks.k1.type = hdfs</div><div class="line">a1.sinks.k1.hdfs.path = hdfs://node01:9000/flume/%Y%m%d/%H</div><div class="line"><span class="meta">#</span>上传文件的前缀</div><div class="line">a1.sinks.k1.hdfs.filePrefix = logs-</div><div class="line"><span class="meta">#</span>是否按照时间滚动文件夹</div><div class="line">a1.sinks.k1.hdfs.round = true</div><div class="line"><span class="meta">#</span>多少时间单位创建一个新的文件夹  秒 （默认30s）</div><div class="line">a1.sinks.k1.hdfs.roundValue = 1</div><div class="line"><span class="meta">#</span>重新定义时间单位（每小时滚动一个文件夹）</div><div class="line">a1.sinks.k1.hdfs.roundUnit = minute</div><div class="line"><span class="meta">#</span>是否使用本地时间戳</div><div class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</div><div class="line"><span class="meta">#</span>积攒多少个 Event 才 flush 到 HDFS 一次</div><div class="line">a1.sinks.k1.hdfs.batchSize = 500</div><div class="line"><span class="meta">#</span>设置文件类型，可支持压缩</div><div class="line">a1.sinks.k1.hdfs.fileType = DataStream</div><div class="line"><span class="meta">#</span>多久生成一个新的文件 秒</div><div class="line">a1.sinks.k1.hdfs.rollInterval = 30</div><div class="line"><span class="meta">#</span>设置每个文件的滚动大小 字节（最好128M）</div><div class="line">a1.sinks.k1.hdfs.rollSize = 134217700</div><div class="line"><span class="meta">#</span>文件的滚动与 Event 数量无关</div><div class="line">a1.sinks.k1.hdfs.rollCount = 0</div><div class="line"><span class="meta">#</span>最小冗余数(备份数 生成滚动功能则生效roll hadoop本身有此功能 无需配置) 1份 不冗余</div><div class="line">a1.sinks.k1.hdfs.minBlockReplicas = 1</div><div class="line"><span class="meta"></span></div><div class="line"># Use a channel which buffers events in memory </div><div class="line">a1.channels.c1.type = memory </div><div class="line">a1.channels.c1.capacity = 1000</div><div class="line">a1.channels.c1.transactionCapacity = 100</div><div class="line"><span class="meta"></span></div><div class="line"># Bind the source and sink to the channel</div><div class="line">a1.sources.r1.channels = c1</div><div class="line">a1.sinks.k1.channel = c1</div></pre></td></tr></table></figure><p>启动指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bin/flume-ng agent </div><div class="line">--conf conf/ </div><div class="line">--name a1 </div><div class="line">--conf-file conf/flumejob_hdfs.conf</div></pre></td></tr></table></figure><h2 id="4-3、-案例三：flume监听文件夹"><a href="#4-3、-案例三：flume监听文件夹" class="headerlink" title="4.3、 案例三：flume监听文件夹"></a>4.3、 案例三：flume监听文件夹</h2><p>配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 定义别名</div><div class="line">a1.sources = r1</div><div class="line">a1.sinks = k1</div><div class="line">a1.channels = c1</div><div class="line"><span class="meta"></span></div><div class="line"># Describe/configure the source</div><div class="line">a1.sources.r1.type = spooldir</div><div class="line"><span class="meta">#</span> 监控的文件夹</div><div class="line">a1.sources.r1.spoolDir = /root/temp/testdir</div><div class="line"><span class="meta">#</span> 上传成功后显示后缀名 </div><div class="line">a1.sources.r1.fileSuffix = .COMPLETED</div><div class="line"><span class="meta">#</span> 如论如何 加绝对路径的文件名 默认false</div><div class="line">a1.sources.r1.fileHeader = true</div><div class="line"><span class="meta">#</span>忽略所有以.tmp 结尾的文件（正在被写入），不上传</div><div class="line"><span class="meta">#</span> ^以任何开头 出现无限次 以.tmp结尾的</div><div class="line">a1.sources.r1.ignorePattern = ([^ ]*\.tmp)</div><div class="line"><span class="meta"></span></div><div class="line"># Describe the sink 下沉到hdfs</div><div class="line">a1.sinks.k1.type = hdfs</div><div class="line">a1.sinks.k1.hdfs.path = hdfs://node01:9000/flume/testdir/%Y%m%d/%H</div><div class="line"><span class="meta">#</span>上传文件的前缀</div><div class="line">a1.sinks.k1.hdfs.filePrefix = testdir-</div><div class="line"><span class="meta">#</span>是否按照时间滚动文件夹</div><div class="line">a1.sinks.k1.hdfs.round = true</div><div class="line"><span class="meta">#</span>多少时间单位创建一个新的文件夹</div><div class="line">a1.sinks.k1.hdfs.roundValue = 1</div><div class="line"><span class="meta">#</span>重新定义时间单位</div><div class="line">a1.sinks.k1.hdfs.roundUnit = hour</div><div class="line"><span class="meta">#</span>是否使用本地时间戳</div><div class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</div><div class="line"><span class="meta">#</span>积攒多少个 Event 才 flush 到 HDFS 一次</div><div class="line">a1.sinks.k1.hdfs.batchSize = 100</div><div class="line"><span class="meta">#</span>设置文件类型，可支持压缩</div><div class="line">a1.sinks.k1.hdfs.fileType = DataStream</div><div class="line"><span class="meta">#</span>多久生成一个新的文件</div><div class="line">a1.sinks.k1.hdfs.rollInterval = 600</div><div class="line"><span class="meta">#</span>设置每个文件的滚动大小大概是 128M </div><div class="line">a1.sinks.k1.hdfs.rollSize = 134217700</div><div class="line"><span class="meta">#</span>文件的滚动与 Event 数量无关</div><div class="line">a1.sinks.k1.hdfs.rollCount = 0</div><div class="line"><span class="meta">#</span>最小副本数</div><div class="line">a1.sinks.k1.hdfs.minBlockReplicas = 1</div><div class="line"><span class="meta"></span></div><div class="line"># Use a channel which buffers events in memory </div><div class="line">a1.channels.c1.type = memory </div><div class="line">a1.channels.c1.capacity = 1000</div><div class="line">a1.channels.c1.transactionCapacity = 100</div><div class="line"><span class="meta"></span></div><div class="line"># Bind the source and sink to the channel</div><div class="line">a1.sources.r1.channels = c1 </div><div class="line">a1.sinks.k1.channel = c1</div></pre></td></tr></table></figure><p>启动指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bin/flume-ng agent </div><div class="line">--conf conf/ </div><div class="line">--name a1 </div><div class="line">--conf-file conf/flumejob_dir.conf</div></pre></td></tr></table></figure><h2 id="4-4、案例四：多sink情景，同时监听hive日志到hdfs和local"><a href="#4-4、案例四：多sink情景，同时监听hive日志到hdfs和local" class="headerlink" title="4.4、案例四：多sink情景，同时监听hive日志到hdfs和local"></a>4.4、案例四：多sink情景，同时监听hive日志到hdfs和local</h2><p><img src="https://raw.githubusercontent.com/rabbitluluu/pic_resource/master/%E5%A4%9Asink%E6%83%85%E6%99%AF.jpg" alt="情景"></p><p>配置文件flumejob_1.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> name the components on this agent 别名设置</div><div class="line">a1.sources = r1</div><div class="line">a1.sinks = k1 k2 </div><div class="line">a1.channels = c1 c2</div><div class="line"><span class="meta"></span></div><div class="line"># 将数据流复制给多个 channel</div><div class="line">a1.sources.r1.selector.type = replicating</div><div class="line"><span class="meta"></span></div><div class="line"># Describe/configure the source </div><div class="line">a1.sources.r1.type = exec</div><div class="line">a1.sources.r1.command = tail -F /tmp/root/hive.log</div><div class="line">a1.sources.r1.shell = /bin/bash -c</div><div class="line"><span class="meta"></span></div><div class="line"># Describe the sink</div><div class="line"><span class="meta">#</span> 分两个端口发送数据 </div><div class="line">a1.sinks.k1.type = avro </div><div class="line">a1.sinks.k1.hostname = node01</div><div class="line">a1.sinks.k1.port = 4141</div><div class="line"></div><div class="line">a1.sinks.k2.type = avro </div><div class="line">a1.sinks.k2.hostname = node01</div><div class="line">a1.sinks.k2.port = 4142</div><div class="line"><span class="meta"></span></div><div class="line"># Describe the channel </div><div class="line">a1.channels.c1.type = memory </div><div class="line">a1.channels.c1.capacity = 1000</div><div class="line">a1.channels.c1.transactionCapacity = 100</div><div class="line"></div><div class="line">a1.channels.c2.type = memory </div><div class="line">a1.channels.c2.capacity = 1000</div><div class="line">a1.channels.c2.transactionCapacity = 100</div><div class="line"><span class="meta"></span></div><div class="line"># Bind the source and sink to the channel </div><div class="line">a1.sources.r1.channels = c1 c2 </div><div class="line">a1.sinks.k1.channel = c1</div><div class="line">a1.sinks.k2.channel = c2</div></pre></td></tr></table></figure><p>配置文件flumejob_2.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Name the components on this agent </div><div class="line">a2.sources = r1</div><div class="line">a2.sinks = k1 </div><div class="line">a2.channels = c1</div><div class="line"><span class="meta"></span></div><div class="line"># Describe/configure the source</div><div class="line">a2.sources.r1.type = avro </div><div class="line"><span class="meta">#</span> 端口抓取数据</div><div class="line">a2.sources.r1.bind = node01</div><div class="line">a2.sources.r1.port = 4141</div><div class="line"><span class="meta"></span></div><div class="line"># Describe the sink </div><div class="line">a2.sinks.k1.type = hdfs</div><div class="line">a2.sinks.k1.hdfs.path = hdfs://node01:9000/flume2/%Y%m%d/%H</div><div class="line"><span class="meta"></span></div><div class="line">#上传文件的前缀</div><div class="line">a2.sinks.k1.hdfs.filePrefix = flume2-</div><div class="line"><span class="meta">#</span>是否按照时间滚动文件夹</div><div class="line">a2.sinks.k1.hdfs.round = true</div><div class="line"><span class="meta">#</span>多少时间单位创建一个新的文件夹</div><div class="line">a2.sinks.k1.hdfs.roundValue = 1</div><div class="line"><span class="meta">#</span>重新定义时间单位</div><div class="line">a2.sinks.k1.hdfs.roundUnit = hour</div><div class="line"><span class="meta">#</span>是否使用本地时间戳</div><div class="line">a2.sinks.k1.hdfs.useLocalTimeStamp = true</div><div class="line"><span class="meta">#</span>积攒多少个 Event 才 flush 到 HDFS 一次</div><div class="line">a2.sinks.k1.hdfs.batchSize = 100</div><div class="line"><span class="meta"></span></div><div class="line">#设置文件类型，可支持压缩</div><div class="line">a2.sinks.k1.hdfs.fileType = DataStream</div><div class="line"><span class="meta">#</span>多久生成一个新的文件</div><div class="line">a2.sinks.k1.hdfs.rollInterval = 600</div><div class="line"><span class="meta">#</span>设置每个文件的滚动大小大概是 128M </div><div class="line">a2.sinks.k1.hdfs.rollSize = 134217700</div><div class="line"><span class="meta">#</span>文件的滚动与 Event 数量无关</div><div class="line">a2.sinks.k1.hdfs.rollCount = 0</div><div class="line"><span class="meta">#</span>最小副本数</div><div class="line">a2.sinks.k1.hdfs.minBlockReplicas = 1</div><div class="line"><span class="meta"></span></div><div class="line"># Describe the channel </div><div class="line">a2.channels.c1.type = memory </div><div class="line">a2.channels.c1.capacity = 1000</div><div class="line">a2.channels.c1.transactionCapacity = 100</div><div class="line"><span class="meta"></span></div><div class="line"># Bind the source and sink to the channel </div><div class="line">a2.sources.r1.channels = c1</div><div class="line">a2.sinks.k1.channel = c1</div></pre></td></tr></table></figure><p>配置文件flumejob_3.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Name the components on this agent </div><div class="line">a3.sources = r1</div><div class="line">a3.sinks = k1 </div><div class="line">a3.channels = c1</div><div class="line"><span class="meta"></span></div><div class="line"># Describe/configure the source </div><div class="line">a3.sources.r1.type = avro</div><div class="line">a3.sources.r1.bind = node01</div><div class="line">a3.sources.r1.port = 4142</div><div class="line"><span class="meta"></span></div><div class="line"># Describe the sink </div><div class="line">a3.sinks.k1.type = file_roll</div><div class="line">a3.sinks.k1.sink.directory = /root/flume2</div><div class="line"><span class="meta"></span></div><div class="line"># Describe the channel </div><div class="line">a3.channels.c1.type = memory </div><div class="line">a3.channels.c1.capacity = 1000</div><div class="line">a3.channels.c1.transactionCapacity = 100</div><div class="line"><span class="meta"></span></div><div class="line"># Bind the source and sink to the channel </div><div class="line">a3.sources.r1.channels = c1</div><div class="line">a3.sinks.k1.channel = c1</div></pre></td></tr></table></figure><font color="red"><strong>注意：有启动顺序</strong></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、概述&quot;&gt;&lt;a href=&quot;#1、概述&quot; class=&quot;headerlink&quot; title=&quot;1、概述&quot;&gt;&lt;/a&gt;1、概述&lt;/h1&gt;&lt;p&gt;​    Flume是一种分布式，可靠且可用的服务，用于有效地收集，聚合和移动大量日&lt;br&gt;志数据。它具有基于流数据流的简单
      
    
    </summary>
    
    
      <category term="Flume" scheme="rabbitluluu.github.io/tags/Flume/"/>
    
  </entry>
  
</feed>
